<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring Cloud重试机制导致接口多次调用问题</title>
      <link href="/posts/c501b3d2/"/>
      <url>/posts/c501b3d2/</url>
      
        <content type="html"><![CDATA[<p>最近在项目上遇到一个奇怪的问题：</p><p>我们有两个服务，服务A调用服务B发送邮件，但结果是重复发送了4封邮件，内容还是一样的。一开始以为是邮件服务器出问题，但通过本地调试发现发送邮件的方法是被重复调用了。</p><p>至于为什么会重复调用，这得先了解一下Spring Cloud 的重试机制。</p><p>Spring Cloud 整合了 Spring Retry实现重试逻辑。</p><p>可以通过Ribbon、Feign、Zuul中进行配置。</p><p>服务A中有如下Ribbon配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="comment"># 客户端读取超时时间，超时时间要小于Hystrix的超时时间，否则重试机制就无意义了</span></span><br><span class="line"><span class="attr">  ReadTimeout:</span> <span class="string">$&#123;RIBBON_READ_TIMEOUT:30000&#125;</span></span><br><span class="line">  <span class="comment"># 客户端连接超时时间</span></span><br><span class="line"><span class="attr">  ConnectTimeout:</span> <span class="string">$&#123;RIBBON_CONNECT_TIMEOUT:3000&#125;</span></span><br><span class="line">  <span class="comment"># 访问实例失败(超时)，允许自动重试，设置重试次数，失败后会更换实例访问，请一定确保接口的幂等性，否则重试可能导致数据异常。</span></span><br><span class="line"><span class="attr">  OkToRetryOnAllOperations:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 最大重试次数(不包含首次调用)</span></span><br><span class="line"><span class="attr">  MaxAutoRetries:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># 切换实例后最大重试次数</span></span><br><span class="line"><span class="attr">  MaxAutoRetriesNextServer:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>可以看到 <code>OkToRetryOnAllOperations</code> 属性控制了超时时是否自动重试所有请求，当为<code>true</code>时会重试所有请求，包含<code>POST</code>请求，可能会对服务器资源产生影响，如我遇到的重复发送多封邮件的问题。</p><p>因此，我将服务A 的 <code>ReadTimeOut</code>更改为 <code>40000</code>，重新部署测试重复调用的情况消失。</p><p><code>ribbon.retryableStatusCodes</code> 属性列出希望客户端重试的响应代码。</p><p>Feign的重试功能被默认配置为永不启用</p><p>Zuul可以通过<code>zuul.retryable</code> 来控制是否开启重试。可以通过<code>zuul.routes.routename.retryable</code>来为逐个路由禁用重试功能</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rabbion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一千行 MySQL 学习笔记-转载</title>
      <link href="/posts/b399a0b0/"/>
      <url>/posts/b399a0b0/</url>
      
        <content type="html"><![CDATA[<p>转载至：<a href="https://shockerli.net/post/1000-line-mysql-note/" target="_blank" rel="noopener">https://shockerli.net/post/1000-line-mysql-note/</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Windows服务 */</span></span><br><span class="line"><span class="comment">-- 启动MySQL</span></span><br><span class="line">    net <span class="keyword">start</span> mysql</span><br><span class="line"><span class="comment">-- 创建Windows服务</span></span><br><span class="line">    sc <span class="keyword">create</span> mysql binPath= mysqld_bin_path(注意：等号与值之间有空格)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 连接与断开服务器 */</span></span><br><span class="line">mysql -h 地址 -P 端口 -u 用户名 -p 密码</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PROCESSLIST</span> <span class="comment">-- 显示哪些线程正在运行</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="comment">-- 显示系统变量信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 数据库操作 */</span> <span class="comment">------------------</span></span><br><span class="line"><span class="comment">-- 查看当前数据库</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DATABASE</span>();</span><br><span class="line"><span class="comment">-- 显示当前时间、用户名、数据库版本</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">now</span>(), <span class="keyword">user</span>(), <span class="keyword">version</span>();</span><br><span class="line"><span class="comment">-- 创建库</span></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span>[ <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 数据库名 数据库选项</span><br><span class="line">    数据库选项：</span><br><span class="line">        <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> charset_name</span><br><span class="line">        <span class="keyword">COLLATE</span> collation_name</span><br><span class="line"><span class="comment">-- 查看已有库</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>[ <span class="keyword">LIKE</span> <span class="string">'PATTERN'</span>]</span><br><span class="line"><span class="comment">-- 查看当前库信息</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> 数据库名</span><br><span class="line"><span class="comment">-- 修改库的选项信息</span></span><br><span class="line">    <span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> 库名 选项信息</span><br><span class="line"><span class="comment">-- 删除库</span></span><br><span class="line">    <span class="keyword">DROP</span> <span class="keyword">DATABASE</span>[ <span class="keyword">IF</span> <span class="keyword">EXISTS</span>] 数据库名</span><br><span class="line">        同时删除该数据库相关的目录及其目录内容</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 表的操作 */</span> <span class="comment">------------------</span></span><br><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line">    <span class="keyword">CREATE</span> [<span class="keyword">TEMPORARY</span>] <span class="keyword">TABLE</span>[ <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] [库名.]表名 ( 表的结构定义 )[ 表选项]</span><br><span class="line">        每个字段必须有数据类型</span><br><span class="line">        最后一个字段后不能有逗号</span><br><span class="line">        <span class="keyword">TEMPORARY</span> 临时表，会话结束时表自动消失</span><br><span class="line">        对于字段的定义：</span><br><span class="line">            字段名 数据类型 [<span class="keyword">NOT</span> <span class="literal">NULL</span> | <span class="literal">NULL</span>] [<span class="keyword">DEFAULT</span> default_value] [AUTO_INCREMENT] [<span class="keyword">UNIQUE</span> [<span class="keyword">KEY</span>] | [PRIMARY] <span class="keyword">KEY</span>] [<span class="keyword">COMMENT</span> <span class="string">'string'</span>]</span><br><span class="line"><span class="comment">-- 表选项</span></span><br><span class="line">    <span class="comment">-- 字符集</span></span><br><span class="line">        <span class="keyword">CHARSET</span> = charset_name</span><br><span class="line">        如果表没有设定，则使用数据库字符集</span><br><span class="line">    <span class="comment">-- 存储引擎</span></span><br><span class="line">        <span class="keyword">ENGINE</span> = engine_name</span><br><span class="line">        表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同</span><br><span class="line">        常见的引擎：<span class="keyword">InnoDB</span> MyISAM <span class="keyword">Memory</span>/<span class="keyword">Heap</span> BDB <span class="keyword">Merge</span> Example CSV MaxDB <span class="keyword">Archive</span></span><br><span class="line">        不同的引擎在保存表的结构和数据时采用不同的方式</span><br><span class="line">        MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引</span><br><span class="line">        <span class="keyword">InnoDB</span>表文件含义：.frm表定义，表空间数据和日志文件</span><br><span class="line">        <span class="keyword">SHOW</span> <span class="keyword">ENGINES</span> <span class="comment">-- 显示存储引擎的状态信息</span></span><br><span class="line">        <span class="keyword">SHOW</span> <span class="keyword">ENGINE</span> 引擎名 &#123;<span class="keyword">LOGS</span>|<span class="keyword">STATUS</span>&#125; <span class="comment">-- 显示存储引擎的日志或状态信息</span></span><br><span class="line">    <span class="comment">-- 自增起始数</span></span><br><span class="line">    AUTO_INCREMENT = 行数</span><br><span class="line">    <span class="comment">-- 数据文件目录</span></span><br><span class="line">        <span class="keyword">DATA</span> <span class="keyword">DIRECTORY</span> = <span class="string">'目录'</span></span><br><span class="line">    <span class="comment">-- 索引文件目录</span></span><br><span class="line">        <span class="keyword">INDEX</span> <span class="keyword">DIRECTORY</span> = <span class="string">'目录'</span></span><br><span class="line">    <span class="comment">-- 表注释</span></span><br><span class="line">        <span class="keyword">COMMENT</span> = <span class="string">'string'</span></span><br><span class="line">    <span class="comment">-- 分区选项</span></span><br><span class="line">        <span class="keyword">PARTITION</span> <span class="keyword">BY</span> ... (详细见手册)</span><br><span class="line"><span class="comment">-- 查看所有表</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">TABLES</span>[ <span class="keyword">LIKE</span> <span class="string">'pattern'</span>]</span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">TABLES</span> <span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="comment">-- 查看表机构</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名 （信息更详细）</span><br><span class="line">    <span class="keyword">DESC</span> 表名 / <span class="keyword">DESCRIBE</span> 表名 / <span class="keyword">EXPLAIN</span> 表名 / <span class="keyword">SHOW</span> <span class="keyword">COLUMNS</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">LIKE</span> <span class="string">'PATTERN'</span>]</span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">TABLE</span> <span class="keyword">STATUS</span> [<span class="keyword">FROM</span> db_name] [<span class="keyword">LIKE</span> <span class="string">'pattern'</span>]</span><br><span class="line"><span class="comment">-- 修改表</span></span><br><span class="line">    <span class="comment">-- 修改表本身的选项</span></span><br><span class="line">        <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 表的选项</span><br><span class="line">        eg: <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ENGINE</span>=MYISAM;</span><br><span class="line">    <span class="comment">-- 对表进行重命名</span></span><br><span class="line">        <span class="keyword">RENAME</span> <span class="keyword">TABLE</span> 原表名 <span class="keyword">TO</span> 新表名</span><br><span class="line">        <span class="keyword">RENAME</span> <span class="keyword">TABLE</span> 原表名 <span class="keyword">TO</span> 库名.表名 （可将表移动到另一个数据库）</span><br><span class="line">        <span class="comment">-- RENAME可以交换两个表名</span></span><br><span class="line">    <span class="comment">-- 修改表的字段机构（13.1.2. ALTER TABLE语法）</span></span><br><span class="line">        <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 操作名</span><br><span class="line">        <span class="comment">-- 操作名</span></span><br><span class="line">            <span class="keyword">ADD</span>[ <span class="keyword">COLUMN</span>] 字段定义       <span class="comment">-- 增加字段</span></span><br><span class="line">                <span class="keyword">AFTER</span> 字段名          <span class="comment">-- 表示增加在该字段名后面</span></span><br><span class="line">                <span class="keyword">FIRST</span>               <span class="comment">-- 表示增加在第一个</span></span><br><span class="line">            <span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span>(字段名)   <span class="comment">-- 创建主键</span></span><br><span class="line">            <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> [索引名] (字段名)<span class="comment">-- 创建唯一索引</span></span><br><span class="line">            <span class="keyword">ADD</span> <span class="keyword">INDEX</span> [索引名] (字段名) <span class="comment">-- 创建普通索引</span></span><br><span class="line">            <span class="keyword">DROP</span>[ <span class="keyword">COLUMN</span>] 字段名      <span class="comment">-- 删除字段</span></span><br><span class="line">            <span class="keyword">MODIFY</span>[ <span class="keyword">COLUMN</span>] 字段名 字段属性     <span class="comment">-- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)</span></span><br><span class="line">            <span class="keyword">CHANGE</span>[ <span class="keyword">COLUMN</span>] 原字段名 新字段名 字段属性      <span class="comment">-- 支持对字段名修改</span></span><br><span class="line">            <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>    <span class="comment">-- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)</span></span><br><span class="line">            <span class="keyword">DROP</span> <span class="keyword">INDEX</span> 索引名 <span class="comment">-- 删除索引</span></span><br><span class="line">            <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> 外键    <span class="comment">-- 删除外键</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line">    <span class="keyword">DROP</span> <span class="keyword">TABLE</span>[ <span class="keyword">IF</span> <span class="keyword">EXISTS</span>] 表名 ...</span><br><span class="line"><span class="comment">-- 清空表数据</span></span><br><span class="line">    <span class="keyword">TRUNCATE</span> [<span class="keyword">TABLE</span>] 表名</span><br><span class="line"><span class="comment">-- 复制表结构</span></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">LIKE</span> 要复制的表名</span><br><span class="line"><span class="comment">-- 复制表结构和数据</span></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名 [<span class="keyword">AS</span>] <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 要复制的表名</span><br><span class="line"><span class="comment">-- 检查表是否有错误</span></span><br><span class="line">    <span class="keyword">CHECK</span> <span class="keyword">TABLE</span> tbl_name [, tbl_name] ... [<span class="keyword">option</span>] ...</span><br><span class="line"><span class="comment">-- 优化表</span></span><br><span class="line">    <span class="keyword">OPTIMIZE</span> [<span class="keyword">LOCAL</span> | <span class="keyword">NO_WRITE_TO_BINLOG</span>] <span class="keyword">TABLE</span> tbl_name [, tbl_name] ...</span><br><span class="line"><span class="comment">-- 修复表</span></span><br><span class="line">    <span class="keyword">REPAIR</span> [<span class="keyword">LOCAL</span> | <span class="keyword">NO_WRITE_TO_BINLOG</span>] <span class="keyword">TABLE</span> tbl_name [, tbl_name] ... [<span class="keyword">QUICK</span>] [<span class="keyword">EXTENDED</span>] [USE_FRM]</span><br><span class="line"><span class="comment">-- 分析表</span></span><br><span class="line">    <span class="keyword">ANALYZE</span> [<span class="keyword">LOCAL</span> | <span class="keyword">NO_WRITE_TO_BINLOG</span>] <span class="keyword">TABLE</span> tbl_name [, tbl_name] ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 数据操作 */</span> <span class="comment">------------------</span></span><br><span class="line"><span class="comment">-- 增</span></span><br><span class="line">    <span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] 表名 [(字段列表)] <span class="keyword">VALUES</span> (值列表)[, (值列表), ...]</span><br><span class="line">        <span class="comment">-- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。</span></span><br><span class="line">        <span class="comment">-- 可同时插入多条数据记录！</span></span><br><span class="line">        <span class="keyword">REPLACE</span> 与 <span class="keyword">INSERT</span> 完全一样，可互换。</span><br><span class="line">    <span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] 表名 <span class="keyword">SET</span> 字段名=值[, 字段名=值, ...]</span><br><span class="line"><span class="comment">-- 查</span></span><br><span class="line">    <span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名[ 其他子句]</span><br><span class="line">        <span class="comment">-- 可来自多个表的多个字段</span></span><br><span class="line">        <span class="comment">-- 其他子句可以不使用</span></span><br><span class="line">        <span class="comment">-- 字段列表可以用*代替，表示所有字段</span></span><br><span class="line"><span class="comment">-- 删</span></span><br><span class="line">    <span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名[ 删除条件子句]</span><br><span class="line">        没有条件子句，则会删除全部</span><br><span class="line"><span class="comment">-- 改</span></span><br><span class="line">    <span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段名=新值[, 字段名=新值] [更新条件]</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 字符集编码 */</span> <span class="comment">------------------</span></span><br><span class="line"><span class="comment">-- MySQL、数据库、表、字段均可设置编码</span></span><br><span class="line"><span class="comment">-- 数据编码与客户端编码不需一致</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'character_set_%'</span>   <span class="comment">-- 查看所有字符集编码项</span></span><br><span class="line">    character_set_client        客户端向服务器发送数据时使用的编码</span><br><span class="line">    character_set_results       服务器端将结果返回给客户端所使用的编码</span><br><span class="line">    character_set_connection    连接层编码</span><br><span class="line"><span class="keyword">SET</span> 变量名 = 变量值</span><br><span class="line">    <span class="keyword">SET</span> character_set_client = gbk;</span><br><span class="line">    <span class="keyword">SET</span> character_set_results = gbk;</span><br><span class="line">    <span class="keyword">SET</span> character_set_connection = gbk;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">NAMES</span> GBK;  <span class="comment">-- 相当于完成以上三个设置</span></span><br><span class="line"><span class="comment">-- 校对集</span></span><br><span class="line">    校对集用以排序</span><br><span class="line">    <span class="keyword">SHOW</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> [<span class="keyword">LIKE</span> <span class="string">'pattern'</span>]/<span class="keyword">SHOW</span> <span class="keyword">CHARSET</span> [<span class="keyword">LIKE</span> <span class="string">'pattern'</span>]   查看所有字符集</span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">COLLATION</span> [<span class="keyword">LIKE</span> <span class="string">'pattern'</span>]     查看所有校对集</span><br><span class="line">    <span class="keyword">CHARSET</span> 字符集编码     设置字符集编码</span><br><span class="line">    <span class="keyword">COLLATE</span> 校对集编码     设置校对集编码</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 数据类型（列类型） */</span> <span class="comment">------------------</span></span><br><span class="line"><span class="number">1.</span> 数值类型</span><br><span class="line"><span class="comment">-- a. 整型 ----------</span></span><br><span class="line">    类型         字节     范围（有符号位）</span><br><span class="line">    <span class="built_in">tinyint</span>     <span class="number">1</span>字节    <span class="number">-128</span> ~ <span class="number">127</span>      无符号位：<span class="number">0</span> ~ <span class="number">255</span></span><br><span class="line">    <span class="built_in">smallint</span>    <span class="number">2</span>字节    <span class="number">-32768</span> ~ <span class="number">32767</span></span><br><span class="line">    mediumint   <span class="number">3</span>字节    <span class="number">-8388608</span> ~ <span class="number">8388607</span></span><br><span class="line">    <span class="built_in">int</span>         <span class="number">4</span>字节</span><br><span class="line">    <span class="built_in">bigint</span>      <span class="number">8</span>字节</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span>(M)  M表示总位数</span><br><span class="line">    - 默认存在符号位，<span class="keyword">unsigned</span> 属性修改</span><br><span class="line">    - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以<span class="number">0</span>补填，zerofill 属性修改</span><br><span class="line">        例：<span class="built_in">int</span>(<span class="number">5</span>)   插入一个数<span class="string">'123'</span>，补填后为<span class="string">'00123'</span></span><br><span class="line">    - 在满足要求的情况下，越小越好。</span><br><span class="line">    - <span class="number">1</span>表示<span class="built_in">bool</span>值真，<span class="number">0</span>表示<span class="built_in">bool</span>值假。MySQL没有布尔类型，通过整型<span class="number">0</span>和<span class="number">1</span>表示。常用<span class="built_in">tinyint</span>(<span class="number">1</span>)表示布尔型。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- b. 浮点型 ----------</span></span><br><span class="line">    类型             字节     范围</span><br><span class="line">    <span class="built_in">float</span>(单精度)     <span class="number">4</span>字节</span><br><span class="line">    <span class="keyword">double</span>(双精度)    <span class="number">8</span>字节</span><br><span class="line">    浮点型既支持符号位 <span class="keyword">unsigned</span> 属性，也支持显示宽度 zerofill 属性。</span><br><span class="line">        不同于整型，前后均会补填<span class="number">0.</span></span><br><span class="line">    定义浮点型时，需指定总位数和小数位数。</span><br><span class="line">        <span class="built_in">float</span>(M, D)     <span class="keyword">double</span>(M, D)</span><br><span class="line">        M表示总位数，D表示小数位数。</span><br><span class="line">        M和D的大小会决定浮点数的范围。不同于整型的固定范围。</span><br><span class="line">        M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。</span><br><span class="line">        支持科学计数法表示。</span><br><span class="line">        浮点数表示近似值。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- c. 定点数 ----------</span></span><br><span class="line">    <span class="built_in">decimal</span> <span class="comment">-- 可变长度</span></span><br><span class="line">    <span class="built_in">decimal</span>(M, D)   M也表示总位数，D表示小数位数。</span><br><span class="line">    保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。</span><br><span class="line">    将浮点数转换为字符串来保存，每<span class="number">9</span>位数字保存为<span class="number">4</span>个字节。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 字符串类型</span><br><span class="line"><span class="comment">-- a. char, varchar ----------</span></span><br><span class="line">    <span class="built_in">char</span>    定长字符串，速度快，但浪费空间</span><br><span class="line">    <span class="built_in">varchar</span> 变长字符串，速度慢，但节省空间</span><br><span class="line">    M表示能存储的最大长度，此长度是字符数，非字节数。</span><br><span class="line">    不同的编码，所占用的空间不同。</span><br><span class="line">    <span class="built_in">char</span>,最多<span class="number">255</span>个字符，与编码无关。</span><br><span class="line">    <span class="built_in">varchar</span>,最多<span class="number">65535</span>字符，与编码有关。</span><br><span class="line">    一条有效记录最大不能超过<span class="number">65535</span>个字节。</span><br><span class="line">        utf8 最大为<span class="number">21844</span>个字符，gbk 最大为<span class="number">32766</span>个字符，latin1 最大为<span class="number">65532</span>个字符</span><br><span class="line">    <span class="built_in">varchar</span> 是变长的，需要利用存储空间保存 <span class="built_in">varchar</span> 的长度，如果数据小于<span class="number">255</span>个字节，则采用一个字节来保存长度，反之需要两个字节来保存。</span><br><span class="line">    <span class="built_in">varchar</span> 的最大有效长度由最大行大小和使用的字符集确定。</span><br><span class="line">    最大有效长度是<span class="number">65532</span>字节，因为在<span class="built_in">varchar</span>存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是<span class="number">64432</span><span class="number">-1</span><span class="number">-2</span>=<span class="number">65532</span>字节。</span><br><span class="line">    例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3</span><br><span class="line"></span><br><span class="line"><span class="comment">-- b. blob, text ----------</span></span><br><span class="line">    blob 二进制字符串（字节字符串）</span><br><span class="line">        tinyblob, blob, mediumblob, longblob</span><br><span class="line">    text 非二进制字符串（字符字符串）</span><br><span class="line">        tinytext, text, mediumtext, longtext</span><br><span class="line">    text 在定义时，不需要定义长度，也不会计算总长度。</span><br><span class="line">    text 类型在定义时，不可给default值</span><br><span class="line"></span><br><span class="line"><span class="comment">-- c. binary, varbinary ----------</span></span><br><span class="line">    类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。</span><br><span class="line">    char, varchar, text 对应 binary, varbinary, blob.</span><br><span class="line"></span><br><span class="line">3. 日期时间类型</span><br><span class="line">    一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。</span><br><span class="line">    datetime    8字节    日期及时间     1000-01-01 00:00:00 到 9999-12-31 23:59:59</span><br><span class="line">    date        3字节    日期         1000-01-01 到 9999-12-31</span><br><span class="line">    timestamp   4字节    时间戳        19700101000000 到 2038-01-19 03:14:07</span><br><span class="line">    time        3字节    时间         -838:59:59 到 838:59:59</span><br><span class="line">    year        1字节    年份         1901 - 2155</span><br><span class="line"></span><br><span class="line">datetime    YYYY-MM-DD hh:mm:ss</span><br><span class="line">timestamp   YY-MM-DD hh:mm:ss</span><br><span class="line">            YYYYMMDDhhmmss</span><br><span class="line">            YYMMDDhhmmss</span><br><span class="line">            YYYYMMDDhhmmss</span><br><span class="line">            YYMMDDhhmmss</span><br><span class="line">date        YYYY-MM-DD</span><br><span class="line">            YY-MM-DD</span><br><span class="line">            YYYYMMDD</span><br><span class="line">            YYMMDD</span><br><span class="line">            YYYYMMDD</span><br><span class="line">            YYMMDD</span><br><span class="line">time        hh:mm:ss</span><br><span class="line">            hhmmss</span><br><span class="line">            hhmmss</span><br><span class="line">year        YYYY</span><br><span class="line">            YY</span><br><span class="line">            YYYY</span><br><span class="line">            YY</span><br><span class="line"></span><br><span class="line">4. 枚举和集合</span><br><span class="line"><span class="comment">-- 枚举(enum) ----------</span></span><br><span class="line">enum(val1, val2, val3...)</span><br><span class="line">    在已知的值中进行单选。最大数量为65535.</span><br><span class="line">    枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。</span><br><span class="line">    表现为字符串类型，存储却是整型。</span><br><span class="line">    NULL值的索引是NULL。</span><br><span class="line">    空字符串错误值的索引值是0。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 集合（set） ----------</span></span><br><span class="line"><span class="keyword">set</span>(val1, val2, val3...)</span><br><span class="line">    <span class="keyword">create</span> <span class="keyword">table</span> tab ( gender <span class="keyword">set</span>(<span class="string">'男'</span>, <span class="string">'女'</span>, <span class="string">'无'</span>) );</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tab <span class="keyword">values</span> (<span class="string">'男, 女'</span>);</span><br><span class="line">    最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。</span><br><span class="line">    当创建表时，<span class="keyword">SET</span>成员值的尾部空格将自动被删除。</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选择类型 */</span></span><br><span class="line"><span class="comment">-- PHP角度</span></span><br><span class="line"><span class="number">1.</span> 功能满足</span><br><span class="line"><span class="number">2.</span> 存储空间尽量小，处理效率更高</span><br><span class="line"><span class="number">3.</span> 考虑兼容问题</span><br><span class="line"></span><br><span class="line"><span class="comment">-- IP存储 ----------</span></span><br><span class="line"><span class="number">1.</span> 只需存储，可用字符串</span><br><span class="line"><span class="number">2.</span> 如果需计算，查找等，可存储为<span class="number">4</span>个字节的无符号<span class="built_in">int</span>，即<span class="keyword">unsigned</span></span><br><span class="line">    <span class="number">1</span>) PHP函数转换</span><br><span class="line">        ip2long可转换为整型，但会出现携带符号问题。需格式化为无符号的整型。</span><br><span class="line">        利用sprintf函数格式化字符串</span><br><span class="line">        sprintf(<span class="string">"%u"</span>, ip2long(<span class="string">'192.168.3.134'</span>));</span><br><span class="line">        然后用long2ip将整型转回IP字符串</span><br><span class="line">    2) MySQL函数转换(无符号整型，UNSIGNED)</span><br><span class="line">        INET_ATON('127.0.0.1') 将IP转为整型</span><br><span class="line">        INET_NTOA(2130706433) 将整型转为IP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 列属性（列约束） */</span> <span class="comment">------------------</span></span><br><span class="line">1. PRIMARY 主键</span><br><span class="line">    - 能唯一标识记录的字段，可以作为主键。</span><br><span class="line">    - 一个表只能有一个主键。</span><br><span class="line">    - 主键具有唯一性。</span><br><span class="line">    - 声明字段时，用 primary key 标识。</span><br><span class="line">        也可以在字段列表之后声明</span><br><span class="line">            例：<span class="keyword">create</span> <span class="keyword">table</span> tab ( <span class="keyword">id</span> <span class="built_in">int</span>, stu <span class="built_in">varchar</span>(<span class="number">10</span>), primary <span class="keyword">key</span> (<span class="keyword">id</span>));</span><br><span class="line">    - 主键字段的值不能为null。</span><br><span class="line">    - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。</span><br><span class="line">        例：<span class="keyword">create</span> <span class="keyword">table</span> tab ( <span class="keyword">id</span> <span class="built_in">int</span>, stu <span class="built_in">varchar</span>(<span class="number">10</span>), age <span class="built_in">int</span>, primary <span class="keyword">key</span> (stu, age));</span><br><span class="line"></span><br><span class="line">2. UNIQUE 唯一索引（唯一约束）</span><br><span class="line">    使得某字段的值也不能重复。</span><br><span class="line"></span><br><span class="line">3. NULL 约束</span><br><span class="line">    null不是数据类型，是列的一个属性。</span><br><span class="line">    表示当前列是否可以为null，表示什么都没有。</span><br><span class="line">    null, 允许为空。默认。</span><br><span class="line">    not null, 不允许为空。</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tab <span class="keyword">values</span> (<span class="literal">null</span>, <span class="string">'val'</span>);</span><br><span class="line">        <span class="comment">-- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null</span></span><br><span class="line"></span><br><span class="line">4. DEFAULT 默认值属性</span><br><span class="line">    当前字段的默认值。</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tab <span class="keyword">values</span> (<span class="keyword">default</span>, <span class="string">'val'</span>);    <span class="comment">-- 此时表示强制使用默认值。</span></span><br><span class="line">    <span class="keyword">create</span> <span class="keyword">table</span> tab ( add_time <span class="built_in">timestamp</span> <span class="keyword">default</span> <span class="keyword">current_timestamp</span> );</span><br><span class="line">        <span class="comment">-- 表示将当前时间的时间戳设为默认值。</span></span><br><span class="line">        current_date, current_time</span><br><span class="line"></span><br><span class="line">5. AUTO_INCREMENT 自动增长约束</span><br><span class="line">    自动增长必须为索引（主键或unique）</span><br><span class="line">    只能存在一个字段为自动增长。</span><br><span class="line">    默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 <span class="keyword">alter</span> <span class="keyword">table</span> tbl auto_increment = x;</span><br><span class="line"></span><br><span class="line">6. <span class="keyword">COMMENT</span> 注释</span><br><span class="line">    例：<span class="keyword">create</span> <span class="keyword">table</span> tab ( <span class="keyword">id</span> <span class="built_in">int</span> ) <span class="keyword">comment</span> <span class="string">'注释内容'</span>;</span><br><span class="line"></span><br><span class="line">7. FOREIGN KEY 外键约束</span><br><span class="line">    用于限制主表与从表数据完整性。</span><br><span class="line">    <span class="keyword">alter</span> <span class="keyword">table</span> t1 <span class="keyword">add</span> <span class="keyword">constraint</span> <span class="string">`t1_t2_fk`</span> <span class="keyword">foreign</span> <span class="keyword">key</span> (t1_id) <span class="keyword">references</span> t2(<span class="keyword">id</span>);</span><br><span class="line">        <span class="comment">-- 将表t1的t1_id外键关联到表t2的id字段。</span></span><br><span class="line">        <span class="comment">-- 每个外键都有一个名字，可以通过 constraint 指定</span></span><br><span class="line"></span><br><span class="line">    存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。</span><br><span class="line"></span><br><span class="line">    作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。</span><br><span class="line"></span><br><span class="line">    MySQL中，可以对InnoDB引擎使用外键约束：</span><br><span class="line">    语法：</span><br><span class="line">    foreign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]</span><br><span class="line">    此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。</span><br><span class="line"></span><br><span class="line">    可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。</span><br><span class="line">    如果指定了 on <span class="keyword">update</span> 或 <span class="keyword">on</span> <span class="keyword">delete</span>：在删除或更新时，有如下几个操作可以选择：</span><br><span class="line">    <span class="number">1.</span> <span class="keyword">cascade</span>，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。</span><br><span class="line">    <span class="number">2.</span> <span class="keyword">set</span> <span class="literal">null</span>，设置为<span class="literal">null</span>。主表数据被更新（主键值更新），从表的外键被设置为<span class="literal">null</span>。主表记录被删除，从表相关记录外键被设置成<span class="literal">null</span>。但注意，要求该外键列，没有<span class="keyword">not</span> <span class="literal">null</span>属性约束。</span><br><span class="line">    <span class="number">3.</span> restrict，拒绝父表删除和更新。</span><br><span class="line"></span><br><span class="line">    注意，外键只被<span class="keyword">InnoDB</span>存储引擎所支持。其他引擎是不支持的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 建表规范 */</span> <span class="comment">------------------</span></span><br><span class="line">    <span class="comment">-- Normal Format, NF</span></span><br><span class="line">        - 每个表保存一个实体信息</span><br><span class="line">        - 每个具有一个<span class="keyword">ID</span>字段作为主键</span><br><span class="line">        - <span class="keyword">ID</span>主键 + 原子表</span><br><span class="line">    <span class="comment">-- 1NF, 第一范式</span></span><br><span class="line">        字段不能再分，就满足第一范式。</span><br><span class="line">    <span class="comment">-- 2NF, 第二范式</span></span><br><span class="line">        满足第一范式的前提下，不能出现部分依赖。</span><br><span class="line">        消除符合主键就可以避免部分依赖。增加单列关键字。</span><br><span class="line">    <span class="comment">-- 3NF, 第三范式</span></span><br><span class="line">        满足第二范式的前提下，不能出现传递依赖。</span><br><span class="line">        某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。</span><br><span class="line">        将一个实体信息的数据放在一个表内实现。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* SELECT */</span> <span class="comment">------------------</span></span><br><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span>|<span class="keyword">DISTINCT</span>] select_expr <span class="keyword">FROM</span> -&gt; <span class="keyword">WHERE</span> -&gt; <span class="keyword">GROUP</span> <span class="keyword">BY</span> [合计函数] -&gt; <span class="keyword">HAVING</span> -&gt; <span class="keyword">ORDER</span> <span class="keyword">BY</span> -&gt; <span class="keyword">LIMIT</span></span><br><span class="line"></span><br><span class="line">a. select_expr</span><br><span class="line">    <span class="comment">-- 可以用 * 表示所有字段。</span></span><br><span class="line">        <span class="keyword">select</span> * <span class="keyword">from</span> tb;</span><br><span class="line">    <span class="comment">-- 可以使用表达式（计算公式、函数调用、字段也是个表达式）</span></span><br><span class="line">        <span class="keyword">select</span> stu, <span class="number">29</span>+<span class="number">25</span>, <span class="keyword">now</span>() <span class="keyword">from</span> tb;</span><br><span class="line">    <span class="comment">-- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。</span></span><br><span class="line">        - 使用 as 关键字，也可省略 as.</span><br><span class="line">        <span class="keyword">select</span> stu+<span class="number">10</span> <span class="keyword">as</span> add10 <span class="keyword">from</span> tb;</span><br><span class="line"></span><br><span class="line">b. FROM 子句</span><br><span class="line">    用于标识查询来源。</span><br><span class="line">    <span class="comment">-- 可以为表起别名。使用as关键字。</span></span><br><span class="line">        <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb1 <span class="keyword">AS</span> tt, tb2 <span class="keyword">AS</span> bb;</span><br><span class="line">    <span class="comment">-- from子句后，可以同时出现多个表。</span></span><br><span class="line">        <span class="comment">-- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。</span></span><br><span class="line">        <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb1, tb2;</span><br><span class="line">    <span class="comment">-- 向优化符提示如何选择索引</span></span><br><span class="line">        <span class="keyword">USE</span> <span class="keyword">INDEX</span>、<span class="keyword">IGNORE</span> <span class="keyword">INDEX</span>、<span class="keyword">FORCE</span> <span class="keyword">INDEX</span></span><br><span class="line">        <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table1 <span class="keyword">USE</span> <span class="keyword">INDEX</span> (key1,key2) <span class="keyword">WHERE</span> key1=<span class="number">1</span> <span class="keyword">AND</span> key2=<span class="number">2</span> <span class="keyword">AND</span> key3=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table1 <span class="keyword">IGNORE</span> <span class="keyword">INDEX</span> (key3) <span class="keyword">WHERE</span> key1=<span class="number">1</span> <span class="keyword">AND</span> key2=<span class="number">2</span> <span class="keyword">AND</span> key3=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">c. WHERE 子句</span><br><span class="line">    <span class="comment">-- 从from获得的数据源中进行筛选。</span></span><br><span class="line">    <span class="comment">-- 整型1表示真，0表示假。</span></span><br><span class="line">    <span class="comment">-- 表达式由运算符和运算数组成。</span></span><br><span class="line">        <span class="comment">-- 运算数：变量（字段）、值、函数返回值</span></span><br><span class="line">        <span class="comment">-- 运算符：</span></span><br><span class="line">            =, &lt;=&gt;, &lt;&gt;, !=, &lt;=, &lt;, &gt;=, &gt;, !, &amp;&amp;, ||,</span><br><span class="line">            in (not) null, (not) like, (not) in, (not) between and, is (not), and, or, not, xor</span><br><span class="line">            is/is not 加上ture/false/unknown，检验某个值的真假</span><br><span class="line">            &lt;=&gt;与&lt;&gt;功能相同，&lt;=&gt;可用于null比较</span><br><span class="line"></span><br><span class="line">d. GROUP BY 子句, 分组子句</span><br><span class="line">    GROUP BY 字段/别名 [排序方式]</span><br><span class="line">    分组后会进行排序。升序：ASC，降序：DESC</span><br><span class="line"></span><br><span class="line">    以下[合计函数]需配合 GROUP BY 使用：</span><br><span class="line">    count 返回不同的非NULL值数目  count(*)、count(字段)</span><br><span class="line">    sum 求和</span><br><span class="line">    max 求最大值</span><br><span class="line">    min 求最小值</span><br><span class="line">    avg 求平均值</span><br><span class="line">    group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。</span><br><span class="line"></span><br><span class="line">e. HAVING 子句，条件子句</span><br><span class="line">    与 where 功能、用法相同，执行时机不同。</span><br><span class="line">    where 在开始时执行检测数据，对原数据进行过滤。</span><br><span class="line">    having 对筛选出的结果再次进行过滤。</span><br><span class="line">    having 字段必须是查询出来的，where 字段必须是数据表存在的。</span><br><span class="line">    where 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。</span><br><span class="line">    where 不可以使用合计函数。一般需用合计函数才会用 having</span><br><span class="line">    SQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。</span><br><span class="line"></span><br><span class="line">f. ORDER BY 子句，排序子句</span><br><span class="line">    order by 排序字段/别名 排序方式 [,排序字段/别名 排序方式]...</span><br><span class="line">    升序：ASC，降序：DESC</span><br><span class="line">    支持多个字段的排序。</span><br><span class="line"></span><br><span class="line">g. LIMIT 子句，限制结果数量子句</span><br><span class="line">    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。</span><br><span class="line">    limit 起始位置, 获取条数</span><br><span class="line">    省略第一个参数，表示从索引0开始。limit 获取条数</span><br><span class="line"></span><br><span class="line">h. DISTINCT, ALL 选项</span><br><span class="line">    distinct 去除重复记录</span><br><span class="line">    默认为 all, 全部记录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* UNION */</span> <span class="comment">------------------</span></span><br><span class="line">    将多个<span class="keyword">select</span>查询的结果组合成一个结果集合。</span><br><span class="line">    <span class="keyword">SELECT</span> ... <span class="keyword">UNION</span> [<span class="keyword">ALL</span>|<span class="keyword">DISTINCT</span>] <span class="keyword">SELECT</span> ...</span><br><span class="line">    默认 <span class="keyword">DISTINCT</span> 方式，即所有返回的行都是唯一的</span><br><span class="line">    建议，对每个<span class="keyword">SELECT</span>查询加上小括号包裹。</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序时，需加上 <span class="keyword">LIMIT</span> 进行结合。</span><br><span class="line">    需要各<span class="keyword">select</span>查询的字段数量一样。</span><br><span class="line">    每个<span class="keyword">select</span>查询的字段列表(数量、类型)应一致，因为结果中的字段名以第一条<span class="keyword">select</span>语句为准。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 子查询 */</span> <span class="comment">------------------</span></span><br><span class="line">    - 子查询需用括号包裹。</span><br><span class="line"><span class="comment">-- from型</span></span><br><span class="line">    <span class="keyword">from</span>后要求是一个表，必须给子查询结果取个别名。</span><br><span class="line">    - 简化每个查询内的条件。</span><br><span class="line">    - <span class="keyword">from</span>型需将结果生成一个临时表格，可用以原表的锁定的释放。</span><br><span class="line">    - 子查询返回一个表，表型子查询。</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> tb <span class="keyword">where</span> <span class="keyword">id</span>&gt;<span class="number">0</span>) <span class="keyword">as</span> subfrom <span class="keyword">where</span> <span class="keyword">id</span>&gt;<span class="number">1</span>;</span><br><span class="line"><span class="comment">-- where型</span></span><br><span class="line">    - 子查询返回一个值，标量子查询。</span><br><span class="line">    - 不需要给子查询取别名。</span><br><span class="line">    - where子查询内的表，不能直接用以更新。</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> tb <span class="keyword">where</span> money = (<span class="keyword">select</span> <span class="keyword">max</span>(money) <span class="keyword">from</span> tb);</span><br><span class="line">    <span class="comment">-- 列子查询</span></span><br><span class="line">        如果子查询结果返回的是一列。</span><br><span class="line">        使用 in 或 not in 完成查询</span><br><span class="line">        exists 和 not exists 条件</span><br><span class="line">            如果子查询返回数据，则返回1或0。常用于判断条件。</span><br><span class="line">            <span class="keyword">select</span> column1 <span class="keyword">from</span> t1 <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> * <span class="keyword">from</span> t2);</span><br><span class="line">    <span class="comment">-- 行子查询</span></span><br><span class="line">        查询条件是一个行。</span><br><span class="line">        <span class="keyword">select</span> * <span class="keyword">from</span> t1 <span class="keyword">where</span> (<span class="keyword">id</span>, gender) <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">id</span>, gender <span class="keyword">from</span> t2);</span><br><span class="line">        行构造符：(col1, col2, ...) 或 ROW(col1, col2, ...)</span><br><span class="line">        行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 特殊运算符</span></span><br><span class="line">    != all()    相当于 not in</span><br><span class="line">    = some()    相当于 in。any 是 some 的别名</span><br><span class="line">    != some()   不等同于 not in，不等于其中某一个。</span><br><span class="line">    all, some 可以配合其他运算符一起使用。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 连接查询(join) */</span> <span class="comment">------------------</span></span><br><span class="line">    将多个表的字段进行连接，可以指定连接条件。</span><br><span class="line"><span class="comment">-- 内连接(inner join)</span></span><br><span class="line">    - 默认就是内连接，可省略inner。</span><br><span class="line">    - 只有数据存在时才能发送连接。即连接结果不能出现空行。</span><br><span class="line">    on 表示连接条件。其条件表达式与where类似。也可以省略条件（表示条件永远为真）</span><br><span class="line">    也可用where表示连接条件。</span><br><span class="line">    还有 using, 但需字段名相同。 using(字段名)</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 交叉连接 cross join</span></span><br><span class="line">        即，没有条件的内连接。</span><br><span class="line">        <span class="keyword">select</span> * <span class="keyword">from</span> tb1 <span class="keyword">cross</span> <span class="keyword">join</span> tb2;</span><br><span class="line"><span class="comment">-- 外连接(outer join)</span></span><br><span class="line">    - 如果数据不存在，也会出现在连接结果中。</span><br><span class="line">    <span class="comment">-- 左外连接 left join</span></span><br><span class="line">        如果数据不存在，左表记录会出现，而右表为null填充</span><br><span class="line">    <span class="comment">-- 右外连接 right join</span></span><br><span class="line">        如果数据不存在，右表记录会出现，而左表为null填充</span><br><span class="line"><span class="comment">-- 自然连接(natural join)</span></span><br><span class="line">    自动判断连接条件完成连接。</span><br><span class="line">    相当于省略了using，会自动查找相同字段名。</span><br><span class="line">    natural join</span><br><span class="line">    natural left join</span><br><span class="line">    natural right join</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> info.id, info.name, info.stu_num, extra_info.hobby, extra_info.sex <span class="keyword">from</span> info, extra_info <span class="keyword">where</span> info.stu_num = extra_info.stu_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 导入导出 */</span> <span class="comment">------------------</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">into</span> <span class="keyword">outfile</span> 文件地址 [控制格式] <span class="keyword">from</span> 表名;   <span class="comment">-- 导出表数据</span></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> [<span class="keyword">local</span>] <span class="keyword">infile</span> 文件地址 [<span class="keyword">replace</span>|<span class="keyword">ignore</span>] <span class="keyword">into</span> <span class="keyword">table</span> 表名 [控制格式]; <span class="comment">-- 导入数据</span></span><br><span class="line">    生成的数据默认的分隔符是制表符</span><br><span class="line">    local未指定，则数据文件必须在服务器上</span><br><span class="line">    <span class="keyword">replace</span> 和 <span class="keyword">ignore</span> 关键词控制对现有的唯一键记录的重复的处理</span><br><span class="line"><span class="comment">-- 控制格式</span></span><br><span class="line"><span class="keyword">fields</span>  控制字段格式</span><br><span class="line">默认：<span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span> <span class="keyword">enclosed</span> <span class="keyword">by</span> <span class="string">''</span> <span class="keyword">escaped</span> <span class="keyword">by</span> <span class="string">'\\'</span></span><br><span class="line">    <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'string'</span>  <span class="comment">-- 终止</span></span><br><span class="line">    <span class="keyword">enclosed</span> <span class="keyword">by</span> <span class="string">'char'</span>      <span class="comment">-- 包裹</span></span><br><span class="line">    <span class="keyword">escaped</span> <span class="keyword">by</span> <span class="string">'char'</span>       <span class="comment">-- 转义</span></span><br><span class="line">    <span class="comment">-- 示例：</span></span><br><span class="line">        <span class="keyword">SELECT</span> a,b,a+b <span class="keyword">INTO</span> <span class="keyword">OUTFILE</span> <span class="string">'/tmp/result.text'</span></span><br><span class="line">        <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">','</span> <span class="keyword">OPTIONALLY</span> <span class="keyword">ENCLOSED</span> <span class="keyword">BY</span> <span class="string">'"'</span></span><br><span class="line">        <span class="keyword">LINES</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\n'</span></span><br><span class="line">        <span class="keyword">FROM</span> test_table;</span><br><span class="line">lines   控制行格式</span><br><span class="line">默认：lines terminated by '\n'</span><br><span class="line">    terminated by 'string'  <span class="comment">-- 终止</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* INSERT */</span> <span class="comment">------------------</span></span><br><span class="line"><span class="keyword">select</span>语句获得的数据可以用<span class="keyword">insert</span>插入。</span><br><span class="line"></span><br><span class="line">可以省略对列的指定，要求 <span class="keyword">values</span> () 括号内，提供给了按照列顺序出现的所有字段的值。</span><br><span class="line">    或者使用<span class="keyword">set</span>语法。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">SET</span> <span class="keyword">field</span>=<span class="keyword">value</span>,...；</span><br><span class="line"></span><br><span class="line">可以一次性使用多个值，采用(), (), ();的形式。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">VALUES</span> (), (), ();</span><br><span class="line"></span><br><span class="line">可以在列值指定时，使用表达式。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">VALUES</span> (field_value, <span class="number">10</span>+<span class="number">10</span>, <span class="keyword">now</span>());</span><br><span class="line">可以使用一个特殊值 DEFAULT，表示该列使用默认值。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">VALUES</span> (field_value, <span class="keyword">DEFAULT</span>);</span><br><span class="line"></span><br><span class="line">可以通过一个查询的结果，作为需要插入的值。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">SELECT</span> ...;</span><br><span class="line"></span><br><span class="line">可以指定在插入的值出现主键（或唯一索引）冲突时，更新其他非主键列的信息。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">VALUES</span>/<span class="keyword">SET</span>/<span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span> <span class="keyword">UPDATE</span> 字段=值, …;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* DELETE */</span> <span class="comment">------------------</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tbl_name [<span class="keyword">WHERE</span> where_definition] [<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...] [<span class="keyword">LIMIT</span> <span class="keyword">row_count</span>]</span><br><span class="line"></span><br><span class="line">按照条件删除。<span class="keyword">where</span></span><br><span class="line"></span><br><span class="line">指定删除的最多记录数。<span class="keyword">limit</span></span><br><span class="line"></span><br><span class="line">可以通过排序条件删除。<span class="keyword">order</span> <span class="keyword">by</span> + <span class="keyword">limit</span></span><br><span class="line"></span><br><span class="line">支持多表删除，使用类似连接语法。</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 需要删除数据多表<span class="number">1</span>，表<span class="number">2</span> <span class="keyword">using</span> 表连接操作 条件。</span><br><span class="line"></span><br><span class="line"><span class="comment">/* TRUNCATE */</span> <span class="comment">------------------</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> [<span class="keyword">TABLE</span>] tbl_name</span><br><span class="line">清空数据</span><br><span class="line">删除重建表</span><br><span class="line"></span><br><span class="line">区别：</span><br><span class="line"><span class="number">1</span>，<span class="keyword">truncate</span> 是删除表再创建，<span class="keyword">delete</span> 是逐条删除</span><br><span class="line"><span class="number">2</span>，<span class="keyword">truncate</span> 重置auto_increment的值。而<span class="keyword">delete</span>不会</span><br><span class="line"><span class="number">3</span>，<span class="keyword">truncate</span> 不知道删除了几条，而<span class="keyword">delete</span>知道。</span><br><span class="line"><span class="number">4</span>，当被用于带分区的表时，<span class="keyword">truncate</span> 会保留分区</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 备份与还原 */</span> <span class="comment">------------------</span></span><br><span class="line">备份，将数据的结构与表内数据保存起来。</span><br><span class="line">利用 mysqldump 指令完成。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出</span></span><br><span class="line">mysqldump [options] db_name [<span class="keyword">tables</span>]</span><br><span class="line">mysqldump [options] <span class="comment">---database DB1 [DB2 DB3...]</span></span><br><span class="line">mysqldump [options] <span class="comment">--all--database</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 导出一张表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)</span><br><span class="line"><span class="number">2.</span> 导出多张表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表<span class="number">1</span> 表<span class="number">2</span> 表<span class="number">3</span> &gt; 文件名(D:/a.sql)</span><br><span class="line"><span class="number">3.</span> 导出所有表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.sql)</span><br><span class="line"><span class="number">4.</span> 导出一个库</span><br><span class="line">　　mysqldump -u用户名 -p密码 <span class="comment">--lock-all-tables --database 库名 &gt; 文件名(D:/a.sql)</span></span><br><span class="line"></span><br><span class="line">可以-w携带<span class="keyword">WHERE</span>条件</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导入</span></span><br><span class="line"><span class="number">1.</span> 在登录mysql的情况下：</span><br><span class="line">　　<span class="keyword">source</span>  备份文件</span><br><span class="line"><span class="number">2.</span> 在不登录的情况下</span><br><span class="line">　　mysql -u用户名 -p密码 库名 &lt; 备份文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 视图 */</span> <span class="comment">------------------</span></span><br><span class="line">什么是视图：</span><br><span class="line">    视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。</span><br><span class="line">    视图具有表结构文件，但不存在数据文件。</span><br><span class="line">    对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。</span><br><span class="line">    视图是存储在数据库中的查询的<span class="keyword">sql</span>语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建视图</span></span><br><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> <span class="keyword">REPLACE</span>] [ALGORITHM = &#123;UNDEFINED | <span class="keyword">MERGE</span> | TEMPTABLE&#125;] <span class="keyword">VIEW</span> view_name [(column_list)] <span class="keyword">AS</span> select_statement</span><br><span class="line">    - 视图名必须唯一，同时不能与表重名。</span><br><span class="line">    - 视图可以使用<span class="keyword">select</span>语句查询到的列名，也可以自己指定相应的列名。</span><br><span class="line">    - 可以指定视图执行的算法，通过ALGORITHM指定。</span><br><span class="line">    - column_list如果存在，则数目必须等于<span class="keyword">SELECT</span>语句检索的列数</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看结构</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_name</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除视图</span></span><br><span class="line">    - 删除视图后，数据依然存在。</span><br><span class="line">    - 可同时删除多个视图。</span><br><span class="line">    <span class="keyword">DROP</span> <span class="keyword">VIEW</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] view_name ...</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改视图结构</span></span><br><span class="line">    - 一般不修改视图，因为不是所有的更新视图都会映射到表上。</span><br><span class="line">    <span class="keyword">ALTER</span> <span class="keyword">VIEW</span> view_name [(column_list)] <span class="keyword">AS</span> select_statement</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 视图作用</span></span><br><span class="line">    <span class="number">1.</span> 简化业务逻辑</span><br><span class="line">    <span class="number">2.</span> 对客户端隐藏真实的表结构</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 视图算法(ALGORITHM)</span></span><br><span class="line">    <span class="keyword">MERGE</span>       合并</span><br><span class="line">        将视图的查询语句，与外部查询需要先合并再执行！</span><br><span class="line">    TEMPTABLE   临时表</span><br><span class="line">        将视图执行完毕后，形成临时表，再做外层查询！</span><br><span class="line">    UNDEFINED   未定义(默认)，指的是MySQL自主去选择相应的算法。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务(transaction) */</span> <span class="comment">------------------</span></span><br><span class="line">事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。</span><br><span class="line">    - 支持连续<span class="keyword">SQL</span>的集体成功或集体撤销。</span><br><span class="line">    - 事务是数据库在数据晚自习方面的一个功能。</span><br><span class="line">    - 需要利用 <span class="keyword">InnoDB</span> 或 BDB 存储引擎，对自动提交的特性支持完成。</span><br><span class="line">    - <span class="keyword">InnoDB</span>被称为事务安全型引擎。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务开启</span></span><br><span class="line">    <span class="keyword">START</span> <span class="keyword">TRANSACTION</span>; 或者 <span class="keyword">BEGIN</span>;</span><br><span class="line">    开启事务后，所有被执行的SQL语句均被认作当前事务内的SQL语句。</span><br><span class="line"><span class="comment">-- 事务提交</span></span><br><span class="line">    <span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 事务回滚</span></span><br><span class="line">    <span class="keyword">ROLLBACK</span>;</span><br><span class="line">    如果部分操作发生问题，映射到事务开启前。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务的特性</span></span><br><span class="line">    1. 原子性（Atomicity）</span><br><span class="line">        事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</span><br><span class="line">    2. 一致性（Consistency）</span><br><span class="line">        事务前后数据的完整性必须保持一致。</span><br><span class="line">        - 事务开始和结束时，外部数据一致</span><br><span class="line">        - 在整个事务过程中，操作是连续的</span><br><span class="line">    3. 隔离性（Isolation）</span><br><span class="line">        多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。</span><br><span class="line">    4. 持久性（Durability）</span><br><span class="line">        一个事务一旦被提交，它对数据库中的数据改变就是永久性的。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务的实现</span></span><br><span class="line">    1. 要求是事务支持的表类型</span><br><span class="line">    2. 执行一组相关的操作前开启事务</span><br><span class="line">    3. 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务的原理</span></span><br><span class="line">    利用InnoDB的自动提交(autocommit)特性完成。</span><br><span class="line">    普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。</span><br><span class="line">    而事务是暂时关闭“自动提交”机制，需要<span class="keyword">commit</span>提交持久化数据操作。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意</span></span><br><span class="line">    <span class="number">1.</span> 数据定义语言（<span class="keyword">DDL</span>）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。</span><br><span class="line">    <span class="number">2.</span> 事务不能被嵌套</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 保存点</span></span><br><span class="line">    <span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 设置一个事务保存点</span></span><br><span class="line">    <span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 回滚到保存点</span></span><br><span class="line">    <span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 删除保存点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- InnoDB自动提交特性设置</span></span><br><span class="line">    <span class="keyword">SET</span> autocommit = <span class="number">0</span>|<span class="number">1</span>;   0表示关闭自动提交，1表示开启自动提交。</span><br><span class="line">    - 如果关闭了，那普通操作的结果对其他客户端也不可见，需要<span class="keyword">commit</span>提交后才能持久化数据操作。</span><br><span class="line">    - 也可以关闭自动提交来开启事务。但与<span class="keyword">START</span> <span class="keyword">TRANSACTION</span>不同的是，</span><br><span class="line">        <span class="keyword">SET</span> autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接)</span><br><span class="line">        而<span class="keyword">START</span> <span class="keyword">TRANSACTION</span>记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 锁表 */</span></span><br><span class="line">表锁定只用于防止其它客户端进行不正当地读取和写入</span><br><span class="line">MyISAM 支持表锁，<span class="keyword">InnoDB</span> 支持行锁</span><br><span class="line"><span class="comment">-- 锁定</span></span><br><span class="line">    <span class="keyword">LOCK</span> <span class="keyword">TABLES</span> tbl_name [<span class="keyword">AS</span> <span class="keyword">alias</span>]</span><br><span class="line"><span class="comment">-- 解锁</span></span><br><span class="line">    <span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 触发器 */</span> <span class="comment">------------------</span></span><br><span class="line">    触发程序是与表有关的命名数据库对象，当该表出现特定事件时，将激活该对象</span><br><span class="line">    监听：记录的增加、修改、删除。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建触发器</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name trigger_time trigger_event <span class="keyword">ON</span> tbl_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> trigger_stmt</span><br><span class="line">    参数：</span><br><span class="line">    trigger_time是触发程序的动作时间。它可以是 <span class="keyword">before</span> 或 <span class="keyword">after</span>，以指明触发程序是在激活它的语句之前或之后触发。</span><br><span class="line">    trigger_event指明了激活触发程序的语句的类型</span><br><span class="line">        <span class="keyword">INSERT</span>：将新行插入表时激活触发程序</span><br><span class="line">        <span class="keyword">UPDATE</span>：更改某一行时激活触发程序</span><br><span class="line">        <span class="keyword">DELETE</span>：从表中删除某一行时激活触发程序</span><br><span class="line">    tbl_name：监听的表，必须是永久性的表，不能将触发程序与<span class="keyword">TEMPORARY</span>表或视图关联起来。</span><br><span class="line">    trigger_stmt：当触发程序激活时执行的语句。执行多个语句，可使用BEGIN...END复合语句结构</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> [schema_name.]trigger_name</span><br><span class="line"></span><br><span class="line">可以使用<span class="keyword">old</span>和<span class="keyword">new</span>代替旧的和新的数据</span><br><span class="line">    更新操作，更新前是<span class="keyword">old</span>，更新后是new.</span><br><span class="line">    删除操作，只有old.</span><br><span class="line">    增加操作，只有new.</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意</span></span><br><span class="line">    <span class="number">1.</span> 对于具有相同触发程序动作时间和事件的给定表，不能有两个触发程序。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符连接函数</span></span><br><span class="line"><span class="keyword">concat</span>(str1,str2,...])</span><br><span class="line"><span class="keyword">concat_ws</span>(separator,str1,str2,...)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分支语句</span></span><br><span class="line"><span class="keyword">if</span> 条件 <span class="keyword">then</span></span><br><span class="line">    执行语句</span><br><span class="line">elseif 条件 <span class="keyword">then</span></span><br><span class="line">    执行语句</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    执行语句</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改最外层语句结束符</span></span><br><span class="line">delimiter 自定义结束符号</span><br><span class="line">    SQL语句</span><br><span class="line">自定义结束符号</span><br><span class="line"></span><br><span class="line">delimiter ;     <span class="comment">-- 修改回原来的分号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 语句块包裹</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    语句块</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 特殊的执行</span></span><br><span class="line"><span class="number">1.</span> 只要添加记录，就会触发程序。</span><br><span class="line"><span class="number">2.</span> <span class="keyword">Insert</span> <span class="keyword">into</span> <span class="keyword">on</span> <span class="keyword">duplicate</span> <span class="keyword">key</span> <span class="keyword">update</span> 语法会触发：</span><br><span class="line">    如果没有重复记录，会触发 <span class="keyword">before</span> <span class="keyword">insert</span>, <span class="keyword">after</span> <span class="keyword">insert</span>;</span><br><span class="line">    如果有重复记录并更新，会触发 before <span class="keyword">insert</span>, <span class="keyword">before</span> <span class="keyword">update</span>, <span class="keyword">after</span> <span class="keyword">update</span>;</span><br><span class="line">    如果有重复记录但是没有发生更新，则触发 before <span class="keyword">insert</span>, <span class="keyword">before</span> <span class="keyword">update</span></span><br><span class="line"><span class="number">3.</span> <span class="keyword">Replace</span> 语法 如果有记录，则执行 <span class="keyword">before</span> <span class="keyword">insert</span>, <span class="keyword">before</span> <span class="keyword">delete</span>, <span class="keyword">after</span> <span class="keyword">delete</span>, <span class="keyword">after</span> <span class="keyword">insert</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* SQL编程 */</span> <span class="comment">------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--// 局部变量 ----------</span></span><br><span class="line"><span class="comment">-- 变量声明</span></span><br><span class="line">    <span class="keyword">declare</span> var_name[,...] <span class="keyword">type</span> [<span class="keyword">default</span> <span class="keyword">value</span>]</span><br><span class="line">    这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个<span class="keyword">default</span>子句。值可以被指定为一个表达式，不需要为一个常数。如果没有<span class="keyword">default</span>子句，初始值为<span class="literal">null</span>。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 赋值</span></span><br><span class="line">    使用 <span class="keyword">set</span> 和 <span class="keyword">select</span> <span class="keyword">into</span> 语句为变量赋值。</span><br><span class="line"></span><br><span class="line">    - 注意：在函数内是可以使用全局变量（用户自定义的变量）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--// 全局变量 ----------</span></span><br><span class="line"><span class="comment">-- 定义、赋值</span></span><br><span class="line"><span class="keyword">set</span> 语句可以定义并为变量赋值。</span><br><span class="line"><span class="keyword">set</span> @<span class="keyword">var</span> = <span class="keyword">value</span>;</span><br><span class="line">也可以使用<span class="keyword">select</span> <span class="keyword">into</span>语句为变量初始化并赋值。这样要求<span class="keyword">select</span>语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。</span><br><span class="line">还可以把赋值语句看作一个表达式，通过<span class="keyword">select</span>执行完成。此时为了避免=被当作关系运算符看待，使用:=代替。（<span class="keyword">set</span>语句可以使用= 和 :=）。</span><br><span class="line"><span class="keyword">select</span> @<span class="keyword">var</span>:=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">select</span> @v1:=<span class="keyword">id</span>, @v2=<span class="keyword">name</span> <span class="keyword">from</span> t1 <span class="keyword">limit</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tbl_name <span class="keyword">where</span> @<span class="keyword">var</span>:=<span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">into</span> 可以将表中查询获得的数据赋给变量。</span><br><span class="line">    -| <span class="keyword">select</span> <span class="keyword">max</span>(height) <span class="keyword">into</span> @max_height <span class="keyword">from</span> tb;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 自定义变量名</span></span><br><span class="line">为了避免<span class="keyword">select</span>语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。</span><br><span class="line">@<span class="keyword">var</span>=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    - 变量被定义后，在整个会话周期都有效（登录到退出）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--// 控制结构 ----------</span></span><br><span class="line"><span class="comment">-- if语句</span></span><br><span class="line">if search_condition then</span><br><span class="line">    statement_list   </span><br><span class="line">[elseif search_condition then</span><br><span class="line">    statement_list]</span><br><span class="line">...</span><br><span class="line">[else</span><br><span class="line">    statement_list]</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- case语句</span></span><br><span class="line">CASE value WHEN [compare-value] THEN result</span><br><span class="line">[WHEN [compare-value] THEN result ...]</span><br><span class="line">[ELSE result]</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- while循环</span></span><br><span class="line">[begin_label:] <span class="keyword">while</span> search_condition <span class="keyword">do</span></span><br><span class="line">    statement_list</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">while</span> [end_label];</span><br><span class="line"></span><br><span class="line">- 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 退出循环</span></span><br><span class="line">        退出整个循环 leave</span><br><span class="line">        退出当前循环 iterate</span><br><span class="line">        通过退出的标签决定退出哪个循环</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--// 内置函数 ----------</span></span><br><span class="line"><span class="comment">-- 数值函数</span></span><br><span class="line">abs(x)          <span class="comment">-- 绝对值 abs(-10.9) = 10</span></span><br><span class="line">format(x, d)    <span class="comment">-- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46</span></span><br><span class="line">ceil(x)         <span class="comment">-- 向上取整 ceil(10.1) = 11</span></span><br><span class="line">floor(x)        <span class="comment">-- 向下取整 floor (10.1) = 10</span></span><br><span class="line">round(x)        <span class="comment">-- 四舍五入去整</span></span><br><span class="line">mod(m, n)       <span class="comment">-- m%n m mod n 求余 10%3=1</span></span><br><span class="line">pi()            <span class="comment">-- 获得圆周率</span></span><br><span class="line">pow(m, n)       <span class="comment">-- m^n</span></span><br><span class="line">sqrt(x)         <span class="comment">-- 算术平方根</span></span><br><span class="line">rand()          <span class="comment">-- 随机数</span></span><br><span class="line"><span class="keyword">truncate</span>(x, d)  <span class="comment">-- 截取d位小数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 时间日期函数</span></span><br><span class="line"><span class="keyword">now</span>(), <span class="keyword">current_timestamp</span>();     <span class="comment">-- 当前日期时间</span></span><br><span class="line">current_date();                 <span class="comment">-- 当前日期</span></span><br><span class="line">current_time();                 <span class="comment">-- 当前时间</span></span><br><span class="line">date('yyyy-mm-dd hh:ii:ss');    <span class="comment">-- 获取日期部分</span></span><br><span class="line">time('yyyy-mm-dd hh:ii:ss');    <span class="comment">-- 获取时间部分</span></span><br><span class="line">date_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j'); <span class="comment">-- 格式化时间</span></span><br><span class="line">unix_timestamp();               <span class="comment">-- 获得unix时间戳</span></span><br><span class="line">from_unixtime();                <span class="comment">-- 从时间戳获得时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串函数</span></span><br><span class="line">length(string)          <span class="comment">-- string长度，字节</span></span><br><span class="line">char_length(string)     <span class="comment">-- string的字符个数</span></span><br><span class="line">substring(str, position [,length])      <span class="comment">-- 从str的position开始,取length个字符</span></span><br><span class="line"><span class="keyword">replace</span>(<span class="keyword">str</span> ,search_str ,replace_str)   <span class="comment">-- 在str中用replace_str替换search_str</span></span><br><span class="line"><span class="keyword">instr</span>(<span class="keyword">string</span> ,<span class="keyword">substring</span>)    <span class="comment">-- 返回substring首次在string中出现的位置</span></span><br><span class="line"><span class="keyword">concat</span>(<span class="keyword">string</span> [,...])   <span class="comment">-- 连接字串</span></span><br><span class="line"><span class="keyword">charset</span>(<span class="keyword">str</span>)            <span class="comment">-- 返回字串字符集</span></span><br><span class="line"><span class="keyword">lcase</span>(<span class="keyword">string</span>)           <span class="comment">-- 转换成小写</span></span><br><span class="line"><span class="keyword">left</span>(<span class="keyword">string</span>, <span class="keyword">length</span>)    <span class="comment">-- 从string2中的左边起取length个字符</span></span><br><span class="line"><span class="keyword">load_file</span>(file_name)    <span class="comment">-- 从文件读取内容</span></span><br><span class="line"><span class="keyword">locate</span>(<span class="keyword">substring</span>, <span class="keyword">string</span> [,start_position]) <span class="comment">-- 同instr,但可指定开始位置</span></span><br><span class="line"><span class="keyword">lpad</span>(<span class="keyword">string</span>, <span class="keyword">length</span>, <span class="keyword">pad</span>)   <span class="comment">-- 重复用pad加在string开头,直到字串长度为length</span></span><br><span class="line"><span class="keyword">ltrim</span>(<span class="keyword">string</span>)           <span class="comment">-- 去除前端空格</span></span><br><span class="line"><span class="keyword">repeat</span>(<span class="keyword">string</span>, <span class="keyword">count</span>)   <span class="comment">-- 重复count次</span></span><br><span class="line">rpad(<span class="keyword">string</span>, <span class="keyword">length</span>, <span class="keyword">pad</span>)   <span class="comment">--在str后用pad补充,直到长度为length</span></span><br><span class="line"><span class="keyword">rtrim</span>(<span class="keyword">string</span>)           <span class="comment">-- 去除后端空格</span></span><br><span class="line"><span class="keyword">strcmp</span>(string1 ,string2)    <span class="comment">-- 逐字符比较两字串大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 流程函数</span></span><br><span class="line"><span class="keyword">case</span> <span class="keyword">when</span> [condition] <span class="keyword">then</span> <span class="keyword">result</span> [<span class="keyword">when</span> [condition] <span class="keyword">then</span> <span class="keyword">result</span> ...] [<span class="keyword">else</span> <span class="keyword">result</span>] <span class="keyword">end</span>   多分支</span><br><span class="line"><span class="keyword">if</span>(expr1,expr2,expr3)  双分支。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 聚合函数</span></span><br><span class="line"><span class="keyword">count</span>()</span><br><span class="line"><span class="keyword">sum</span>();</span><br><span class="line">max();</span><br><span class="line">min();</span><br><span class="line">avg();</span><br><span class="line">group_concat()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 其他常用函数</span></span><br><span class="line">md5();</span><br><span class="line">default();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--// 存储函数，自定义函数 ----------</span></span><br><span class="line"><span class="comment">-- 新建</span></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> function_name (参数列表) <span class="keyword">RETURNS</span> 返回值类型</span><br><span class="line">        函数体</span><br><span class="line"></span><br><span class="line">    - 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。</span><br><span class="line">    - 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。</span><br><span class="line">    - 参数部分，由<span class="string">"参数名"</span>和<span class="string">"参数类型"</span>组成。多个参数用逗号隔开。</span><br><span class="line">    - 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。</span><br><span class="line">    - 多条语句应该使用 begin...end 语句块包含。</span><br><span class="line">    - 一定要有 <span class="keyword">return</span> 返回值语句。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line">    <span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] function_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">FUNCTION</span> <span class="keyword">STATUS</span> <span class="keyword">LIKE</span> <span class="string">'partten'</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> function_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改</span></span><br><span class="line">    <span class="keyword">ALTER</span> <span class="keyword">FUNCTION</span> function_name 函数选项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--// 存储过程，自定义功能 ----------</span></span><br><span class="line"><span class="comment">-- 定义</span></span><br><span class="line">存储存储过程 是一段代码（过程），存储在数据库中的<span class="keyword">sql</span>组成。</span><br><span class="line">一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。</span><br><span class="line">而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过<span class="keyword">call</span>执行。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sp_name (参数列表)</span><br><span class="line">    过程体</span><br><span class="line"></span><br><span class="line">参数列表：不同于函数的参数列表，需要指明参数类型</span><br><span class="line"><span class="keyword">IN</span>，表示输入型</span><br><span class="line"><span class="keyword">OUT</span>，表示输出型</span><br><span class="line">INOUT，表示混合型</span><br><span class="line"></span><br><span class="line">注意，没有返回值。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 存储过程 */</span> <span class="comment">------------------</span></span><br><span class="line">存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。</span><br><span class="line">调用：<span class="keyword">CALL</span> 过程名</span><br><span class="line"><span class="comment">-- 注意</span></span><br><span class="line">- 没有返回值。</span><br><span class="line">- 只能单独调用，不可夹杂在其他语句中</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 参数</span></span><br><span class="line"><span class="keyword">IN</span>|<span class="keyword">OUT</span>|INOUT 参数名 数据类型</span><br><span class="line"><span class="keyword">IN</span>      输入：在调用过程中，将数据输入到过程体内部的参数</span><br><span class="line"><span class="keyword">OUT</span>     输出：在调用过程中，将过程体处理完的结果返回到客户端</span><br><span class="line">INOUT   输入输出：既可输入，也可输出</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 过程名 (参数列表)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    过程体</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 用户和权限管理 */</span> <span class="comment">------------------</span></span><br><span class="line"><span class="comment">-- root密码重置</span></span><br><span class="line"><span class="number">1.</span> 停止MySQL服务</span><br><span class="line"><span class="number">2.</span>  [Linux] /usr/<span class="keyword">local</span>/mysql/<span class="keyword">bin</span>/safe_mysqld <span class="comment">--skip-grant-tables &amp;</span></span><br><span class="line">    [Windows] mysqld <span class="comment">--skip-grant-tables</span></span><br><span class="line"><span class="number">3.</span> <span class="keyword">use</span> mysql;</span><br><span class="line">4. <span class="keyword">UPDATE</span> <span class="string">`user`</span> <span class="keyword">SET</span> <span class="keyword">PASSWORD</span>=<span class="keyword">PASSWORD</span>(<span class="string">"密码"</span>) <span class="keyword">WHERE</span> <span class="string">`user`</span> = <span class="string">"root"</span>;</span><br><span class="line">5. <span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br><span class="line"></span><br><span class="line">用户信息表：mysql.user</span><br><span class="line"><span class="comment">-- 刷新权限</span></span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br><span class="line"><span class="comment">-- 增加用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> 用户名 <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> [<span class="keyword">PASSWORD</span>] 密码(字符串)</span><br><span class="line">    - 必须拥有mysql数据库的全局<span class="keyword">CREATE</span> <span class="keyword">USER</span>权限，或拥有<span class="keyword">INSERT</span>权限。</span><br><span class="line">    - 只能创建用户，不能赋予权限。</span><br><span class="line">    - 用户名，注意引号：如 <span class="string">'user_name'</span>@<span class="string">'192.168.1.1'</span></span><br><span class="line">    - 密码也需引号，纯数字密码也要加引号</span><br><span class="line">    - 要在纯文本中指定密码，需忽略<span class="keyword">PASSWORD</span>关键词。要把密码指定为由<span class="keyword">PASSWORD</span>()函数返回的混编值，需包含关键字<span class="keyword">PASSWORD</span></span><br><span class="line"><span class="comment">-- 重命名用户</span></span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">USER</span> old_user <span class="keyword">TO</span> new_user</span><br><span class="line"><span class="comment">-- 设置密码</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> = <span class="keyword">PASSWORD</span>(<span class="string">'密码'</span>)  <span class="comment">-- 为当前用户设置密码</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> 用户名 = <span class="keyword">PASSWORD</span>(<span class="string">'密码'</span>) <span class="comment">-- 为指定用户设置密码</span></span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> 用户名</span><br><span class="line"><span class="comment">-- 分配权限/添加用户</span></span><br><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 表名 <span class="keyword">TO</span> 用户名 [<span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> [<span class="keyword">PASSWORD</span>] <span class="string">'password'</span>]</span><br><span class="line">    - <span class="keyword">all</span> <span class="keyword">privileges</span> 表示所有权限</span><br><span class="line">    - *.* 表示所有库的所有表</span><br><span class="line">    - 库名.表名 表示某库下面的某表</span><br><span class="line">    <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> <span class="string">`pms`</span>.* <span class="keyword">TO</span> <span class="string">'pms'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'pms0817'</span>;</span><br><span class="line"><span class="comment">-- 查看权限</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> 用户名</span><br><span class="line">    <span class="comment">-- 查看当前用户权限</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">GRANTS</span>; 或 <span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> <span class="keyword">CURRENT_USER</span>; 或 <span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> <span class="keyword">CURRENT_USER</span>();</span><br><span class="line"><span class="comment">-- 撤消权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 表名 <span class="keyword">FROM</span> 用户名</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span>, <span class="keyword">GRANT</span> <span class="keyword">OPTION</span> <span class="keyword">FROM</span> 用户名   <span class="comment">-- 撤销所有权限</span></span><br><span class="line"><span class="comment">-- 权限层级</span></span><br><span class="line"><span class="comment">-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。</span></span><br><span class="line">全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.user</span><br><span class="line">    <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.*和 <span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.*只授予和撤销全局权限。</span><br><span class="line">数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host</span><br><span class="line">    <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> db_name.*和<span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> db_name.*只授予和撤销数据库权限。</span><br><span class="line">表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv</span><br><span class="line">    <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> db_name.tbl_name和<span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> db_name.tbl_name只授予和撤销表权限。</span><br><span class="line">列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv</span><br><span class="line">    当使用<span class="keyword">REVOKE</span>时，您必须指定与被授权列相同的列。</span><br><span class="line"><span class="comment">-- 权限列表</span></span><br><span class="line"><span class="keyword">ALL</span> [<span class="keyword">PRIVILEGES</span>]    <span class="comment">-- 设置除GRANT OPTION之外的所有简单权限</span></span><br><span class="line"><span class="keyword">ALTER</span>   <span class="comment">-- 允许使用ALTER TABLE</span></span><br><span class="line"><span class="keyword">ALTER</span> ROUTINE   <span class="comment">-- 更改或取消已存储的子程序</span></span><br><span class="line"><span class="keyword">CREATE</span>  <span class="comment">-- 允许使用CREATE TABLE</span></span><br><span class="line"><span class="keyword">CREATE</span> ROUTINE  <span class="comment">-- 创建已存储的子程序</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLES</span>     <span class="comment">-- 允许使用CREATE TEMPORARY TABLE</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span>     <span class="comment">-- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span>     <span class="comment">-- 允许使用CREATE VIEW</span></span><br><span class="line"><span class="keyword">DELETE</span>  <span class="comment">-- 允许使用DELETE</span></span><br><span class="line"><span class="keyword">DROP</span>    <span class="comment">-- 允许使用DROP TABLE</span></span><br><span class="line"><span class="keyword">EXECUTE</span>     <span class="comment">-- 允许用户运行已存储的子程序</span></span><br><span class="line"><span class="keyword">FILE</span>    <span class="comment">-- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE</span></span><br><span class="line"><span class="keyword">INDEX</span>   <span class="comment">-- 允许使用CREATE INDEX和DROP INDEX</span></span><br><span class="line"><span class="keyword">INSERT</span>  <span class="comment">-- 允许使用INSERT</span></span><br><span class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLES</span>     <span class="comment">-- 允许对您拥有SELECT权限的表使用LOCK TABLES</span></span><br><span class="line">PROCESS     <span class="comment">-- 允许使用SHOW FULL PROCESSLIST</span></span><br><span class="line"><span class="keyword">REFERENCES</span>  <span class="comment">-- 未被实施</span></span><br><span class="line">RELOAD  <span class="comment">-- 允许使用FLUSH</span></span><br><span class="line"><span class="keyword">REPLICATION</span> <span class="keyword">CLIENT</span>  <span class="comment">-- 允许用户询问从属服务器或主服务器的地址</span></span><br><span class="line"><span class="keyword">REPLICATION</span> <span class="keyword">SLAVE</span>   <span class="comment">-- 用于复制型从属服务器（从主服务器中读取二进制日志事件）</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="comment">-- 允许使用SELECT</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>  <span class="comment">-- 显示所有数据库</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VIEW</span>   <span class="comment">-- 允许使用SHOW CREATE VIEW</span></span><br><span class="line"><span class="keyword">SHUTDOWN</span>    <span class="comment">-- 允许使用mysqladmin shutdown</span></span><br><span class="line">SUPER   <span class="comment">-- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。</span></span><br><span class="line"><span class="keyword">UPDATE</span>  <span class="comment">-- 允许使用UPDATE</span></span><br><span class="line"><span class="keyword">USAGE</span>   <span class="comment">-- “无权限”的同义词</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">OPTION</span>    <span class="comment">-- 允许授予权限</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 表维护 */</span></span><br><span class="line"><span class="comment">-- 分析和存储表的关键字分布</span></span><br><span class="line"><span class="keyword">ANALYZE</span> [<span class="keyword">LOCAL</span> | <span class="keyword">NO_WRITE_TO_BINLOG</span>] <span class="keyword">TABLE</span> 表名 ...</span><br><span class="line"><span class="comment">-- 检查一个或多个表是否有错误</span></span><br><span class="line"><span class="keyword">CHECK</span> <span class="keyword">TABLE</span> tbl_name [, tbl_name] ... [<span class="keyword">option</span>] ...</span><br><span class="line"><span class="keyword">option</span> = &#123;<span class="keyword">QUICK</span> | <span class="keyword">FAST</span> | <span class="keyword">MEDIUM</span> | <span class="keyword">EXTENDED</span> | <span class="keyword">CHANGED</span>&#125;</span><br><span class="line"><span class="comment">-- 整理数据文件的碎片</span></span><br><span class="line"><span class="keyword">OPTIMIZE</span> [<span class="keyword">LOCAL</span> | <span class="keyword">NO_WRITE_TO_BINLOG</span>] <span class="keyword">TABLE</span> tbl_name [, tbl_name] ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 杂项 */</span> <span class="comment">------------------</span></span><br><span class="line"><span class="number">1.</span> 可用反引号（<span class="string">`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！</span></span><br><span class="line"><span class="string">2. 每个库目录存在一个保存当前数据库的选项文件db.opt。</span></span><br><span class="line"><span class="string">3. 注释：</span></span><br><span class="line"><span class="string">    单行注释 # 注释内容</span></span><br><span class="line"><span class="string">    多行注释 /* 注释内容 */</span></span><br><span class="line"><span class="string">    单行注释 -- 注释内容     (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)</span></span><br><span class="line"><span class="string">4. 模式通配符：</span></span><br><span class="line"><span class="string">    _   任意单个字符</span></span><br><span class="line"><span class="string">    %   任意多个字符，甚至包括零字符</span></span><br><span class="line"><span class="string">    单引号需要进行转义 \'</span></span><br><span class="line"><span class="string">5. CMD命令行内的语句结束符可以为 ";", "\G", "\g"，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。</span></span><br><span class="line"><span class="string">6. SQL对大小写不敏感</span></span><br><span class="line"><span class="string">7. 清除已有语句：\c</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM调优</title>
      <link href="/posts/1653795f/"/>
      <url>/posts/1653795f/</url>
      
        <content type="html"><![CDATA[<h2 id="JVM内存结构"><a href="#JVM内存结构" class="headerlink" title="JVM内存结构"></a>JVM内存结构</h2><p><img src="https://cdn.jsdelivr.net/gh/hjwjw/hjwjw.github.io@resource/img/20200216215254.png" alt="JVM内存结构" style="zoom:50%;"></p><p>每启动一个线程，JVM就会在栈空间栈分配对应的 <strong>线程栈</strong>, 比如 1MB 的空间（<code>-Xss1m</code>）。</p><p>线程栈也叫做Java方法栈。 如果使用了JNI方法，则会分配一个单独的本地方法栈(Native Stack).</p><p>线程执行过程中，一般会有多个方法组成调用栈(Stack Trace), 比如A调用B，B调用C。。。每执行到一个方法，就会创建对应的 <strong>栈帧</strong>(Frame).</p><p><img src="https://cdn.jsdelivr.net/gh/hjwjw/hjwjw.github.io@resource/img/20200216215503.png" alt="线程栈" style="zoom:50%;"></p><p>栈帧只是一个逻辑上的概念，具体的大小，在一个方法编写完成后基本上就能确定。</p><p>比如返回值需要有一个空间存放吧，每个局部变量都需要对应的地址空间，此外还有操作数栈，以及方法指针(标识这个栈帧对应的是哪个类的哪个方法,指向常量池中的字符串常量）。</p><p>Java程序除了栈内存之外，最主要内存区域就是堆内存了。</p><p><img src="https://cdn.jsdelivr.net/gh/hjwjw/hjwjw.github.io@resource/img/20200216215627.png" alt="堆内存" style="zoom:50%;"></p><p>堆内存是所有线程共用的内存空间，理论上大家都可以访问里面的内容。</p><p>但JVM的具体实现一般会有各种优化。</p><p>比如将逻辑上的Java堆,划分为堆(Heap)和非堆(Non-Heap)两个部分. 这种划分的依据在于，我们编写的Java代码，基本上只能使用Heap这部分空间，发生内存分配和回收的主要区域也在这部分，所以有一种说法，这里的Heap也叫GC管理的堆(GC Heap)。</p><p>GC理论中有一个重要的思想，叫做分代。 经过研究发现，程序中分配的对象，要么用过就扔，要么就能存活很久很久。</p><p>JVM将Heap内存分为年轻代（Young generation）和老年代（Old generation, 也叫 Tenured）两部分。</p><p>年轻代还划分为3个内存池，新生代(Eden space)和存活区(Survivor space), 存活区在大部分GC算法中有2个(S0, S1)，S0和S1总有一个是空的,但一般较小，也不浪费多少空间。</p><p>具体实现对新生代还有优化，那就是TLAB(Thread Local Allocation Buffer), 给每个线程先划定一小片空间，你创建的对象先在这里分配，满了再换。这能极大降低并发资源锁定的开销。</p><p>Non-Heap本质上还是Heap，只是一般不归GC管理，里面划分为3个内存池。</p><ul><li>Metaspace, 以前叫持久代(永久代, Permanent generation), Java8换了个名字叫 Metaspace. Java8将方法区移动到了Meta区里面，而方法又是class的一部分。。。和CCS交叉了?</li><li>CCS, Compressed Class Space, 存放class信息的，和 Metaspace 有交叉。</li><li>Code Cache, 存放 JIT 编译器编译后的本地机器代码。</li></ul><p>JVM的内存结构大致如此。</p><p>以上来源自：<a href="https://github.com/cncounter/translation/blob/master/tiemao_2019/22_chat_jvm_troubleshoot/README.md" target="_blank" rel="noopener">https://github.com/cncounter/translation/blob/master/tiemao_2019/22_chat_jvm_troubleshoot/README.md</a></p><h2 id="基础工具"><a href="#基础工具" class="headerlink" title="基础工具"></a>基础工具</h2><h3 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h3><p>全称 Java Virtual Machine Process Status Too 。列出目标系统上已检测到的Java虚拟机（JVM）</p><p>如没有指定远程主机，则显示当前主机当前用户下的Java应用的PID与标识符</p><p><strong>概要</strong></p><p>jps    [参数] [hostid]</p><p><strong>参数</strong></p><p>-q    不输出类名、Jar名和传入main方法的参数 </p><p>-m    输出传入main方法的参数</p><p>-l    显示应用程序<code>main</code>类的完整程序包名称或应用程序JAR文件的完整路径名</p><p>-v    显示传递给JVM的参数</p><p><strong>示例</strong></p><p>在本地启动了一个register服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  hsrm-register git:(master) jps -l</span><br><span class="line">19334 org.jetbrains.jps.cmdline.Launcher</span><br><span class="line">19335 org.hsrm.register.RegisterApplication</span><br><span class="line">19304 org.jetbrains.idea.maven.server.RemoteMavenServer36</span><br><span class="line">537 nutstore.client.gui.NutstoreGUI</span><br><span class="line">19658 sun.tools.jps.Jps</span><br></pre></td></tr></table></figure><h3 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h3><p>打印Java进程，核心文件或远程调试服务器的Java线程堆栈跟踪。根据堆栈信息可以帮助我们定位到具体的代码</p><p><strong>概要</strong></p><p>jstack [参数] <pid></pid></p><p><strong>pid</strong></p><p>​    为其打印堆栈跟踪的进程ID。该进程必须是Java进程。要获取机器上运行的Java进程的列表，请使用jps</p><p><strong>参数</strong></p><p>-F    当<code>jstack</code>[ <code>-l</code>] <code>pid</code>没有响应时，强制进行堆栈转储</p><p>-l     打印有关锁的其他信息</p><p>-m    不仅会输出Java堆栈信息，还会输出C/C++堆栈信息（比如Native方法</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无法创建本地线程分析</title>
      <link href="/posts/b161c9c2/"/>
      <url>/posts/b161c9c2/</url>
      
        <content type="html"><![CDATA[<p>最近项目的系统突然出现崩溃，无法响应请求。使用运维账号登陆服务器也无法登陆，提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fork: retry: No child processes </span><br><span class="line">fork: Resource temporarily unavailable</span><br></pre></td></tr></table></figure><p>通过root账号登陆上去查看应用日志，报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.OutOfMemoryError: unable to create new native thread</span><br></pre></td></tr></table></figure><p>OOM造成无法创建线程。于是先把部分服务停了，运维账号则可正常登陆。</p><h2 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h2><p>由于之前也没有遇到过类似问题，通过网上查找，分析了多种原因，记录如下。</p><p>###应用内存分配过多</p><p>由于该项目是一个微服务构架，总共有近20个微服务，但只用了两台64G内存的服务器做集群，内存确实是很紧张。我统计了所有服务分配的堆内存，即 <code>-Xmx</code> 的值，一共分配了大概45G的样子。因此决定重新分配各微服务的堆内存大小。</p><p>1、将不必要的微服务停止</p><p>2、将不使用量不大的部分服务减少堆内存的分配的大小</p><p>3、将之前分配过大的堆内存减小</p><p>调整之后所有启用的微服务分配的总堆内存大概减小到了32G，之后重启各服务，以为万事大吉了，但过了几天再次出现无法创建线程的问题了。。。</p><h3 id="用户可用线程数限制"><a href="#用户可用线程数限制" class="headerlink" title="用户可用线程数限制"></a>用户可用线程数限制</h3><p>这次怀疑是用户最大的可用线程数受限了，通过 <code>ulimit -u</code> 命令可查询当前用户最大可使用的线程数。经查询运维账号可使用的线程数为 <code>65535</code> 这个数量完全是够用了。</p><p>我们可以通过这个命令统计出某个进程所使用的线程数，所有服务的线程数总合完全没有超过 <code>65536</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps Hh p &lt;pid&gt; | wc -l</span><br></pre></td></tr></table></figure><p>因此可排除这个原因</p><h3 id="线程数过高"><a href="#线程数过高" class="headerlink" title="线程数过高"></a>线程数过高</h3><p>经常上面再次分析没有找到原因，但通过查看各服务线程数，发现某个服务线程数很高，停止或重启该服务，则free内存多了很多，但过几天后随着该服务线程数越来越高，free 内存也越来越少。</p><p>因此决定通过分析该服务线程数过高看能否找出问题。</p><p>1、首先可以通过<code>jps</code>命令查看当前用户下的所有java应用进程，得到各服务的pid</p><p>2、通过 <code>ps Hh p &lt;pid&gt; | wc -l</code> 查询每个pid，找出线程数最多的一个服务</p><p>3、通过<code>top Hp &lt;pid&gt;</code> 可以动态展示该进程下的线程情况。找出最占CPU的线程，记录该线程的pid</p><p><img src="https://cdn.jsdelivr.net/gh/hjwjw/hjwjw.github.io@resource/img/20200216165802.png" alt="某进程下的线程情况" style="zoom:50%;"></p><p>4、通过 <code>printf “%x” &lt;pid&gt;</code>  将上面的线程pid转化为十六进制数</p><p>5、通过Jstack 查找该线程的堆栈信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstack &lt;进程pid&gt; | grep &lt;线程的十六进制数形式&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/hjwjw/hjwjw.github.io@resource/img/20200216170340.png" alt="查询线程堆栈信息" style="zoom:50%;"></p><blockquote><p>jstack -l     表示显示锁信息</p><p>grep -C 5    表示展示上下5行信息</p></blockquote><p>通过对堆栈的分析，我们可能获得一些信息，如该线程是什么状态，被什么锁了等。</p><p>但很遗憾，通过对堆栈分析，我也没有找出具体的问题。</p><h3 id="Linux缓存"><a href="#Linux缓存" class="headerlink" title="Linux缓存"></a>Linux缓存</h3><p>通过使用<code>free -m</code> 命令，发现虽然free内存很少，但buff/cache占用很大</p><p><img src="https://cdn.jsdelivr.net/gh/hjwjw/hjwjw.github.io@resource/img/20200216170854.png" alt="free 情况" style="zoom:50%;"></p><p>按理来说 buff/cache也是空闲内存，如果系统内存不足，应该是会自动清缓存的。很显然系统并没有清除缓存，所有导致系统可用的空闲内存不足。</p><p>首先分析缓存占用大的问题。应用系统中有许多附件需要上传或下载，并且对minio做了群集配置，这可能是造成cache过大的原因。</p><p>1、手动清除缓存</p><p>Linux中可以手动清除缓存，通过 修改<code>/proc/sys/vm/drop_caches</code> 文件来触发。</p><p>这个文件默认值为0</p><p>值为1时：可以释放pagecache缓存</p><p>值为2时：可以释放pagecache和inode缓存</p><p>值为3时：可以释放pagecache, dentries和inodes缓存</p><p>因此，可以通过修改这个文件的值来触发系统清理缓存。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sync#通知系统将缓存及时写入</span><br><span class="line">echo 1 &gt;&gt; /proc/sys/vm/drop_caches</span><br><span class="line">echo 2 &gt;&gt; /proc/sys/vm/drop_caches</span><br><span class="line">echo 3 &gt;&gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure><p>执行完成后再使用 <code>free -m</code>命令，会发现free内存多出来几十G，这下内存暂时是足够了。</p><p>但如果后面缓存继续占用越来越大，这种情况还是有可能发生，因此最终还是需要找出系统为什么不会自动清理缓存的原因才能从根本上解决这个问题。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解结合切面实现键值转换</title>
      <link href="/posts/cd85f6d4/"/>
      <url>/posts/cd85f6d4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不积跬步，无以至千里。不积小流，无以成江海。</p></blockquote><p>通常我们有这种需求，某一个字段是由前台维护的：编码 &lt;==&gt; 含义，类似一个键值对。含义是可能会变化的，但编码是固定的，一般我们都会在数据库中直接存储编码，但数据返回给前台显示时需要展示为含义。当然我们可以在从数据库查询时去join到该值的含义一起返回，这里提供另一种方式来实现这个功能。</p><a id="more"></a><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>主要是使用注解加切面。在数据返回前通过切面把被注解的字段替换成该值的含义。</p><p>这里使用性别字段，键值关系为:</p><p>M - 男</p><p>W - 女</p><h2 id="新建注解"><a href="#新建注解" class="headerlink" title="新建注解"></a>新建注解</h2><p>新建一个注解用于标识字段需要被切面处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SexValue &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建第二个注解，作为一个切点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(value = ElementType.METHOD )</span><br><span class="line"><span class="meta">@Retention</span>(value = RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ProcessResult &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解参数含义：</p><ul><li><p>@interface : 表示定义一个注解</p></li><li><p>@Target 表示该注解可以用于什么地方，可能的ElementType参数有：</p><ul><li>CONSTRUCTOR：构造器的声明</li><li>FIELD：域声明（包括enum实例）</li><li>LOCAL_VARIABLE：局部变量声明</li><li>PACKAGE：包声明</li><li>PARAMETER：参数声明</li><li>TYPE：类、接口（包括注解类型）或enum声明</li></ul></li><li>@Retention  表示需要在什么级别保存该注解信息。可选的RetentionPolicy参数包括：<ul><li>SOURCE：注解将被编译器丢弃</li><li>CLASS：注解在class文件中可用，但会被VM丢弃</li><li>RUNTIME：VM将在运行期间保留注解，因此可以通过反射机制读取注解的信息</li></ul></li><li>@Document 将注解包含在Javadoc中</li><li>@Inherited 允许子类继承父类中的注解</li></ul><h2 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h2><p>实体类如下，在 <code>sex</code> 字段上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SexValue</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phoneNum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createdDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime lastUpdateDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long objectVersionNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createBefore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createdDate = LocalDateTime.now();</span><br><span class="line">        <span class="keyword">this</span>.lastUpdateDate = LocalDateTime.now();</span><br><span class="line">        <span class="keyword">this</span>.objectVersionNumber = <span class="number">1L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBefore</span><span class="params">(Long objectVersionNumber)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastUpdateDate = LocalDateTime.now();</span><br><span class="line">        <span class="keyword">this</span>.objectVersionNumber = objectVersionNumber + <span class="number">1L</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><p>在<code>Controller</code> 中，把需要翻译的方法加上注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/v1/hjwjw/person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IPersonService personService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonController</span><span class="params">(IPersonService personService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.personService = personService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@ProcessResult</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;Person&gt;&gt; query()&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(personService.queryPerson());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ProcessResult</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Person&gt; <span class="title">createPerson</span><span class="params">(@RequestBody Person personVO)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(personService.createPerson(personVO));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="meta">@ProcessResult</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Person&gt; <span class="title">updatePerson</span><span class="params">(@RequestBody Person personVO)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(personService.updatePerson(personVO));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;personId&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">delPerson</span><span class="params">(@PathVariable(<span class="string">"personId"</span>)</span> Long personId)</span>&#123;</span><br><span class="line">        personService.delPerson(personId);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新建切面"><a href="#新建切面" class="headerlink" title="新建切面"></a>新建切面</h2><p>新建一个切面类，在Controller中加了 @ProcessResult 注解的方法，在返回前会进入切面进行处理。</p><p>返回的Object需要判断是否为集合，并把其父类字段都需要遍历查找是否有添加<code>@SexValue</code>注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SexAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SexAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"@annotation(processResult)"</span>,returning = <span class="string">"result"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">aftreReturning</span><span class="params">(JoinPoint joinPoint, ProcessResult processResult,Object result)</span> <span class="keyword">throws</span> IllegalAccessException </span>&#123;</span><br><span class="line">        LOGGER.info(joinPoint.toString());</span><br><span class="line">        LOGGER.info(<span class="string">"&lt;===================Aspect======================&gt;"</span>);</span><br><span class="line">        LOGGER.info(result.toString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result <span class="keyword">instanceof</span> ResponseEntity)&#123;</span><br><span class="line">            Object body = ((ResponseEntity&lt;?&gt;) result).getBody();</span><br><span class="line">            <span class="keyword">if</span> (body == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (body <span class="keyword">instanceof</span> Collection )&#123;</span><br><span class="line">                <span class="keyword">for</span> (Object obj : (Collection&lt;?&gt;) body)&#123;</span><br><span class="line">                    <span class="comment">//处理</span></span><br><span class="line">                    processObj(obj);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//处理</span></span><br><span class="line">                processObj(body);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (result <span class="keyword">instanceof</span> Collection)&#123;</span><br><span class="line">            <span class="comment">//处理</span></span><br><span class="line">            <span class="keyword">for</span> (Object obj : (Collection&lt;?&gt;) result)&#123;</span><br><span class="line">                <span class="comment">//处理</span></span><br><span class="line">                processObj(obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            processObj(result);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processObj</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="comment">//取出Obj所有 Field，以及父类 Field</span></span><br><span class="line">        List&lt;Field&gt; fieldList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Class&lt;?&gt; tempClass  = obj.getClass();</span><br><span class="line">        <span class="keyword">while</span> (tempClass != <span class="keyword">null</span>)&#123;</span><br><span class="line">            fieldList.addAll(Arrays.asList(tempClass.getDeclaredFields()));</span><br><span class="line">            tempClass = tempClass.getSuperclass();</span><br><span class="line">        &#125;</span><br><span class="line">        Field[] fields = <span class="keyword">new</span> Field[fieldList.size()];</span><br><span class="line">        fieldList.toArray(fields);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历Field,查找添加 @SexValue 注解的字段 并 做翻译</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields)&#123;</span><br><span class="line">            <span class="keyword">if</span> (field.isAnnotationPresent(SexValue.class))&#123;</span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                String fieldValue = String.valueOf(field.get(obj));</span><br><span class="line">                LOGGER.info(<span class="string">"fieldValue:&#123;&#125;"</span>,fieldValue);</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"M"</span>.equals(fieldValue))&#123;</span><br><span class="line">                    field.set(obj,<span class="string">"男"</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    field.set(obj,<span class="string">"女"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只是做了简单的值转换。至于如何获取到对应的含义，建议把配置的值集缓存到Redis，这样在切面处理时可以根据编码从 Redis 中直接取出含义进行替换。</p>]]></content>
      
      
      
        <tags>
            
            <tag> annotation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StringUtils工具类split方法对比</title>
      <link href="/posts/89d04356/"/>
      <url>/posts/89d04356/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不积跬步，无以至千里。不积小流，无以成江海。</p></blockquote><p>我们常用的StringUtils工具类org.apache.commons.lang3.StringUtils 与 org.springframework.util.StringUtils</p><p>他们提供的Split方法有差别，导致今天程序出现问题时费了点时间才发现问题。特意写测试对比了两个方法，以免以后再掉坑里。</p><a id="more"></a> <h2 id="实现方式对比"><a href="#实现方式对比" class="headerlink" title="实现方式对比"></a>实现方式对比</h2><p>首先是 <code>org.apache.commons.lang3.StringUtils#split</code> 的实现 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Splits the provided text into an array, separators specified.</span></span><br><span class="line"><span class="comment"> * This is an alternative to using StringTokenizer.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The separator is not included in the returned String array.</span></span><br><span class="line"><span class="comment"> * Adjacent separators are treated as one separator.</span></span><br><span class="line"><span class="comment"> * For more control over the split use the StrTokenizer class.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;A &#123;<span class="doctag">@code</span> null&#125; input String returns &#123;<span class="doctag">@code</span> null&#125;.</span></span><br><span class="line"><span class="comment"> * A &#123;<span class="doctag">@code</span> null&#125; separatorChars splits on whitespace.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * StringUtils.split(null, *)         = null</span></span><br><span class="line"><span class="comment"> * StringUtils.split("", *)           = []</span></span><br><span class="line"><span class="comment"> * StringUtils.split("abc def", null) = ["abc", "def"]</span></span><br><span class="line"><span class="comment"> * StringUtils.split("abc def", " ")  = ["abc", "def"]</span></span><br><span class="line"><span class="comment"> * StringUtils.split("abc  def", " ") = ["abc", "def"]</span></span><br><span class="line"><span class="comment"> * StringUtils.split("ab:cd:ef", ":") = ["ab", "cd", "ef"]</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str  the String to parse, may be null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> separatorChars  the characters used as the delimiters,</span></span><br><span class="line"><span class="comment"> *  &#123;<span class="doctag">@code</span> null&#125; splits on whitespace</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an array of parsed Strings, &#123;<span class="doctag">@code</span> null&#125; if null String input</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] split(<span class="keyword">final</span> String str, <span class="keyword">final</span> String separatorChars) &#123;</span><br><span class="line">    <span class="keyword">return</span> splitWorker(str, separatorChars, -<span class="number">1</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在上面的注释中已经给出了一些示例</p></blockquote><p><code>org.springframework.util.StringUtils#split</code>的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Split a &#123;<span class="doctag">@code</span> String&#125; at the first occurrence of the delimiter.</span></span><br><span class="line"><span class="comment"> * Does not include the delimiter in the result.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> toSplit the string to split (potentially &#123;<span class="doctag">@code</span> null&#125; or empty)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> delimiter to split the string up with (potentially &#123;<span class="doctag">@code</span> null&#125; or empty)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a two element array with index 0 being before the delimiter, and</span></span><br><span class="line"><span class="comment"> * index 1 being after the delimiter (neither element includes the delimiter);</span></span><br><span class="line"><span class="comment"> * or &#123;<span class="doctag">@code</span> null&#125; if the delimiter wasn't found in the given input &#123;<span class="doctag">@code</span> String&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] split(<span class="meta">@Nullable</span> String toSplit, <span class="meta">@Nullable</span> String delimiter) &#123;</span><br><span class="line">   <span class="keyword">if</span> (!hasLength(toSplit) || !hasLength(delimiter)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">int</span> offset = toSplit.indexOf(delimiter);</span><br><span class="line">   <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   String beforeDelimiter = toSplit.substring(<span class="number">0</span>, offset);</span><br><span class="line">   String afterDelimiter = toSplit.substring(offset + delimiter.length());</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123;beforeDelimiter, afterDelimiter&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Check that the given &#123;<span class="doctag">@code</span> String&#125; is neither &#123;<span class="doctag">@code</span> null&#125; nor of length 0.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note: this method returns &#123;<span class="doctag">@code</span> true&#125; for a &#123;<span class="doctag">@code</span> String&#125; that</span></span><br><span class="line"><span class="comment"> * purely consists of whitespace.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str the &#123;<span class="doctag">@code</span> String&#125; to check (may be &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the &#123;<span class="doctag">@code</span> String&#125; is not &#123;<span class="doctag">@code</span> null&#125; and has length</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #hasLength(CharSequence)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #hasText(String)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasLength</span><span class="params">(@Nullable String str)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> (str != <span class="keyword">null</span> &amp;&amp; !str.isEmpty());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试对比"><a href="#测试对比" class="headerlink" title="测试对比"></a>测试对比</h2><p>下面通过跑测试对比如下：</p><table><thead><tr><th>参数1</th><th>参数2</th><th>org.apache.commons.lang3.StringUtils#split</th><th>org.springframework.util.StringUtils#split</th></tr></thead><tbody><tr><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>“1,2”</td><td>“,”</td><td>String[1]={“1,2”}</td><td>null</td></tr><tr><td>null</td><td>“,”</td><td>Null</td><td>null</td></tr><tr><td>“1,2,3”</td><td>“,”</td><td>String[3]={“1”,”2”,”3”}</td><td>String[3]={“1”,”2”,”3”}</td></tr><tr><td>“1,2,3”</td><td>“:”</td><td>String[1]={“1,2,3”}</td><td>null</td></tr><tr><td>“”</td><td>“,”</td><td>String[0]={}</td><td>null</td></tr><tr><td>“1”</td><td>“,”</td><td>String[1]={“1”}</td><td>null</td></tr></tbody></table><p>通过对比，<code>org.apache.commons.lang3.StringUtils#split</code> 优势明显，不会随便就抛出空指针异常，因此今后最好使用 <code>org.apache.commons.lang3.StringUtils#split</code>这个方法，可以避免一些无端的异常。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> StringUtils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8 全新的日期与时间 API</title>
      <link href="/posts/ac5ad770/"/>
      <url>/posts/ac5ad770/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不积跬步，无以至千里。不积小流，无以成江海。</p></blockquote><p>Java8 全新的日期与时间 API </p><p>主要如下： </p><ul><li>LocalDate 表示年月日的日期</li><li>LocalTime 表示时分秒的时间</li><li>LocalDateTime 则包含以上</li><li>Instant 获取秒数<ul><li>Instant.now() 创建对象</li><li>Instant.getEpochSecond() 获取秒数</li><li>Instant.toEpochMilli() 获取毫秒数</li></ul></li></ul><a id="more"></a><h2 id="为什么需要-LocalDateTime"><a href="#为什么需要-LocalDateTime" class="headerlink" title="为什么需要 LocalDateTime"></a>为什么需要 LocalDateTime</h2><ul><li><p>Date 可读性差，我们经常需要使用 SimpleDateFormat 来格式化，使其按我们常用的方式显示。如果不格式化，则显示如下样式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tue sep <span class="number">10</span> <span class="number">09</span>:<span class="number">34</span>:<span class="number">04</span> CST <span class="number">2019</span></span><br></pre></td></tr></table></figure></li><li><p>当我们使用 SimpleDateFormat 的时候，又会出现其它问题。SimpleDateFormat 是线程不安全的。它的实现代码中使用了 calendar 共享变量，并且没有做线程安全控制。在多线程中使用时，会使 calendar.setTime 方法设置的值不准确。</p><ul><li>对于以上问题可以有解决方法：1、每个线程使用时都创建一个 SimpleDateFormat 对象，但这样开销太多。2、对使用 format 与 parse 方法的地方加锁，但导致线程阻塞性能差。3、使用 ThreadLcoal 保证每个线程最多只创建一次 SimpleDateFormat 对象，这种是比较好的方法。</li><li>但总的来说，Date在处理时间上比较麻烦，而且其 getYear,getMonth 等方法已经被弃用了</li></ul></li></ul><h2 id="新-API-特性"><a href="#新-API-特性" class="headerlink" title="新 API 特性"></a>新 API 特性</h2><p>LocalDate、LocalTime、LocalDateTime、Instant 为不可变对象，在修改它们时会返回一个副本。</p><h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><p>可以使用 DateTimeFormatter 进行格式化，其默认提供了一些格式化方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate = LocalDate.of(<span class="number">2019</span>,<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"><span class="comment">//默认格式化方式</span></span><br><span class="line">String s1 = localDate.format(DateTimeFormatter.BASIC_ISO_DATE);</span><br><span class="line">String s2 = localDate.format(DateTimeformatter.ISO_LOCAL_DATE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义格式化</span></span><br><span class="line">DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(<span class="string">"dd/MM/yyyy"</span>);</span><br><span class="line">String s3 = localDate.format(dateTimeFormatter);</span><br></pre></td></tr></table></figure><h3 id="解析时间"><a href="#解析时间" class="headerlink" title="解析时间"></a>解析时间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate1 = LocalDate.parse(<span class="string">"20190910"</span>, DateTimeFormatter.BASIC_ISO_DATE);</span><br><span class="line">LocalDate localDate2 = LocalDate.parse(<span class="string">"2019-09-10"</span>, DateTimeFormatter.ISO_LOCAL_DATE);</span><br></pre></td></tr></table></figure><p>另外，DateTimeFormatter 是线程安全的。</p><h2 id="在-SpringBoot-中的使用"><a href="#在-SpringBoot-中的使用" class="headerlink" title="在 SpringBoot 中的使用"></a>在 SpringBoot 中的使用</h2><ul><li><p>指定日期序列化为时间戳 返回前端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalDateTimeConverter</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">LocalDateTime</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(LocalDateTime value, JsonGenerator gen, SerializerProvider serializers)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  gen.writeNumber(value.toInstant(ZoneOffset.of(<span class="string">"+8"</span>)).toEpochMilli());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在字段上加了如下注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonSerialize</span>(using=LocalDateTimeConverter.class)</span><br></pre></td></tr></table></figure></li><li><p>指定日期时间格式化 返回前端</p><p>在字段上加上如下注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonFormat</span>(shape=JsonFormat.Shape.STRING,pattern=<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br></pre></td></tr></table></figure></li><li><p>指定前端传入的日期进行格式化</p><p>在字段上加如下注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DateTimeFormat</span>(pattern=<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CXF动态客户端调用WebService</title>
      <link href="/posts/48c14765/"/>
      <url>/posts/48c14765/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不积跬步，无以至千里。不积小流，无以成江海。</p></blockquote><p>对于WebService的调用，之前是使用CXF直接生成代理类的方式，这样的好处是拿到后可以直接调用，但生成的文件太多，并且包名需要与服务端相同，使用进起来感觉很重。</p><p>使用CXF动态客户端的方式去调用也很简单，并且不需要生成任何文件。</p><a id="more"></a> <p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CxfApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Object, Endpoint&gt; factoryMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Object, Client&gt; clientMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">        SysCategoryWbSReq sysCategoryWbSReq = <span class="keyword">new</span> SysCategoryWbSReq();</span><br><span class="line">        sysCategoryWbSReq.setCategoryName(<span class="string">"test20190920"</span>);</span><br><span class="line">        sysCategoryWbSReq.setCategoryCode(<span class="string">"ML0025"</span>);</span><br><span class="line">        sysCategoryWbSReq.setEnabledFlag(<span class="number">1</span>);</span><br><span class="line">        List&lt;Object&gt; paramList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        paramList.add(gson.toJson(sysCategoryWbSReq));</span><br><span class="line">        String result = dynamicCallWebServiceByCXF(<span class="string">"http://127.0.0.1:9095/application/applicationWBS/addAndUpdateSyscategory?wsdl"</span>,</span><br><span class="line">                <span class="string">"addAndUpdateSyscategory"</span>,</span><br><span class="line">                <span class="string">"http://applicationWBS.expense.app.hcf.hand.com"</span>,<span class="string">"ApplicationWbService"</span>,paramList);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wsdlUrl  wsdl的地址：http://localhost:8001/demo/HelloServiceDemoUrl?wsdl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodName 调用的方法名称 selectOrderInfo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetNamespace 命名空间 http://service.limp.com/</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name  name HelloServiceDemo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paramList 参数集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> String <span class="title">dynamicCallWebServiceByCXF</span><span class="params">(String wsdlUrl, String methodName, String targetNamespace, String name, List&lt;Object&gt; paramList)</span></span>&#123;</span><br><span class="line">        <span class="comment">//临时增加缓存，增加创建速度</span></span><br><span class="line">        <span class="keyword">if</span>(!factoryMap.containsKey(methodName))&#123;</span><br><span class="line">            <span class="comment">// 创建动态客户端</span></span><br><span class="line">            JaxWsDynamicClientFactory factory = JaxWsDynamicClientFactory.newInstance();</span><br><span class="line">            <span class="comment">// 创建客户端连接</span></span><br><span class="line">            Client client = factory.createClient(wsdlUrl);</span><br><span class="line">            ClientImpl clientImpl = (ClientImpl) client;</span><br><span class="line">            Endpoint endpoint = clientImpl.getEndpoint();</span><br><span class="line">            factoryMap.put(methodName,endpoint);</span><br><span class="line">            clientMap.put(methodName,client);</span><br><span class="line">            System.out.println(<span class="string">"初始化"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从缓存中换取 endpoint、client</span></span><br><span class="line">        Endpoint endpoint=factoryMap.get(methodName);</span><br><span class="line">        Client client=clientMap.get(methodName);</span><br><span class="line">        <span class="comment">// Make use of CXF service model to introspect the existing WSDL</span></span><br><span class="line">        ServiceInfo serviceInfo = endpoint.getService().getServiceInfos().get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 创建QName来指定NameSpace和要调用的service</span></span><br><span class="line">        String localPart=name+<span class="string">"SoapBinding"</span>;</span><br><span class="line">        QName bindingName = <span class="keyword">new</span> QName(targetNamespace, localPart);</span><br><span class="line">        BindingInfo binding = serviceInfo.getBinding(bindingName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建QName来指定NameSpace和要调用的方法绑定方法</span></span><br><span class="line">        QName opName = <span class="keyword">new</span> QName(targetNamespace, methodName);<span class="comment">//selectOrderInfo</span></span><br><span class="line"></span><br><span class="line">        BindingOperationInfo boi = binding.getOperation(opName);</span><br><span class="line"><span class="comment">//BindingMessageInfo inputMessageInfo = boi.getInput();</span></span><br><span class="line">        BindingMessageInfo inputMessageInfo = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!boi.isUnwrapped()) &#123;</span><br><span class="line">            <span class="comment">//OrderProcess uses document literal wrapped style.</span></span><br><span class="line">            inputMessageInfo = boi.getWrappedOperation().getInput();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            inputMessageInfo = boi.getUnwrappedOperation().getInput();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;MessagePartInfo&gt; parts = inputMessageInfo.getMessageParts();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/***********************以下是初始化参数，组装参数；处理返回结果的过程******************************************/</span></span><br><span class="line">        Object[] parameters = <span class="keyword">new</span> Object[parts.size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;parts.size();m++)&#123;</span><br><span class="line">            MessagePartInfo  part=parts.get(m);</span><br><span class="line">            <span class="comment">// 取得对象实例</span></span><br><span class="line">            Class&lt;?&gt; partClass = part.getTypeClass();<span class="comment">//OrderInfo.class;</span></span><br><span class="line">            System.out.println(partClass.getCanonicalName()); <span class="comment">// GetAgentDetails</span></span><br><span class="line">            <span class="comment">//实例化对象</span></span><br><span class="line">            Object initDomain=<span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//普通参数的形参，不需要fastJson转换直接赋值即可</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"java.lang.String"</span>.equalsIgnoreCase(partClass.getCanonicalName())</span><br><span class="line">                    ||<span class="string">"int"</span>.equalsIgnoreCase(partClass.getCanonicalName()))&#123;</span><br><span class="line">                initDomain=paramList.get(m).toString();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果是数组</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(partClass.getCanonicalName().indexOf(<span class="string">"[]"</span>)&gt;-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//转换数组</span></span><br><span class="line">                initDomain= JSON.parseArray(paramList.get(m).toString(),partClass.getComponentType());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                initDomain=JSON.parseObject(paramList.get(m).toString(),partClass);</span><br><span class="line">            &#125;</span><br><span class="line">            parameters[m]=initDomain;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义返回结果集</span></span><br><span class="line">        Object[] result=<span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//普通参数情况 || 对象参数情况  1个参数 ||ArryList集合</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = client.invoke(opName,parameters);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"参数异常"</span>+ex.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回调用结果</span></span><br><span class="line">        <span class="keyword">if</span>(result.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>  JSON.toJSON(result[<span class="number">0</span>]).toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">"invoke success, but is void "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WebService </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebService </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Odata v2过滤常用指令</title>
      <link href="/posts/34f6a5f4/"/>
      <url>/posts/34f6a5f4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不积跬步，无以至千里。 不积小流，无以成江海。</p></blockquote><p>最近在使用Odata,从官网上摘录一些常用的Odta v2指令记录一下。</p><a id="more"></a><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><table><thead><tr><th style="text-align:left">Operator</th><th style="text-align:left">Description</th><th style="text-align:left">Example</th></tr></thead><tbody><tr><td style="text-align:left">Logical Operators</td><td style="text-align:left">逻辑操作</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Eq</td><td style="text-align:left">Equal - 等于</td><td style="text-align:left">/Suppliers?$filter=Address/City eq ‘Redmond’</td></tr><tr><td style="text-align:left">Ne</td><td style="text-align:left">Not equal - 不等于</td><td style="text-align:left">/Suppliers?$filter=Address/City ne ‘London’</td></tr><tr><td style="text-align:left">Gt</td><td style="text-align:left">Greater than - 大于</td><td style="text-align:left">/Products?$filter=Price gt 20</td></tr><tr><td style="text-align:left">Ge</td><td style="text-align:left">Greater than or equal -大于或等于</td><td style="text-align:left">/Products?$filter=Price ge 10</td></tr><tr><td style="text-align:left">Lt</td><td style="text-align:left">Less than - 小于</td><td style="text-align:left">/Products?$filter=Price lt 20</td></tr><tr><td style="text-align:left">Le</td><td style="text-align:left">Less than or equal - 小于或等于</td><td style="text-align:left">/Products?$filter=Price le 100</td></tr><tr><td style="text-align:left">And</td><td style="text-align:left">Logical and - 逻辑与</td><td style="text-align:left">/Products?$filter=Price le 200 and Price gt 3.5</td></tr><tr><td style="text-align:left">Or</td><td style="text-align:left">Logical or - 逻辑或</td><td style="text-align:left">/Products?$filter=Price le 3.5 or Price gt 200</td></tr><tr><td style="text-align:left">Not</td><td style="text-align:left">Logical negation - 逻辑非</td><td style="text-align:left">/Products?$filter=not endswith(Description,’milk’)</td></tr><tr><td style="text-align:left">Arithmetic Operators</td><td style="text-align:left">算术操作</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Add</td><td style="text-align:left">Addition - 加</td><td style="text-align:left">/Products?$filter=Price add 5 gt 10</td></tr><tr><td style="text-align:left">Sub</td><td style="text-align:left">Subtraction -减</td><td style="text-align:left">/Products?$filter=Price sub 5 gt 10</td></tr><tr><td style="text-align:left">Mul</td><td style="text-align:left">Multiplication - 乘</td><td style="text-align:left">/Products?$filter=Price mul 2 gt 2000</td></tr><tr><td style="text-align:left">Div</td><td style="text-align:left">Division - 除</td><td style="text-align:left">/Products?$filter=Price div 2 gt 4</td></tr><tr><td style="text-align:left">Mod</td><td style="text-align:left">Modulo - 模</td><td style="text-align:left">/Products?$filter=Price mod 2 eq 0</td></tr><tr><td style="text-align:left">Grouping Operators</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">( )</td><td style="text-align:left">Precedence grouping</td><td style="text-align:left">/Products?$filter=(Price sub 5) gt 10</td></tr></tbody></table><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><table><thead><tr><th style="text-align:left">Function</th><th style="text-align:left">Example</th></tr></thead><tbody><tr><td style="text-align:left"><strong>String Functions</strong></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>bool substringof(string po, string p1)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=substringof" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=substringof</a>(‘Alfreds’, CompanyName) eq true</td></tr><tr><td style="text-align:left"><strong>bool endswith(string p0, string p1)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=endswith" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=endswith</a>(CompanyName, ‘Futterkiste’) eq true</td></tr><tr><td style="text-align:left"><strong>bool startswith(string p0, string p1)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=startswith" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=startswith</a>(CompanyName, ‘Alfr’) eq true</td></tr><tr><td style="text-align:left"><strong>int length(string p0)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=length(CompanyName)" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=length(CompanyName)</a> eq 19</td></tr><tr><td style="text-align:left"><strong>int indexof(string p0, string p1)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=indexof" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=indexof</a>(CompanyName, ‘lfreds’) eq 1</td></tr><tr><td style="text-align:left"><strong>string replace(string p0, string find, string replace)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=replace" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=replace</a>(CompanyName, ‘ ‘, ‘’) eq ‘AlfredsFutterkiste’</td></tr><tr><td style="text-align:left"><strong>string substring(string p0, int pos)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=substring" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=substring</a>(CompanyName, 1) eq ‘lfreds Futterkiste’</td></tr><tr><td style="text-align:left"><strong>string substring(string p0, int pos, int length)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=substring" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=substring</a>(CompanyName, 1, 2) eq ‘lf’</td></tr><tr><td style="text-align:left"><strong>string tolower(string p0)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=tolower(CompanyName)" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=tolower(CompanyName)</a> eq ‘alfreds futterkiste’</td></tr><tr><td style="text-align:left"><strong>string toupper(string p0)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=toupper(CompanyName)" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=toupper(CompanyName)</a> eq ‘ALFREDS FUTTERKISTE’</td></tr><tr><td style="text-align:left"><strong>string trim(string p0)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=trim(CompanyName)" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=trim(CompanyName)</a> eq ‘Alfreds Futterkiste’</td></tr><tr><td style="text-align:left"><strong>string concat(string p0, string p1)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=concat" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Customers?$filter=concat</a>(concat(City, ‘, ‘), Country) eq ‘Berlin, Germany’</td></tr><tr><td style="text-align:left"><strong>Date Functions</strong></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>int day(DateTime p0)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Employees?$filter=day(BirthDate)" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Employees?$filter=day(BirthDate)</a> eq 8</td></tr><tr><td style="text-align:left"><strong>int hour(DateTime p0)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Employees?$filter=hour(BirthDate)" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Employees?$filter=hour(BirthDate)</a> eq 0</td></tr><tr><td style="text-align:left"><strong>int minute(DateTime p0)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Employees?$filter=minute(BirthDate)" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Employees?$filter=minute(BirthDate)</a> eq 0</td></tr><tr><td style="text-align:left"><strong>int month(DateTime p0)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Employees?$filter=month(BirthDate)" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Employees?$filter=month(BirthDate)</a> eq 12</td></tr><tr><td style="text-align:left"><strong>int second(DateTime p0)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Employees?$filter=second(BirthDate)" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Employees?$filter=second(BirthDate)</a> eq 0</td></tr><tr><td style="text-align:left"><strong>int year(DateTime p0)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Employees?$filter=year(BirthDate)" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Employees?$filter=year(BirthDate)</a> eq 1948</td></tr><tr><td style="text-align:left"><strong>Math Functions</strong></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>double round(double p0)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Orders?$filter=round(Freight" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Orders?$filter=round(Freight) eq 32d</a> eq 32)</td></tr><tr><td style="text-align:left"><strong>decimal round(decimal p0)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Orders?$filter=round(Freight)" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Orders?$filter=round(Freight)</a> eq 32</td></tr><tr><td style="text-align:left"><strong>double floor(double p0)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Orders?$filter=round(Freight" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Orders?$filter=round(Freight) eq 32d</a> eq 32)</td></tr><tr><td style="text-align:left"><strong>decimal floor(decimal p0)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Orders?$filter=floor(Freight)" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Orders?$filter=floor(Freight)</a> eq 32</td></tr><tr><td style="text-align:left"><strong>double ceiling(double p0)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Orders?$filter=ceiling(Freight" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Orders?$filter=ceiling(Freight) eq 33d</a> eq 33)</td></tr><tr><td style="text-align:left"><strong>decimal ceiling(decimal p0)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Orders?$filter=floor(Freight)" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Orders?$filter=floor(Freight)</a> eq 33</td></tr><tr><td style="text-align:left"><strong>Type Functions</strong></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>bool IsOf(type p0)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Orders?$filter=isof(&#39;NorthwindModel.Order&#39;)" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Orders?$filter=isof(&#39;NorthwindModel.Order&#39;)</a></td></tr><tr><td style="text-align:left"><strong>bool IsOf(expression p0, type p1)</strong></td><td style="text-align:left"><a href="https://services.odata.org/Northwind/Northwind.svc/Orders?$filter=isof" target="_blank" rel="noopener">https://services.odata.org/Northwind/Northwind.svc/Orders?$filter=isof</a>(ShipCountry, ‘Edm.String’)</td></tr></tbody></table><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><table><thead><tr><th style="text-align:left">$format Value</th><th style="text-align:left">Response Media Type</th></tr></thead><tbody><tr><td style="text-align:left">Atom</td><td style="text-align:left">application/atom+xml</td></tr><tr><td style="text-align:left">Xml</td><td style="text-align:left">application/xml</td></tr><tr><td style="text-align:left">Json</td><td style="text-align:left">application/json</td></tr><tr><td style="text-align:left">Any other IANA-defined content type</td><td style="text-align:left">Any IANA-defined content type</td></tr><tr><td style="text-align:left">A service-specific value indicating a format specific to the specific OData service</td><td style="text-align:left">Any IANA-defined content type</td></tr></tbody></table><p>Examples</p><p><a href="https://services.odata.org/OData/OData.svc/Products?$format=atom" target="_blank" rel="noopener">https://services.odata.org/OData/OData.svc/Products?$format=atom</a></p><h2 id="odata分页"><a href="#odata分页" class="headerlink" title="odata分页"></a>odata分页</h2><p>Examples</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//services.odata.org/OData/OData.svc/Products?$top=pageSize&amp;skip=(page-1)*pageSize&amp;$inlinecount=allpages</span></span><br></pre></td></tr></table></figure><ul><li><p>$top</p><p>表示取多少条数据</p></li><li><p>$skip</p><p>表示跳过多少条数据</p></li><li><p>$inlinecount=allpages</p><p>返回总记录数 <code>__count</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Odata </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Odata </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gson反序列化无法识别泛型的问题</title>
      <link href="/posts/7ec6642a/"/>
      <url>/posts/7ec6642a/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不积跬步，无以至千里。 不积小流，无以成江海。</p></blockquote><p>Gson提供了<code>fromJson()</code> 和<code>toJson()</code> 两个直接用于解析和生成的方法，前者实现反序列化，后者实现了序列化。</p><p>今天在使用 <code>fromJson()</code>遇到一个无法识别泛型的问题。</p><a id="more"></a><p>我的需求是通过<code>fromJson()</code> 反序列化返回一个List。</p><p>主要代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">select</span><span class="params">(T <span class="keyword">var</span>)</span> </span>&#123;</span><br><span class="line">    List&lt;T&gt; list = Lists.newArrayList();</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    JsonArray jsonArray = jsonObject.getAsJsonObject(<span class="string">"d"</span>).getAsJsonArray(<span class="string">"results"</span>);</span><br><span class="line">    list = gson.fromJson(jsonArray, <span class="keyword">new</span> TypeToken&lt;ArrayList&lt;T&gt;&gt;() &#123;&#125;.getType());</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T 的当前类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AvsPerson</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * person</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SerializedName</span>(value = <span class="string">"Person"</span>)</span><br><span class="line">    <span class="keyword">private</span> String person;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务员编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SerializedName</span>(value = <span class="string">"PersonWorkAgreement"</span>)</span><br><span class="line">    <span class="keyword">private</span> String personWorkAgreement;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务员姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SerializedName</span>(value = <span class="string">"PersonFullName"</span>)</span><br><span class="line">    <span class="keyword">private</span> String personFullName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jsonArray的数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"__metadata"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"uri"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"3"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"Person"</span>: <span class="string">"9980000020"</span>,</span><br><span class="line">    <span class="attr">"PersonWorkAgreement"</span>: <span class="string">"50000000"</span>,</span><br><span class="line">    <span class="attr">"PersonFullName"</span>: <span class="string">"Sarah Huang"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"__metadata"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"uri"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"3"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"Person"</span>: <span class="string">"9980000021"</span>,</span><br><span class="line">    <span class="attr">"PersonWorkAgreement"</span>: <span class="string">"50000002"</span>,</span><br><span class="line">    <span class="attr">"PersonFullName"</span>: <span class="string">"Shanna Sun"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化后List中的值：</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190617213836.png" alt="反序列化后的数据"></p><p>数据是已经到list中了，但是它不是我需要的那个<code>AvsPerson</code>类型，而是完全把<code>jsonArray</code>中的数据反序列化为一个Map。</p><p>DEBUG跟一下发现如下：</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190617214500.png" alt="debug"></p><p>直接把<code>T</code>当成一个<code>Type</code> 了。。</p><p>因此我怀疑Gson没有识别到我使用的泛型类，所以直接当成 <code>Object</code>类型了，我测试把 <code>T</code> 换成<code>Object</code>是一样的结果，<code>Type</code>中则显示为<code>Object</code>类型了。</p><p>经过一番摸索，解决方案如下：</p><p>使用 <code>Guava</code>，它也是<code>Google</code>家的，直接引入依赖即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.google.guava/guava --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>27.0.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Type <span class="title">setModelAndGetCorrespondingList</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TypeToken&lt;ArrayList&lt;T&gt;&gt;() &#123;&#125;</span><br><span class="line">    .where(<span class="keyword">new</span> TypeParameter&lt;T&gt;() &#123;&#125;, type)</span><br><span class="line">        .getType();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <code>TypeToken</code> 使用的是 <code>Guava</code> 下的包了，注意更换。</p><p>在代码中调用这个方法即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">select</span><span class="params">(T <span class="keyword">var</span>)</span> </span>&#123;</span><br><span class="line">    List&lt;T&gt; list = Lists.newArrayList();</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    JsonArray jsonArray = jsonObject.getAsJsonObject(<span class="string">"d"</span>).getAsJsonArray(<span class="string">"results"</span>);</span><br><span class="line">    list = gson.fromJson(jsonArray, classHelper.setModelAndGetCorrespondingList(<span class="keyword">var</span>.getClass()));</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更改后再次 debug 后 <code>Type</code> 的类型正常了！</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190617215121.png" alt="Type类型正常"></p><p>得到的List内容也恢复正常：</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190617215919.png" alt="List数据正常"></p><p>具体的原因可以看这里：<a href="https://stackoverflow.com/questions/20773850/gson-typetoken-with-dynamic-arraylist-item-type" target="_blank" rel="noopener">https://stackoverflow.com/questions/20773850/gson-typetoken-with-dynamic-arraylist-item-type</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gson反序列化无法处理时间戳的问题</title>
      <link href="/posts/7c60c143/"/>
      <url>/posts/7c60c143/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不积跬步，无以至千里。 不积小流，无以成江海。</p></blockquote><p>今天在使用Gson的时候遇到无法转换时间戳的问题。</p><a id="more"></a><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">String jsonStr = <span class="string">"json字符串，省略。。"</span>;</span><br><span class="line">Person person = gson.fromJson(jsonStr, Person.class);</span><br></pre></td></tr></table></figure><p>报错如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">com.google.gson.JsonSyntaxException: /Date(<span class="number">1552348800000</span>)/</span><br><span class="line"></span><br><span class="line">at com.google.gson.internal.bind.DateTypeAdapter.deserializeToDate(DateTypeAdapter.java:<span class="number">87</span>)</span><br><span class="line">at com.google.gson.internal.bind.DateTypeAdapter.read(DateTypeAdapter.java:<span class="number">75</span>)</span><br><span class="line">at com.google.gson.internal.bind.DateTypeAdapter.read(DateTypeAdapter.java:<span class="number">46</span>)</span><br><span class="line">....</span><br><span class="line">    ....</span><br><span class="line">at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:<span class="number">242</span>)</span><br><span class="line">at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:<span class="number">70</span>)</span><br><span class="line">Caused by: java.text.ParseException: Failed to parse date [<span class="string">"/Date(1552348800000)/"</span>]: Invalid number: /Dat</span><br><span class="line">at com.google.gson.internal.bind.util.ISO8601Utils.parse(ISO8601Utils.java:<span class="number">274</span>)</span><br><span class="line">at com.google.gson.internal.bind.DateTypeAdapter.deserializeToDate(DateTypeAdapter.java:<span class="number">85</span>)</span><br><span class="line">... <span class="number">31</span> more</span><br><span class="line">Caused by: java.lang.NumberFormatException: Invalid number: /Dat</span><br></pre></td></tr></table></figure><p>后面查询接口给的数据才发现，Odata服务给的时间格式都是这种时间戳格式，所以Gson无法自动完成转换。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;        </span><br><span class="line">    <span class="attr">"Person"</span>: <span class="string">"9980000020"</span>,</span><br><span class="line">    <span class="attr">"PersonWorkAgreement"</span>: <span class="string">"50000000"</span>,</span><br><span class="line">    <span class="attr">"PersonFullName"</span>: <span class="string">"Sarah Huang"</span>,</span><br><span class="line">    <span class="attr">"CreateDate"</span>:<span class="string">"/Date(1552348800000)/"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过一番摸索，解决方案如下：</p><blockquote><p>给 Gson 注册一个处理时间戳的适配器，当字段为日期类型时会按时间戳处理。因此如果还有其它日期格式那就无法转换了！如：2019-06-17 12:00:01 这种格式，使用了这个适配器后就无法处理这种日期了！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建GsonBuilder 管理收到的信息</span></span><br><span class="line">GsonBuilder builder = <span class="keyword">new</span> GsonBuilder();</span><br><span class="line"><span class="comment">//注册适配器以将日期类型作为长值进行管理</span></span><br><span class="line">builder.registerTypeAdapter(Date.class, <span class="keyword">new</span> JsonDeserializer&lt;Date&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">deserialize</span><span class="params">(JsonElement json, Type typeOfT, JsonDeserializationContext context)</span> <span class="keyword">throws</span> JsonParseException </span>&#123;</span><br><span class="line">        String dateStr = json.getAsJsonPrimitive().getAsString();</span><br><span class="line">        <span class="keyword">long</span> timestamp = Long.parseLong(dateStr.substring(<span class="number">6</span>, dateStr.length() - <span class="number">2</span>));</span><br><span class="line">        Date d = <span class="keyword">new</span> Date(timestamp);</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">Gson gson = builder.create();</span><br><span class="line">String jsonStr = <span class="string">"json字符串，省略。。"</span>;</span><br><span class="line">Person person = gson.fromJson(jsonStr, Person.class);</span><br></pre></td></tr></table></figure><p>更改后反序列化成功。</p><p>转换出来的时间格式如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person(person=9980000020, personWorkAgreement=50000000, personFullName=Sarah Huang, createDate=Tue Mar 12 08:00:00 GMT+08:00 2019)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC中参数绑定常用注解</title>
      <link href="/posts/d804aaaf/"/>
      <url>/posts/d804aaaf/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不积跬步，无以至千里。 不积小流，无以成江海。</p></blockquote><p>今天在写一个Ajax请求到Controller时被参数接收的问题耽误了很久。随后详细查了SpringMVC中Controller参数绑定注解，整理记录如下。</p><p>在写SpringMVC参数绑定注解前，先看看该如何使用Ajax请求。</p><a id="more"></a><h2 id="Ajax中Content-Type"><a href="#Ajax中Content-Type" class="headerlink" title="Ajax中Content-Type"></a>Ajax中Content-Type</h2><p>HTTP请求中使用 <code>Content-Type</code> 这个字段来表示报文主体的对象类型。下面是常用的 <code>Content-Type</code> </p><ul><li>application/x-www-form-urlencoded</li></ul><p>这是最常用的POST提交数据的方式。Ajax中不设置<code>Content-Type</code>则默认以这种方式提交数据。</p><p>数据格式以<code>key=value&amp;key2=value2</code> 的方式进行编码，作为一个FormData对象进行发送。</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190610225224.png" alt="form表单提交"></p><ul><li><h5 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h5></li></ul><p>在使用表单进行上传文件时使用这种方式。这里不详细展开。</p><ul><li><h5 id="application-json"><a href="#application-json" class="headerlink" title="application/json"></a>application/json</h5></li></ul><p>这种方式现在很常用，它表示数据是序列化的JSON字符串。通常配合 JSON.stringify() 将一个对象转化成JSON字符串。</p><ul><li><h4 id="text-xml"><a href="#text-xml" class="headerlink" title="text/xml"></a>text/xml</h4></li></ul><p>表示数据是XML的格式。data中传递的数据需要符合XML格式。</p><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><p>在接收请求中的参数时我们经常使用以下注解，可以根据它们处理的Request不同部分分类：</p><ul><li>处理Request Uri (指Uri中的Variable，不包括拼接在URL中的 QueryString )<ul><li>@PathVariable</li></ul></li><li>处理Request Header<ul><li>@RequestHeader</li><li>@CookieValue</li></ul></li><li>处理Request Body<ul><li>@ReuqestParam</li><li>@RequestBody</li></ul></li><li>处理 Attribute 类型<ul><li>@SessionAttributes</li><li>@ModelAttribute</li></ul></li></ul><h3 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h3><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/&#123;userId&#125;/roles"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryUserAndRoles</span><span class="params">(HttpServletRequest request, @PathVariable Long userId)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h3><p>从名字可以知道它是获取Request的Header部分字段。</p><p>示例：</p><p>一个Request Header:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /dwp/contract/rebuildpdf HTTP/1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 20</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Accept: application/json, text/javascript, */*; q=0.01</span><br></pre></td></tr></table></figure><p>在Controller中获取Request Header中的 <code>Host</code> 与 <code>Content-Length</code> 字段值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/dwp/contract/headerInfo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">headerInfo</span><span class="params">(@RequestHeader(<span class="string">"Host"</span>)</span> String Host, @<span class="title">RequestHeader</span><span class="params">(<span class="string">"Content-Length"</span>)</span> String ContentLength) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h3><p>获取Request Header 中 Cookie 中的值。</p><p>示例：</p><p>有如下Cookie：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie: _ga=GA1.1.54311297.1548073822; Webstorm-244b1d3=90a9034f-e9c9-4a89-86a7-aaef4addf18e; Idea-4ae3b438=0eb7fd0e-54c2-4672-960c-36b458508707; Webstorm-ead79411=ce4860a6-bbd1-487d-900b-3b8fd9825418; Hm_lvt_3a101c3aa7d1cde834d9d6b197500902=1557208148,1559381054; loginKey=cbe4e8d0-059e-4bd3-82f9-5360e570839a;</span><br></pre></td></tr></table></figure><p>在Controller中获取Cookie中的<code>loginKey</code>的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/dwp/contract/rebuildpdf"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rebuildpdf</span><span class="params">(HttpServletRequest request, @CookieValue(<span class="string">"loginKey"</span>)</span> String cookieLoginKey)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="ReuqestParam"><a href="#ReuqestParam" class="headerlink" title="@ReuqestParam"></a>@ReuqestParam</h3><p>requestParam有两种情况：</p><p><strong>1、处理简单类型绑定</strong></p><p>可以处理使用<code>request.getParameter()</code>获取的String，或<code>Get</code>方式中的<code>queryParams</code> ，和<code>POST</code> 方式中 form data的值</p><p>示例：</p><p>Ajax：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:_basePath + <span class="string">'/dwp/contract/rebuildpdf?contractTempNumber='</span> + $(<span class="string">'#contractTempNumber'</span>).val(),</span><br><span class="line">    type: <span class="string">"GET"</span>,</span><br><span class="line">    dataType: <span class="string">"json"</span>,</span><br><span class="line">    contentType: <span class="string">"application/json"</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Controller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/dwp/contract/rebuildpdf"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseData <span class="title">rebuildpdf</span><span class="params">(HttpServletRequest request,  @RequestParam String contractTempNumber)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>2、处理表单数据</strong></p><p>获取Request中的formData参数。因此Ajax请求时<code>Content-Type</code> 必须是 <code>application/x-www-form-urlencoded</code> ,data中传的是对象。</p><p>示例：</p><p>Ajax：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:_basePath + <span class="string">'/dwp/contract/rebuildpdf'</span>,</span><br><span class="line">    type: <span class="string">"POST"</span>,</span><br><span class="line">    dataType: <span class="string">"json"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        contractTempNumber: $(<span class="string">'#contractTempNumber'</span>).val()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Controller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/dwp/contract/rebuildpdf"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rebuildpdf</span><span class="params">(HttpServletRequest request, @RequestParam String contractTempNumber)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h3><p>获取Request 的Body</p><p>示例：</p><p>Ajax：</p><p>使用<code>JSON.stringify</code> 把对象转化成JSON字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:_basePath + <span class="string">'/dwp/contract/rebuildpdf'</span>,</span><br><span class="line">    type: <span class="string">"POST"</span>,</span><br><span class="line">    dataType: <span class="string">"json"</span>,</span><br><span class="line">    contentType: <span class="string">"application/json"</span>,</span><br><span class="line">    data: <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">contractTempNumber</span>:  $(<span class="string">'#contractTempNumber'</span>).val()&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Controller:</p><p>对象<code>DwpContracts</code>中有<code>contractTempNumber</code> 这个属性字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/dwp/contract/rebuildpdf"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rebuildpdf</span><span class="params">(HttpServletRequest request,  @RequestBody DwpContracts contract)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h3><p>该注解用来绑定HttpSession中的attribute对象的值，便于在方法中的参数里使用。该注解有value、types两个属性，可以通过名字和类型指定要使用的attribute 对象；</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/editPet.do"</span>)</span><br><span class="line"><span class="meta">@SessionAttributes</span>(<span class="string">"pet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditPetForm</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h3><p>该注解有两个用法，一个是用于方法上，一个是用于参数上；</p><p>用于方法上时：  通常用来在处理@RequestMapping之前，为请求绑定需要从后台查询的model；</p><p>用于参数上时： 用来通过名称对应，把相应名称的值绑定到注解的参数bean上；要绑定的值来源于：</p><p>A） @SessionAttributes 启用的attribute 对象上；</p><p>B） @ModelAttribute 用于方法上时指定的model对象；</p><p>C） 上述两种情况都没有时，new一个需要绑定的bean对象，然后把request中按名称对应的方式把值绑定到bean中。</p><p>用到方法上@ModelAttribute的示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Add one attribute</span></span><br><span class="line"><span class="comment">// The return value of the method is added to the model under the name "account"</span></span><br><span class="line"><span class="comment">// You can customize the name via @ModelAttribute("myAccount")</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">addAccount</span><span class="params">(@RequestParam String number)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> accountManager.findAccount(number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用在参数上的@ModelAttribute示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;/edit"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processSubmit</span><span class="params">(@ModelAttribute Pet pet)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先查询 @SessionAttributes有无绑定的Pet对象，若没有则查询@ModelAttribute方法层面上是否绑定了Pet对象，若没有则将URI template中的值按对应的名称绑定到Pet对象的各属性上。</p><p>参考：<a href="https://blog.csdn.net/walkerjong/article/details/7946109" target="_blank" rel="noopener">https://blog.csdn.net/walkerjong/article/details/7946109</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDD及开发模式对比</title>
      <link href="/posts/156e5ee9/"/>
      <url>/posts/156e5ee9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不积跬步，无以至千里。 不积小流，无以成江海。</p></blockquote><p>转载自：Jiangzhou.bo</p><p>本文总结常用开发模式，简述DDD领域驱动设计，基于DEMO整理出后台架构模式。</p><a id="more"></a><h2 id="分层模式"><a href="#分层模式" class="headerlink" title="分层模式"></a>分层模式</h2><p>从大的范围来分，软件可以分为两个层次：前端和后台。前端负责与用户进行交互，负责接收和校验用户输入，并向用户反馈输出，其业务操作是委托给后台来实现的。我们平常见到很多分层架构模式，核心目的都是分层、解耦。</p><h3 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h3><p>MVC(Model-View-Controller)，即数据模型-视图-控制器，MVC 是开发客户端最经典的设计模式。MVC这个概念最早出现在桌面客户端上面，是C/S里面的C，在Web开发中得以发扬光大，实际上，移动App中也几乎都是MVC模式的。</p><p>在客户端开发中，Controller管理用户输入、输出和图形界面。数据来自Model部分，Model实际上集中管理了业务数据，是通向后台系统的通道。这使对同一种业务数据展现多种图形界面成为了可能，Controller存在的目的则是确保M和V的同步，一旦M改变，V应该同步更新。</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190603220318.png" alt="MVC模式"></p><p>后端最典型的MVC就是JSP + servlet + javabean的模式。当用户发出一个请求后，这个请求会被控制器Servlet接收到；Servlet将请求的数据转换成数据模型JavaBean，然后调用业务逻辑模型JavaBean的方法，并将业务逻辑模型返回的结果放到合适的地方，比如请求的属性里；最后，根据业务逻辑模型的返回结果，由控制器来选择合适的视图(JSP)，由视图把数据展现给用户。</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190603220404.png" alt="典型的MVC模式"></p><p>在很多开源框架中也有MVC设计的体现，如Struts2、SpringMVC等。就单从SpringMVC框架来说，DispatcherServlet是前端控制器，是整个流程控制的中心，由它调用其它组件处理用户的请求，相当于MVC的Controller；Handler(即我们开发的Controller)是继DispatcherServlet前端控制器的后端控制器，Handler对具体的用户请求进行处理，并返回ViewModel；最后由ViewResolver负责将处理结果生成View视图。</p><p>在Javaweb开发中，MVC框架充当了UI层和业务逻辑层的适配器的作用，MVC框架实现了UI层和业务逻辑层最大程度的分离。</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190603220452.png" alt="SpringMVC"></p><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><p>现在开发中常用的分层模式就是三层架构，这也是比较传统的一种架构模式。通常意义上的三层架构就是将整个业务应用划分为：表现层（UI）、业务逻辑层（BLL）、数据访问层（DAL）。区分层次的目的即为了“高内聚，低耦合”。</p><p>表现层：负责与用户进行交互；业务逻辑层：主要是针对具体的问题的操作，也可以理解成对数据层的操作，对数据业务逻辑处理；数据访问层：直接操作数据库，针对数据的增、删、改、查等。</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190603220646.png" alt="三层架构"></p><p>对应到开发中，即常用的 Controller – Service – Dao 三层。Controller层为控制层，用来接收用户的请求，不会涉及太多的业务处理操作，会做一些简单的数据校验，业务处理完毕返回数据模型或视图。Controller层中拥有某一个Service层的引用，但凡涉及到业务处理，就交给Service层来操作。Service一般持有某一个或几个Dao层的引用来对数据做处理。一般来说，Service层和Dao层中，都是直接存放的接口类，然后有一个包放所有接口的实现类，impl就是指每个接口对应的实现类。</p><p>联系这三层之间的就是实体对象，比如，使用一个DTO映射数据表，Dao层返回的数据对象(DO)、Service层处理的业务对象(BO)、Controller层返回给用户的展示对象(VO)、甚至远程接口数据对象(DTO)都由一个DTO对象完成，这种模式一般在中小型项目中用得比较多，毕竟分层过多会引入复杂性。</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190603220729.png" alt="DTO"></p><h3 id="三层架构与MVC"><a href="#三层架构与MVC" class="headerlink" title="三层架构与MVC"></a>三层架构与MVC</h3><p>我们经常将三层架构与MVC混为一谈，但是它俩并不是一个概念。三层架构是一个分层式的软件体系架构设计，它可适用于任何一个项目。MVC是一个设计模式，它是根据项目的具体需求来决定是否适用于该项目。三层架构的着重点是“高内聚，低耦合”，MVC的目的则是实现Web系统的职能分工，即职责划分。但它们的总体目的是一样的，都是为了解耦。</p><p>三层架构的表现层即客户端，一般是基于MVC模式开发，使用诸如AngularJS、Vue、React等前端框架。数据交互使用JSON。</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190603220831.png" alt="SERVER-CLIENT"></p><h3 id="DDD-领域驱动设计"><a href="#DDD-领域驱动设计" class="headerlink" title="DDD 领域驱动设计"></a>DDD 领域驱动设计</h3><p><strong>DDD</strong>(Domain<br>Driven Design)，领域驱动设计，作为一种软件开发方法，它可以帮助我们设计高质量的软件模型。在正确实现的情况下，我们通过DDD完成的设计恰恰就是软件的工作方式。在实施DDD时，设计就是代码，代码就是设计。</p><p><strong>DDD中重要的概念</strong></p><p><strong>通用语言</strong>(UL)<strong>：</strong>通用语言是团队自己创建的公用语言，团队中同时包含领域专家和软件开发人员，可以看成业务顾问和技术顾问。我们使用通用语言来捕捉特定核心业务领域中的概念和术语，比如店铺运营、商场促销。</p><p><strong>限界上下文</strong>(BC)<strong>：</strong>限界上下文是一个显示的边界，领域模型便存在于这个边界之内。这个边界之内的每种领域术语、词组或句子就组成了通用语言，都有确定的上下文含义。但是，限界上下文并不只局限于容纳模型，它通常标定了一个系统、一个应用程序或者一种业务服务。限界上下文中可以包含模块、聚合、领域事件、领域服务等基础部件，限界上下文应该足够大，以能够表达它所对应的整套通用语言。</p><p>在使用Java时，限界上下文可以看成IDE中的一个工程项目；顶层包名通常表示界限上下文中顶层模块的名字。我们可能将一个限界上下文放在一个jar或者war文件中。对于大型模型，可以将松耦合的领域模型放在不同的jar文件中，这样我们可以按照版本号对领域模型进行单独部署，这其实就可以看成单独的组件、微服务了。</p><p>通用语言和限界上下文同时构成了DDD的两大支柱，并且他们是相辅相成的。限界上下文和通用语言存在一对一的关系。</p><p><strong>领域：</strong>Domain，即一个组织所做的事情以及其中包含的一切。当我们为某个组织开发软件时，所面对的便是这个组织的领域。一个领域被分为若干子域，几乎所有软件的领域都包含多个子域。</p><p><strong>子域：</strong>我们可以按照实际功能将领域中交织的模型划分成逻辑上相互分离的子域，从而在一定程度上减少系统的复杂性。子域不一定要包含很多功能，简单的子域可以以模块的形式存在。子域又分核心域、支撑子域、通用子域。</p><p><strong>核心域：</strong>是整个业务领域的一部分，也是业务成功的主要促成因素，系统核心竞争力的体现。从战略层面上讲，企业应该在核心域上胜人一筹。</p><p><strong>支撑子域：</strong>支撑子域专注于业务的某个方面。</p><p><strong>通用子域：</strong>通用子域被用于整个业务系统。像用户和权限就可以放到通用子域。</p><p><strong>领域模型：</strong>领域模型是关于某个特定业务领域的软件模型。通常，<strong>领域模型通过对象模型来实现，这些对象同时包含了数据和行为，并且表达了准确的业务含义。</strong>领域模型在限界上下文中完成开发，在开发一个领域模型时，我们关注的通常只是这个业务系统的某个方面。</p><p><strong>问题空间：</strong>在问题空间，我们思考的是业务所面临的挑战。问题空间是领域的一部分，对问题空间的开发将产生一个新的核心域，问题空间是核心域和其它子域的组合。</p><p><strong>解决方案空间：</strong>在解决方案空间，我们思考如何实现软件以解决问题空间的业务挑战。解决方案空间包括一个或多个界限上下文，即一组特定的软件模型。</p><p>上下文映射图：</p><p>由多个界限上下文和子域组成的表示当前单个领域或者多个领域之间的集成关系图。上下文映射图主要帮助我们从解决方案空间的角度看待问题。</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190603221125.png" alt="业务领域"></p><p><strong>贫血领域对象：</strong>指领域对象主要是些公共的getter/setter方法，几乎没有业务逻辑，主要就是用来容纳属性值的对象，比如我们之前使用的DTO。这种对象一般不叫领域对象，只是将关系型数据库中的模型映射到了对象上而已。反之，充血模型就是DDD中的领域模型。</p><p><strong>贫血症导致的失忆症：</strong>例如，有一个保存店铺的功能，saveStore(Store dto)，Store关联有合同、员工、经营证照等，现在的开发模式中，仅仅修改了店铺的名称或者备注属性，会调用这个保存店铺的方法；在新建店铺时，新增了合同关系、店铺员工，也会在saveStore里保存合同关系、店铺员工。这样一来，我们并没有正确的使用saveStore方法，他的职责范围过大，业务意图不明确了，方法的实现本身就增加了潜在的复杂性，时间久了，我们可能会被这段代码搞得一头雾水。说白了就是业务过于集中，不同模型之间耦合度过高，甚至分不清职责边界，导致后期无法维护。</p><h3 id="DDD架构"><a href="#DDD架构" class="headerlink" title="DDD架构"></a>DDD架构</h3><h4 id="DDD四层架构"><a href="#DDD四层架构" class="headerlink" title="DDD四层架构"></a>DDD四层架构</h4><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190603221304.png" alt="DDD四层架构"></p><p>DDD系统所采用的传统分层架构，核心域位于领域层，上层为用户界面层和应用层，下层是基础设施层。分层架构的一个重要原则是：每层只能与位于其下方的层发生耦合。分层架构有严格分层架构和松散分层架构，严格分层架构中，某层只能与直接位于其下方的层发生耦合；松散分层架构则允许任意上层与任意下层发生耦合。由于用户界面层和应用服务通常需要与基础设施打交道，许多系统都是基于松散分层架构的。</p><p><strong>用户接口层：</strong>这里指的用户可以是另一个计算机系统，也可以是使用用户界面的人。它不应该包含领域或业务逻辑，如果用户界面使用了领域模型中的对象，那么此时的领域对象仅限于数据的渲染展现，可以使用展现模型对用户界面和领域对象进行解耦。</p><p><strong>应用服务：</strong>应用服务位于应用层中，用户界面和面向服务端点都会将操作委派给应用服务。应用服务是很轻量的，主要负责用例流的任务协调，本身并不处理业务逻辑，可以用于控制事务和安全认证，或者向其他系统发送基于事件的消息通知，还可以用于创建邮件以发送给用户等等。如果应用服务过于复杂，就要考虑领域逻辑是否已经渗透到应用服务中了。有时，应用服务被设计成将用户界面完全地隔离于领域模型，此时，应用服务中的方法签名中将只出现最基本的数据类型(int，long，double，String等)，有可能还有DTO。在不使用领域对象返回时，我们避免了依赖和耦合，此时我们可以使用DTO，并提供转换器，虽然会导致一定的内存耗费，但避免了领域对象与不同系统间的耦合。</p><p><strong>领域服务：</strong>领域服务表示一个无状态的操作，它用于实现特定于某个领域的任务。当某个操作不是实体(领域对象)的职责时，最好的方式就是使用领域服务，我们应该尽量避免在实体中使用资源库。要避免所有的业务逻辑都位于领域服务中，否则可能导致贫血领域模型。一般来说，我们不需要为领域服务设计独立的接口，直接使用实现类即可，如果确实针对不同的租户有不同的实现标准，可以使用独立接口。因为通常情况下，领域服务总是和领域密切相关，并且不会有技术性的实现，或者不会有多个实现，此时采用独立接口便只是一个风格上的问题。虽然独立接口对于解耦来说是有用处的，此时客户端只需要依赖于接口，而不需要知道具体实现。但是，如果我们使用了依赖注入或工厂，即便接口和实现类是合并在一起的，我们依然能达到这样的目的。</p><p><strong>基础设施层：</strong>在传统的分层架构中，基础设施层位于底层，持久化和消息机制便位于该层中，包括持久化、消息、邮件等。可以将基础设施层中所有的组件和框架看作是应用程序的底层服务，较高层与该层发生耦合以重用技术上的基础设施。</p><p>总的来说DDD就是从以数据库为中心过度到以领域模型为中心，将侧重点从效率改变为维护。从长远的角度看，以领域模型为中心的设计更加清晰，也是一种更忠实于领域抽象的实现，因而可维护性更高。</p><h4 id="六边形架构（端口与适配器）"><a href="#六边形架构（端口与适配器）" class="headerlink" title="六边形架构（端口与适配器）"></a>六边形架构（端口与适配器）</h4><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190603221350.png" alt="六边形架构"></p><p>六边形架构也称为端口与适配器。对于每种外界类型，都有一个适配器与之对应。在这种架构中，不同的客户端通过“平等”的方式与系统交互。该架构中存在两个区域，分别是“外部区域”和“内部区域”。在外部区域中，不同的客户(系统、用户等)均可以提交输入；而内部的系统则处理数据相关。为了保证领域模型所在的应用程序的干净简洁和自治性，各种适配器作为防腐层在整个程序的最外层保护着当前的界限上下文不受外部入侵。</p><p>从图中可以看出，每种类型的客户都有他自己的适配器，该适配器用于将客户输入转为为程序内部API所能理解的输入。六边形的每条不同的边代表了不同类型的端口，可以将端口想成是HTTP，而将适配器想成Controller用来请求的类。新的客户只需要添加一个新的适配器将客户输入转化成能被系统API所理解的参数就行了。对于每种特定的输出，都有一个新建的适配器负责完成相应的转化功能。</p><h4 id="CQRS——命令和查询职责分离"><a href="#CQRS——命令和查询职责分离" class="headerlink" title="CQRS——命令和查询职责分离"></a>CQRS——命令和查询职责分离</h4><p>从资源库中查询所有需要显示的数据是困难的，特别是在需要显示来自不同聚合类型与实例的数据时。我们需要从不同的资源库获取聚合实例，然后再将这些实例数据组装成一个数据传输对象(DTO)。</p><p>CQRS强调一个方法要么是执行某种动作的命令，要么是返回数据的查询，而不能两者皆是。如果一个方法修改了对象的状态，该方法便是一个命令，它不应该返回数据，这样的方法应该声明为void。如果一个方法返回了数据，该方法便是一个查询，此时它不应该通过直接或间接的手段修改对象的状态，这样的方法应该以其返回的数据类型进行声明。</p><p>CQRS指导我们将领域模型中包含命令和查询的聚合拆分开，将那些纯粹的查询功能从命令功能中分离出来，最终分为命令模型和查询模型。</p><p>CQRS架构本身只是一个读写分离的思想，实现方式多种多样，比如数据存储不分离，仅仅只是代码层面读写分离，也是CQRS的体现；数据存储的读写分离，C端负责数据存储，Q端负责数据查询。这种架构方式有待深入研究。</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190603221528.png" alt="CQRS"></p><h2 id="DDD总结"><a href="#DDD总结" class="headerlink" title="DDD总结"></a>DDD总结</h2><h4 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h4><p>在微服务架构实践中，人们大量地使用了DDD中的概念和技术：</p><ul><li><p>微服务中应该首先建立UL，然后再讨论领域模型。</p></li><li><p>一个微服务最大不要超过一个BC，否则微服务内会存在有歧义的领域概念。</p></li><li><p>一个微服务最小不要小于一个聚合，否则会引入分布式事务的复杂度。</p></li><li><p>微服务的划分过程类似于BC的划分过程，每个微服务都有一个领域模型。</p></li><li><p>微服务间的集成可以通过ACL。</p></li><li><p>微服务间最好采用Domain Event（领域事件）来进行交互，使得微服务可以保持松耦合。</p></li></ul><h4 id="DDD所带来的业务价值"><a href="#DDD所带来的业务价值" class="headerlink" title="DDD所带来的业务价值"></a>DDD所带来的业务价值</h4><ul><li><p>你获得了一个非常有用的领域模型</p></li><li><p>你的业务得到了更准确的定义和理解</p></li><li><p>领域专家可以为软件设计做出贡献</p></li><li><p>更好的用户体验</p></li><li><p>清晰的模型边界</p></li><li><p>更好的企业架构</p></li><li><p>敏捷、迭代式和持续建模</p></li><li><p>使用战略和战术工具</p></li></ul><h4 id="DDD所带来的挑战"><a href="#DDD所带来的挑战" class="headerlink" title="DDD所带来的挑战"></a>DDD所带来的挑战</h4><ul><li><p>为创建通用语言腾出时间和精力</p></li><li><p>持续地将领域专家引入项目</p></li><li><p>改变开发者对领域的思考方式</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用docker-compose编排微服务</title>
      <link href="/posts/625295f9/"/>
      <url>/posts/625295f9/</url>
      
        <content type="html"><![CDATA[<p> 上篇 <a href="https://hjwjw.github.io/posts/719142df/">使用Maven构建微服务的Docker镜像</a> 写了如何构建微服务的镜像及运行镜像。但往往我们整个微服务架构中会有几十个甚至几百个微服务，我们不可能都使用手动去启停，那样效率很低，维护量也很大。</p><a id="more"></a><p>因此我们需要一个自动化的工具帮助我们管理容器。本篇使用的是<code>docker-compose</code> 。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p> <code>Compose</code> 支持 Linux、macOS、Windows 10 三大平台.</p><p><code>Compose</code> 可以通过 Python 的包管理工具 <code>pip</code> 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。</p></blockquote><p>我是Centos 7因此我使用的是二进制包的形式安装。使用如下命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>安装完成后检查<code>docker-compose</code>版本OK就好了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV ~]<span class="comment"># docker-compose -v</span></span><br><span class="line">docker-compose version 1.23.1, build b02f1306</span><br></pre></td></tr></table></figure><h2 id="编排微服务"><a href="#编排微服务" class="headerlink" title="编排微服务"></a>编排微服务</h2><p>使用<code>docker-compose</code>编排微服务大致步骤如下：</p><p>1、编写各服务的<code>Dockerfile</code> </p><p>2、编写<code>docker-compose.yml</code> 定义组成应用程序的服务及各服务的依赖，网络配置等</p><p>3、运行<code>docker-compose up</code>命令，启动并运行整个项目</p><p>本例项目源码使用之前做过的项目，把Eureka，provider-user，consumer-movie进行编排。源码查看：<a href="https://github.com/hjwjw/Spring-Cloud-With-Docker-Practice-Demo/tree/master/microservice-discovery-eureka" target="_blank" rel="noopener">microservice-discovery-eureka</a>、<a href="https://github.com/hjwjw/Spring-Cloud-With-Docker-Practice-Demo/tree/master/microservice-simple-provider-user" target="_blank" rel="noopener">microservice-simple-provider-user</a>、<a href="https://github.com/hjwjw/Spring-Cloud-With-Docker-Practice-Demo/tree/master/microservice-simple-consumer-movie" target="_blank" rel="noopener">microservice-simple-consumer-movie</a></p><p>目录结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">├─.idea</span><br><span class="line">│  ├─inspectionProfiles</span><br><span class="line">│  └─libraries</span><br><span class="line">├─microservice-discovery-eureka</span><br><span class="line">│  ├─src</span><br><span class="line">│  │  └─main</span><br><span class="line">│  │      ├─java</span><br><span class="line">│  │      │  └─com</span><br><span class="line">│  │      │      └─hjwzyy</span><br><span class="line">│  │      │          └─META-INF</span><br><span class="line">│  │      └─resources</span><br><span class="line">|  └─Dockerfile</span><br><span class="line">|  └─pom.xml</span><br><span class="line">├─microservice-simple-consumer-movie</span><br><span class="line">│  ├─src</span><br><span class="line">│  │  └─main</span><br><span class="line">│  │      ├─java</span><br><span class="line">│  │      │  └─com</span><br><span class="line">│  │      │      └─hjwzyy</span><br><span class="line">│  │      │          ├─contorllers</span><br><span class="line">│  │      │          └─pojo</span><br><span class="line">│  │      └─resources</span><br><span class="line">│  │          ├─static</span><br><span class="line">│  │          └─templates</span><br><span class="line">|  └─Dockerfile</span><br><span class="line">|  └─pom.xml</span><br><span class="line">├─microservice-simple-provider-user</span><br><span class="line">│  ├─src</span><br><span class="line">│  │  └─main</span><br><span class="line">│  │      ├─java</span><br><span class="line">│  │      │  └─com</span><br><span class="line">│  │      │      └─hjwzyy</span><br><span class="line">│  │      │          ├─contorllers</span><br><span class="line">│  │      │          ├─dao</span><br><span class="line">│  │      │          └─pojo</span><br><span class="line">│  │      └─resources</span><br><span class="line">|  └─Dockerfile</span><br><span class="line">|  └─pom.xml</span><br><span class="line">├─ docker-compose.yml</span><br><span class="line">├─ pom.xml</span><br></pre></td></tr></table></figure><hr><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>这三个微服务的Dockerfile文件如何编写可以参考前面的博客：<a href="https://hjwjw.gitee.io/posts/719142df/" target="_blank" rel="noopener">使用Maven构建微服务的Docker镜像</a>  这里不再赘述。</p><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><p>docker-compose.yml 文件的编写是关键。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span><span class="comment"># docker-compose 版本</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">    eureka:</span><span class="comment"># 服务名</span></span><br><span class="line"><span class="attr">        build:</span></span><br><span class="line"><span class="attr">          context:</span> <span class="string">./microservice-discovery-eureka</span><span class="comment"># Dockerfile 文件所在路径</span></span><br><span class="line"><span class="attr">          dockerfile:</span> <span class="string">Dockerfile</span>   <span class="comment"># Dockerfile 文件名</span></span><br><span class="line"><span class="attr">          args:</span></span><br><span class="line"><span class="attr">            JAR_FILE:</span> <span class="string">target/microservice-discovery-eureka-0.0.1-SNAPSHOT.jar</span>   <span class="comment"># 构建参数传递</span></span><br><span class="line"><span class="attr">        ports:</span>  <span class="comment"># 开放端口</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">"8761:8761"</span></span><br><span class="line"><span class="attr">    microservice-simple-provider-user:</span></span><br><span class="line"><span class="attr">        build:</span></span><br><span class="line"><span class="attr">          context:</span> <span class="string">./microservice-simple-provider-user</span></span><br><span class="line"><span class="attr">          dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line"><span class="attr">          args:</span></span><br><span class="line"><span class="attr">            JAR_FILE:</span> <span class="string">target/microservice-simple-provider-user-0.0.1-SNAPSHOT.jar</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">"8010:8010"</span></span><br><span class="line"><span class="attr">    microservice-simple-consumer-movie:</span></span><br><span class="line"><span class="attr">        build:</span></span><br><span class="line"><span class="attr">          context:</span> <span class="string">./microservice-simple-consumer-movie</span></span><br><span class="line"><span class="attr">          dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line"><span class="attr">          args:</span></span><br><span class="line"><span class="attr">            JAR_FILE:</span> <span class="string">target/microservice-simple-consumer-movie-0.0.1-SNAPSHOT.jar</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">"8011:8011"</span></span><br><span class="line"><span class="attr">        depends_on:</span><span class="comment"># 依赖</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">microservice-simple-provider-user</span></span><br></pre></td></tr></table></figure><p>以上是使用最简单的方式进行配置。</p><p><code>build</code>  : 使用 <code>build</code> 并指定<code>Dockerfile</code> ，docker-compose 会根据<code>Dockerfile</code> 构建镜像。这里使用了<code>args</code> 传入了<code>Dockerfile</code> 构建镜像时需要的参数，前面通过 maven 构建镜像时，这个参数是从<code>pom</code>文件中传入的。这里的构建不通过 maven ，因此需要单独在<code>docker-compose.yml</code> 中传入<code>args</code>，否则会由于缺少参数而构建镜像失败。</p><p><code>depends_on</code> : 表示这个服务依赖于某个服务，如microservice-simple-consumer-movie 是依赖 microservice-simple-provider-user 的，provider  启动了，consumer 才能访问到数据。因此如果配置了依赖的服务，<code>docker-compose</code> 会先启动被依赖的服务。</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>上面的步骤做完之后，就可以启动Docker-compse了。只需要简单的一条命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p>docker-compose 会根据<code>docker-compose.yml</code> 配置的内容进行镜像的构建并启动。</p><h3 id="docker-compose-配置"><a href="#docker-compose-配置" class="headerlink" title="docker-compose 配置"></a>docker-compose 配置</h3><p>Docker-compose 的具体用法 及 yml 文件的具体配置可以参考  : <a href="https://docker_practice.gitee.io/compose/compose_file.html" target="_blank" rel="noopener">https://docker_practice.gitee.io/compose/compose_file.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Maven构建微服务的Docker镜像</title>
      <link href="/posts/719142df/"/>
      <url>/posts/719142df/</url>
      
        <content type="html"><![CDATA[<p>在预习了Docker的知识后，开始对微服务进行Docker容器化改造。</p><a id="more"></a><p>本篇内容前提：</p><ul><li>已安装 Docker 的服务器环境</li><li>Docker 基础操作</li></ul><p>Docker 的基础学习笔记可以在本博客 Docker 分类中查看。</p><hr><p>我使用 Maven 来构建 Docker 镜像。Maven 有几个Docker 插件可以使用，这里使用的是 由<code>Spotify</code> 公司开发的 Maven 插件。</p><blockquote><p>插件名称：dockerfile-maven  地址：<a href="https://github.com/spotify/dockerfile-maven" target="_blank" rel="noopener">https://github.com/spotify/dockerfile-maven</a></p></blockquote><p>在它前面还有一个”哥哥” <code>docker-maven-plugin</code>  这个插件已经不推荐使用了。<code>docker-maven-plugin</code>插件可以不使用<code>Dockerfile</code> 而直接在<code>pom.xml</code>中来构建镜像，但随着时间的推移<code>Spotify</code>公司也意识到这种方式可能导致很多不必要的混淆，使用<code>Dockerfile</code>构建镜像是最简单的方法，因此但这种方式不推荐,这个项目也不会再增加新功能，仅限错误修复。所以我一开始就学习的<code>dockerfile-maven</code> 插件。它会连接远程Docker，只要一个命令就能把本地的jar包打成Docker镜像，命令执行完毕后，服务器上就会有刚打包好的镜像，此时再执行该镜像即可。</p><p>下面使用<code>dockerfil-maven</code>来构建镜像，以前面的 <code>microservice-consumer-movie</code> 项目为例。</p><h2 id="添加属性"><a href="#添加属性" class="headerlink" title="添加属性"></a>添加属性</h2><p>在添加插件前先在<code>pom.xml</code>中添加一些属性，方便配置，在<code>pom</code>中添加如下<code>properties</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>hjwjw<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">docker.plugin.version</span>&gt;</span>1.4.9<span class="tag">&lt;/<span class="name">docker.plugin.version</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h2><p>在项目的pom.xml中添加<code>dockerfile-maven</code>插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dockerfile-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;docker.plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">id</span>&gt;</span>default<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--&lt;goal&gt;push&lt;/goal&gt;--&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tag</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">buildArgs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">JAR_FILE</span>&gt;</span>target/$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">JAR_FILE</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">buildArgs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>插件配置说明</strong></p><ul><li>repository : 用于命名构建镜像的存储库，生成的镜像名如：<code>hjwjw/microservice-discovery-eureka</code>。</li><li>tag : 是标签名称，这里指定标签名为pom中的<code>${project.version}</code> ，这里即是：0.0.1-SNAPSHOT</li><li>buildArgs : 为构建参数，可以在构建里将参数传到Dockerfile中，<code>${project.build.finalName}</code> 表示打包后jar包的名称。这里是将jar的路径传递到Dockerfile中。</li><li>executions : 这里设置把插件的<code>goal</code> 绑定到某个<code>phase</code> 上，实现打包完成后自动构建镜像并推送，这里没有配置远程仓库因此不推送到远程仓库。</li></ul><blockquote><p>phase 和 goal 可以这样理解：maven 命令格式是：mvn phase:goal ,例如mvn package dockerfile:build .那么，package 和 dockerfile 都是 phase ,build则是 goal 。</p></blockquote><h2 id="添加Dockerfile"><a href="#添加Dockerfile" class="headerlink" title="添加Dockerfile"></a>添加Dockerfile</h2><p>在项目根目录添加<code>Dockerfile</code> 文件，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM livingobjects/jre8</span><br><span class="line">VOLUME /tmp</span><br><span class="line">ARG JAR_FILE</span><br><span class="line">ADD <span class="variable">$&#123;JAR_FILE&#125;</span> app.jar</span><br><span class="line">RUN bash -c <span class="string">'touch /app.jar'</span></span><br><span class="line">EXPOSE 8010</span><br><span class="line">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-Djava.security.egd=file:dev/./urandom"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span><br></pre></td></tr></table></figure><blockquote><p>livingobjects/jre8 是一个比较小的jre8的基础镜像，构建镜像时会快些。</p></blockquote><p>Dockerfile 的参数在 <a href="https://hjwjw.gitee.io/posts/1ef71e38/" target="_blank" rel="noopener">Dockerfile实践</a> 中已经写过，可以在本博客搜索查看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ARG JAR_FILE</span><br><span class="line">ADD $&#123;JAR_FILE&#125; app.jar</span><br></pre></td></tr></table></figure><p>表示接收构建参数<code>JAR_FILE</code> 这个参数在前面的<code>pom.xml</code>中配置插件时已经添加。参数内容为jar 的的路径，<code>${JAR_FILE}</code>则是使用传递进来的参数。</p><h2 id="开启Docker远程"><a href="#开启Docker远程" class="headerlink" title="开启Docker远程"></a>开启Docker远程</h2><p>开启Docker远程方法可参考博客：<a href="https://hjwjw.gitee.io/posts/b035bcd6/#%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE" target="_blank" rel="noopener">Docker安装配置</a></p><p>开启后在本机上配置一个环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOCKER_HOST=tcp://ip:2375</span><br></pre></td></tr></table></figure><p>IP 为Docker 所安装的服务器IP ，端口一般没有修改过默认会是<code>2375</code></p><p><code>dockerfile-maven</code> 插件就是通过在本机操作 Docker api 构建镜像的，因此本机上不需要安装Docker，能够访问到Docker服务器即可。</p><h2 id="构建image"><a href="#构建image" class="headerlink" title="构建image"></a>构建image</h2><p>前面的配置都完成后，在IDE的命令窗口只需要一个命令即可实现对项目的打包及构建镜像到Docker服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure><p>执行命令过程如图：</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507141324.png" alt="打包并构建image"></p><p>可以看到按Dockerfile一步步构建镜像了，执行完成后我们就可以在Docker服务器上查看新的image，如下：</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507141342.png" alt="docker imges"></p><p>至此，Docker 构建微服务镜像完成。源码： <a href="https://github.com/hjwjw/Spring-Cloud-With-Docker-Practice-Demo/tree/master/microservice-consumer-movie" target="_blank" rel="noopener">microservice-customer-movie</a></p><p>镜像运行可以参考本博客分类：<a href="https://hjwjw.gitee.io/categories/Docker/" target="_blank" rel="noopener">Docker</a></p><h2 id="镜像tag"><a href="#镜像tag" class="headerlink" title="镜像tag"></a>镜像tag</h2><p>在使用上面的方式生成镜像时，我们前面在<code>pom.xml</code> 中已经配置了构建时的<code>tag</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tag</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果不配置这个参数，默认生成的<code>tag</code> 是 <code>latest</code>。</p><p>有时我们想修改成自己的<code>tag</code> ，可以通过<code>dockerfile:tag</code> 修改，但需要先把 <code>pom.xml</code> 中指定的<code>tag</code> 配置去掉。在<code>pom.xml</code>中删除如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tag</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着使用如下<code>maven</code> 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn dockerfile:tag -Ddockerfile.tag=config</span><br></pre></td></tr></table></figure><p>执行完成后Docker 服务器上会出现一个基于<code>hjwjw/microservice-consumer-movie:0.0.1-SNAPSHOT</code>镜像的<code>tag</code> 为<code>config</code> 的新镜像。</p><p>同样的，如果在<code>pom</code>中没有指定<code>tag</code>，在使用<code>dockerfile:build</code> 构建新镜像时也可以指定<code>tag</code>名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn dockerfile:build -Ddockerfile.tag=consumer</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dockerfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git合并指定commits</title>
      <link href="/posts/2fce1aeb/"/>
      <url>/posts/2fce1aeb/</url>
      
        <content type="html"><![CDATA[<p>在使用 <code>git</code> 时我们可能会遇到这样的需求： 想要合并某个分支下的某个特定的 <code>commits</code></p><p>如我想把 <code>feature</code> 分支上的 <code>commit</code>  eef67189e9cc73f9bcb4af416ae8248f8e65dca4  合并到我的主分支中。这时我可以使用 <code>git cherry-pick</code> 命令来实现。</p><p>首先切换到主分支,然后使用命令加上指定<code>commit</code> 的Revision Number</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git cherry-pick eef67189e9cc73f9bcb4af416ae8248f8e65dca4</span><br></pre></td></tr></table></figure><p>操作完后在<code>master</code> 分支上会出现一个新的<code>commit</code>。这样就可以实现我们上面的需求了。</p><p>有时可能不只需要合并一个<code>commit</code> 而是一系列相连的 <code>commits</code>，这时我们可以使用<code>rebase</code> 会更适合。</p><p>如我需要把<code>featrue</code> 分支的 <code>commit</code> 992e6c 到 dc40bb  合并到主分支.</p><p>首先需要基于<code>featrue</code> 创建一个新的分支，并指明最后一个<code>commit</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b newbranch dc40bb</span><br></pre></td></tr></table></figure><p>然后 <code>rebase</code> 这个新分支的<code>commit</code> 到 <code>master</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --onto master 992e6c^</span><br></pre></td></tr></table></figure><p><code>992e6c ^</code> 表示从哪个特定的<code>commit</code> 开始 。</p><p>这样就实现了我的第二个需求。</p>]]></content>
      
      
      <categories>
          
          <category> TortoiseGit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TortoiseGit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker错误集合</title>
      <link href="/posts/9d44b524/"/>
      <url>/posts/9d44b524/</url>
      
        <content type="html"><![CDATA[<p>本文收集我在使用Docker时遇到的一些错误及解决办法。</p><a id="more"></a><hr><blockquote><p>Could not acquire image ID or digest following build</p></blockquote><p>在使用Docker构建微服务镜像时出现的错误。第一天构建好好的，第二天就出现了这样的错误。通过百度这条错误的信息非常少，只在 <code>stackoverflow.com</code> 上找到一条，问题指向了<a href="https://github.com/spotify/dockerfile-maven" target="_blank" rel="noopener"> dockerfile-maven</a> 插件，我确实使用了这个插件来，并通过远程的方式来构建我的微服务镜像。之前使用的是它的兄弟 <a href="https://github.com/spotify/docker-maven-plugin" target="_blank" rel="noopener">docker-maven-plugin </a>插件。在 <code>dockerfile-maven</code> 的 <a href="https://github.com/spotify/dockerfile-maven/issues/25#issuecomment-310667051" target="_blank" rel="noopener">issues</a> 中有人提到了这个错误，但解决方法是与 <code>.dockerignore</code> 有关，但在我的项目中并没有使用<code>.dockerignore</code> ，这就很尴尬了，除了这里网上再也找不出来这个错误解决方法了，使出终极大法重装 Doker ，这个错误就消失了，，</p><hr><blockquote><p>Exception caught: failed to create rwlayer: lstat /var/lib/docker/overlay2/87edaf82c30c5d40e74518162047eb095d0813c4dee1ba00ef026d1bb88bf100: no such file or directory</p></blockquote><p>我在使用Docker构建镜像是出现了空间不足的提示，通过 <code>df -h</code> 发现 <code>var</code>  目录已经100%了。于是在目录下通过<code>du -</code>sh 看这个目录下而到底是那个文件占了这么多空间。最后找到是 <code>/var/lib/docker/overlay2</code> 目录，打开里面都是一些类似一串数字字母命名的文件，我以为是缓存的文件，直接全部删除了，，后来才知道是一些存储驱动相关的文件。删除之后构建镜像就出现了上面的报错。解决方法是使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV microservice-config-server]<span class="comment"># docker system prune -a</span></span><br><span class="line">WARNING! This will remove:</span><br><span class="line">        - all stopped containers</span><br><span class="line">        - all networks not used by at least one container</span><br><span class="line">        - all images without at least one container associated to them</span><br><span class="line">        - all build cache</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] y</span><br></pre></td></tr></table></figure><p>可以看到命令以上命令会删除很多数据，包括已经下载的镜像都会被删除。全部删除之后再重新构建镜像就可以了</p><hr>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker的Registry管理</title>
      <link href="/posts/7b07bae5/"/>
      <url>/posts/7b07bae5/</url>
      
        <content type="html"><![CDATA[<p> 回顾之前的笔记，给Registry的定义是：</p><blockquote><p>Docker Registry 是一个集中存储与分发镜像的服务。构建完docker镜像后，就可在当前宿主机上运行。但如果想要在其它机器上运行这个镜像，就需要手动复制，此时可以借助Docker Registry来避免镜像的手动复制，其它人可以直接从 Registry 中将这个镜像 pull 到自己的本机中。</p></blockquote><a id="more"></a><p>Docker的架构图：</p><p><img src="https://ws1.sinaimg.cn/large/005RGBbLly1fvkr26xdi8j30ed0awac7.jpg" alt="Docker架构图"></p><p>Docker Registry可分为公有与私有。最常用的Docker Registry就是官方的Docker Hub，这也是默认的Docker Registry。国内仓库有：daocloud，时速去，aliyun等。</p><p>##　查找镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV bin]<span class="comment"># docker search whalesay</span></span><br><span class="line">NAME                            DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">docker/whalesay                 An image <span class="keyword">for</span> use <span class="keyword">in</span> the Docker demo tutorial    644                                     </span><br><span class="line">mendlik/docker-whalesay         Docker whalesay image from training material…   7                                       [OK]</span><br><span class="line">nikovirtala/whalesay            Tiny Go web service to <span class="built_in">print</span> Moby Dock ASCII…   1                                       [OK]</span><br><span class="line">milanfort/whalesay              Modified docker/whalesay image that outputs …   1                                       </span><br><span class="line">swinton/whalesay                whalesay, innit                                 1</span><br></pre></td></tr></table></figure><p>上述命令在Docker Hub 仓库中查找 <code>whalesay</code> 镜像。下面列出了在仓库中查询到的所有镜像信息如名字，描述，星，是否官方等。一般官方的星是最多的。</p><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV bin]<span class="comment"># docker pull docker/whalesay</span></span><br></pre></td></tr></table></figure><p>执行命令 docker 会把指定的镜像拉取到我们本地，使用<code>docker images</code>  可以查看到是否获取到镜像。</p><p>可以运行一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV bin]<span class="comment"># docker run docker/whalesay cowsay Docker is cool! </span></span><br><span class="line"> _________________ </span><br><span class="line">&lt; Docker is cool! &gt;</span><br><span class="line"> ----------------- </span><br><span class="line">    \</span><br><span class="line">     \</span><br><span class="line">      \     </span><br><span class="line">                    <span class="comment">##        .            </span></span><br><span class="line">              <span class="comment">## ## ##       ==            </span></span><br><span class="line">           <span class="comment">## ## ## ##      ===            </span></span><br><span class="line">       /<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span>___/ ===        </span><br><span class="line">  ~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~   </span><br><span class="line">       \______ o          __/            </span><br><span class="line">        \    \        __/             </span><br><span class="line">          \____\______/</span><br></pre></td></tr></table></figure><h2 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h2><p>这里就使用原先拉取下来的这个镜像做测试，更改其<code>tag</code>后 push 到仓库中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV bin]<span class="comment"># docker tag docker/whalesay hjwjw/whalesay</span></span><br><span class="line">[root@HJWDEV bin]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-docker        latest              be221a20a4d7        6 weeks ago         4.41MB</span><br><span class="line">nginx-fun           latest              1d1aaf738af1        6 weeks ago         109MB</span><br><span class="line">ubuntu              latest              cd6d8154f1e1        2 months ago        84.1MB</span><br><span class="line">docker/whalesay     latest              6b362a9f73eb        3 years ago         247MB</span><br><span class="line">hjwjw/whalesay      latest              6b362a9f73eb        3 years ago         247MB</span><br></pre></td></tr></table></figure><p>可以看到产生了一个新的镜像 <code>hjwjw/whalesay</code></p><p> 在推送新镜像到仓库前需要登陆，登陆账号可以在 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a> 上注册</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV bin]<span class="comment"># docker login</span></span><br><span class="line">Login with your Docker ID to push and pull images from Docker Hub. If you don<span class="string">'t have a Docker ID, head over to https://hub.docker.com to create one.</span></span><br><span class="line"><span class="string">Username:</span></span><br></pre></td></tr></table></figure><p>登陆成功后就可以进行推送了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV bin]<span class="comment"># docker push hjwjw/whalesay</span></span><br></pre></td></tr></table></figure><p>推送成功后可以登陆 Docker Hub 查看。其它人可以查询到并拉取到自己本地运行。</p><p>或者直接使用这种方式登陆</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login --username=cheergoivan registry.cn-hangzhou.aliyuncs.com</span><br></pre></td></tr></table></figure><h2 id="私有仓库"><a href="#私有仓库" class="headerlink" title="私有仓库"></a>私有仓库</h2><p>上面说的都是在公有仓库，相比Docker Hub 私有仓库有以下优势：</p><ul><li>节省带宽，对于私有仓库已有的镜像无需再从Docker Hub 下载。</li><li>更加安全</li><li>便于内部镜像的统一管理</li></ul><p>下面使用<code>Docker Registry 2.0</code>搭建一个私有仓库并上传一个镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV ~]<span class="comment"># docker run -d -p 5000:5000 --name registry2 registry:2</span></span><br></pre></td></tr></table></figure><p>上述命令启动一个Docker Registry 2.0 .</p><p>默认情况下，会将私有仓库镜像存放于容器内的<code>/tmp/registry</code>目录下，这样如果容器被删除，则存放于容器中的镜像也会丢失。<br>所以一般情况下会指定本地一个目录挂载到容器内的<code>/tmp/registry</code>下，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run -d --name=my_registry -p 5000:5000 -v /opt/data/registry:/tmp/registry docker.io/registry:2.2</span></span><br><span class="line">9fe45329bda17f61da04e6e8d2faf124fb22665a25270421bb8979a419809446</span><br></pre></td></tr></table></figure><p>下面修改一个镜像的<code>tag</code> 并把它推送到我们的私有仓库中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV ~]<span class="comment"># docker tag nginx-fun localhost:5000/hjwjw/nginx-fun</span></span><br></pre></td></tr></table></figure><p>因为Docker Hub 是默认的Docker Registry，所以我们需要修改镜像的 <code>tag</code> 才能推送到自己的私有仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV ~]<span class="comment"># docker push localhost:5000/hjwjw/nginx-fun</span></span><br></pre></td></tr></table></figure><p>推送成功后我们可以通过这个命令去查看 Docker registry 2中是否存在刚刚推送的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV ~]<span class="comment"># curl -X GET http://127.0.0.1:5000/v2/_catalog</span></span><br><span class="line">&#123;<span class="string">"repositories"</span>:[<span class="string">"hjwjw/nginx-fun"</span>]&#125;</span><br></pre></td></tr></table></figure><p>也可以在浏览器中访问上述地址查看</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker的数据管理</title>
      <link href="/posts/c67fd481/"/>
      <url>/posts/c67fd481/</url>
      
        <content type="html"><![CDATA[<p>我们知道容器中的任何修改默认都是不会被保存的。想要保存容器运行时产生的数据，我们需要使用<code>Volume</code>数据卷技术来提供独立于容器外的持久化存储，它也可以提供容器与容器之前的共享数据。简单来说我感觉就是挂载，把本地磁盘中的某个目录挂载到容器中的某个目录，这样容器对这个目录的任何操作相当与操作我们本地的相应目录。</p><p>这里有三种方式使用<code>Volume</code>进行容器的持久存储。</p><a id="more"></a><h2 id="从容器挂载"><a href="#从容器挂载" class="headerlink" title="从容器挂载"></a>从容器挂载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV docker]<span class="comment"># docker run -d --name nginx-fun -v /usr/share/nginx/html nginx-fun</span></span><br></pre></td></tr></table></figure><p><code>--name</code>  指定容器名</p><p><code>-v</code> 需要挂载的目录</p><p>上述命令是创建一个名为nginx-fun容器并加载 <code>数据卷</code> 到容器的 <code>/usr/share/nginx/html</code> 目录。也就是把我们本地的某个目录挂载到容器中的 <code>/usr/share/nginx/html</code>  目录中，具体是我们本地的哪个目录不需要我们指定。这也是为了保证Docker的可移植性，因为不是每个宿主机上都有对应的目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV docker]<span class="comment"># docker inspect nginx-fun</span></span><br></pre></td></tr></table></figure><p>通过上述命令我们可以知道使用的是本地的哪个目录，找到如下信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Mounts"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"Type"</span>: <span class="string">"volume"</span>,</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"388f5df2b08fa24b75358acdccf41ac987971b5c9edb02c693b4bfd8929a09fb"</span>,</span><br><span class="line">                <span class="string">"Source"</span>: <span class="string">"/var/lib/docker/volumes/388f5df2b08fa24b75358acdccf41ac987971b5c9edb02c693b4bfd8929a09fb/_data"</span>,</span><br><span class="line">                <span class="string">"Destination"</span>: <span class="string">"/usr/share/nginx/html"</span>,</span><br><span class="line">                <span class="string">"Driver"</span>: <span class="string">"local"</span>,</span><br><span class="line">                <span class="string">"Mode"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="string">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">"Propagation"</span>: <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><p>可以看到<code>Source</code> 指向的地址就是我们本地对应的目录，我们可以进入这个目录查看:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV docker]<span class="comment"># cd /var/lib/docker/volumes/388f5df2b08fa24b75358acdccf41ac987971b5c9edb02c693b4bfd8929a09fb/_data</span></span><br><span class="line">[root@HJWDEV _data]<span class="comment"># ll</span></span><br><span class="line">总用量 8</span><br><span class="line">-rw-r--r--. 1 root root 494 9月  25 23:04 50x.html</span><br><span class="line">-rw-r--r--. 1 root root  54 9月  26 10:53 index.html</span><br></pre></td></tr></table></figure><p>可以看到目录中有两个文件，是nginx-fun容器中<code>/usr/share/nginx/html</code>目录的默认文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV _data]<span class="comment"># cat index.html</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Docker is Fun!&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@HJWDEV _data]<span class="comment"># vi index.html</span></span><br></pre></td></tr></table></figure><p>我们查看<code>index.html</code>中的默认内容并修改成如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Docker is Fun!&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;Docker is interesing&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>接着进入容器中的<code>/usr/share/nginx/html</code>目录，看文件是否被修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV _data]<span class="comment"># docker exec -it nginx-fun /bin/bash</span></span><br><span class="line">root@15f556dcc7e5:/<span class="comment"># cd /usr/share/nginx/html</span></span><br><span class="line">root@15f556dcc7e5:/usr/share/nginx/html<span class="comment"># ls</span></span><br><span class="line">50x.html  index.html</span><br><span class="line">root@15f556dcc7e5:/usr/share/nginx/html<span class="comment"># cat index.html </span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Docker is Fun!&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;Docker is interesing&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">root@15f556dcc7e5:/usr/share/nginx/html<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>可以看到容器中的文件也同步修改了。<strong>同样的如果容器中<code>/usr/share/nginx/html</code> 中的文件被修改了，宿主机中的对应目录文件也会跟着变动</strong>。</p><p>这种方式虽然实现了数据的持久存储，但要查询宿主机中挂载的目录比较麻烦，下面这种方式则可以直接指定宿主机中的需要挂载的目录。</p><h2 id="从宿主机挂载"><a href="#从宿主机挂载" class="headerlink" title="从宿主机挂载"></a>从宿主机挂载</h2><h3 id="挂载目录"><a href="#挂载目录" class="headerlink" title="挂载目录"></a>挂载目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV docker]<span class="comment"># touch volume/index.html</span></span><br><span class="line">[root@HJWDEV docker]<span class="comment"># vi volume/index.html</span></span><br></pre></td></tr></table></figure><p>首页我们在<code>docker/volume</code> 目录新建一个<code>index.html</code>文件，写入以下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is volume</span><br></pre></td></tr></table></figure><p>接着启动一个nginx容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV docker]<span class="comment"># docker run -p 80:80 -d -v $PWD/volume:/usr/share/nginx/html nginx-fun</span></span><br></pre></td></tr></table></figure><p><code>$PWD</code>    表示当前目录路径</p><p>上面的命令把宿主机的<code>$PWD/volume</code> 目录挂载到容器中的 <code>/usr/share/nginx/html</code> 目录。<code>$PWD/volume</code>目录必须使用绝对路径且是存在的，不然会报错。</p><p>访问nginx的首页：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV docker]<span class="comment"># curl http://localhost/</span></span><br><span class="line">this is volume</span><br></pre></td></tr></table></figure><p>可以看到输出的内容就是我们宿主机挂载目录中的<code>index.html</code>的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV docker]<span class="comment"># vi volume/index.htm</span></span><br></pre></td></tr></table></figure><p>我们重新修改一下宿主机挂载目录下的<code>index.html</code>文件，修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is volume,is cool!</span><br></pre></td></tr></table></figure><p>我们直接进入容器内查看 <code>/usr/share/nginx/html</code>目录中的<code>index.html</code>是否同步被修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV docker]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES</span><br><span class="line">a3aad9e00870        nginx-fun           <span class="string">"nginx -g 'daemon of…"</span>   13 minutes ago      Up 13 minutes       0.0.0.0:80-&gt;80/tcp   nostalgic_booth</span><br><span class="line">[root@HJWDEV docker]<span class="comment"># docker exec -it a3aad9e00870 /bin/bash</span></span><br><span class="line">root@a3aad9e00870:/<span class="comment"># cd /usr/share/nginx/html</span></span><br><span class="line">root@a3aad9e00870:/usr/share/nginx/html<span class="comment"># ls</span></span><br><span class="line">index.html</span><br><span class="line">root@a3aad9e00870:/usr/share/nginx/html<span class="comment"># cat index.html</span></span><br><span class="line">this is volume,is cool!</span><br></pre></td></tr></table></figure><p>可以看到容器中的文件也同步被修改了。</p><hr><h3 id="挂载文件"><a href="#挂载文件" class="headerlink" title="挂载文件"></a>挂载文件</h3><p>还有一种方式是把宿主机的一个文件挂载到容器中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV docker]<span class="comment"># docker run --rm -it -v $PWD/volume/bash_history.txt:/root/.bash_history nginx-fun /bin/bash</span></span><br><span class="line">root@6b22a51db2ee:/<span class="comment"># cd /usr/share/nginx/html</span></span><br><span class="line">root@6b22a51db2ee:/usr/share/nginx/html<span class="comment"># ls</span></span><br><span class="line">50x.html  index.html</span><br><span class="line">root@6b22a51db2ee:/usr/share/nginx/html<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[root@HJWDEV docker]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">[root@HJWDEV docker]<span class="comment"># cat volume/bash_history.txt </span></span><br><span class="line"><span class="built_in">cd</span> /usr/share/nginx/html</span><br><span class="line">ls</span><br><span class="line">cat index.html</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p><code>--rm</code>     表示退出进程后自动删除容器，可以看到第5 行中<code>exit</code>后再 <code>docker ps</code> 显示没有运行的容器了</p><p><code>-it</code>        分配一个伪终端并打开交互模式</p><p>上述命令把宿主机中的<code>$PWD/volume/bash_history.txt</code> 文件挂载到容器中的 <code>/root/.bash_history</code> 文件。 <code>/root/.bash_history</code>  文件中记录的是容器内使用命令的历史记录，因此容器中使用过的命令同样也会写入宿主机的<code>$PWD/volume/bash_history.txt</code> 文件中。</p><h2 id="共享数据卷容器"><a href="#共享数据卷容器" class="headerlink" title="共享数据卷容器"></a>共享数据卷容器</h2><p>如果有一些持续更新的数据需要在容器之间共享，我们可以使用数据卷容器。<code>数据卷容器</code> 其实就是一个正常的容器，专门用来提供数据卷供其它容器挂载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV docker]<span class="comment"># docker run -it -v /opt/dbdata --name dbdata ubuntu /bin/bash</span></span><br><span class="line">root@3842c0845e26:/<span class="comment"># cd /opt/dbdata</span></span><br><span class="line">root@3842c0845e26:/opt/dbdata<span class="comment"># touch db.properties</span></span><br><span class="line">root@3842c0845e26:/opt/dbdata<span class="comment"># exit</span></span><br></pre></td></tr></table></figure><p>通过上述命令我们创建一个数据卷容器，在容器的<code>/opt/dbdata</code> 目录创建一个新文件 <code>db.properties</code></p><p>通过 <code>docker inspect</code> 命令查看容器挂载的宿主机目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV docker]<span class="comment"># docker inspect dbdata</span></span><br></pre></td></tr></table></figure><p>可以看到宿主机的目录如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Mounts"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"Type"</span>: <span class="string">"volume"</span>,</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"01eb6e6a162ece43abc601783805d89a0a0e871cf7c612bad28e1858ae7606f8"</span>,</span><br><span class="line">                <span class="string">"Source"</span>: <span class="string">"/var/lib/docker/volumes/01eb6e6a162ece43abc601783805d89a0a0e871cf7c612bad28e1858ae7606f8/_data"</span>,</span><br><span class="line">                <span class="string">"Destination"</span>: <span class="string">"/opt/dbdata"</span>,</span><br><span class="line">                <span class="string">"Driver"</span>: <span class="string">"local"</span>,</span><br><span class="line">                <span class="string">"Mode"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="string">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">"Propagation"</span>: <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><p>再创建一个名为<code>vol_a</code> 的容器并通过 <code>--volumes-from</code> 命令挂载 <code>dbdata</code> 容器 。进入<code>vol_a</code> 容器查看<code>/opt/dbdata</code> 目录可以看到存在  <code>dbdata</code> 容器中创建的文件，如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV docker]<span class="comment"># docker run -it --name vol_a --volumes-from dbdata ubuntu /bin/bash</span></span><br><span class="line">root@90f972394243:/<span class="comment"># cd /opt/dbdata/</span></span><br><span class="line">root@90f972394243:/opt/dbdata<span class="comment"># ls</span></span><br><span class="line">db.properties</span><br></pre></td></tr></table></figure><p>如挂载源有多个，可以使用多次<code>--volumes-from</code></p><p>这样即实现了容器间的数据共享。</p><h2 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h2><p>如果创建容器时挂载了volume，会在类似 <code>/var/lib/docker/volumes/01eb6e6a162ece43abc601783805d89a0a0e871cf7c612bad28e1858ae7606f8/_data</code> 目录下会生成相应的文件（路径，不同版本，不同操作系统会有所不同，具体可以用docker inspect查看容器具体信息），当删除容器时，宿主机上的挂载目录时不会删除的，并且目录名称是随机字符，不知意义，所以在删除容器时，需要妥善处理容器的volume。删除容器时一并删除volume有二种方法:</p><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV docker]<span class="comment"># docker rm -v dbdata</span></span><br><span class="line">dbdata</span><br><span class="line">[root@HJWDEV docker]<span class="comment"># cd /var/lib/docker/volumes/01eb6e6a162ece43abc601783805d89a0a0e871cf7c612bad28e1858ae7606f8/_data</span></span><br><span class="line">[root@HJWDEV _data]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>使用<code>docker rm</code>  加 <code>-v</code> 参数 删除容器时会一并把 volume 删除，但这里发现目录还是存在，因为我们上面的<code>vol_a</code> 容器还在使用 <code>dbdata</code>  的挂载。所以需要把<code>vol_a</code> 也删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV docker]<span class="comment"># docker rm -v vol_a</span></span><br><span class="line">vol_a</span><br><span class="line">[root@HJWDEV docker]<span class="comment"># cd /var/lib/docker/volumes/01eb6e6a162ece43abc601783805d89a0a0e871cf7c612bad28e1858ae7606f8/_data</span></span><br><span class="line">-bash: <span class="built_in">cd</span>: /var/lib/docker/volumes/01eb6e6a162ece43abc601783805d89a0a0e871cf7c612bad28e1858ae7606f8/_data: 没有那个文件或目录</span><br><span class="line">[root@HJWDEV docker]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>这样 <code>volume</code>  的目录也会被删除了。</p><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm</span><br></pre></td></tr></table></figure><p>启动容器的时候加了 <code>-rm</code> 参数，这样在容器停止后自动删除容器以及容器所挂载的<code>volume</code>  。这种方式上<code>挂载文件</code> 这一节已经使用过。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中执行bat或shell命令</title>
      <link href="/posts/c691c44f/"/>
      <url>/posts/c691c44f/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不积跬步，无以至千里。不积小流，无以成江海。</p></blockquote><p>今天为了博客能实现自动部署，写了一个Java小程序调用cmd命令来实现自动部署hexo并备份博客。</p><a id="more"></a><p>java中提供了两种方式来调用exe或shell程序：</p><ol><li>使用<code>Runtime.getRuntime().exec()</code></li><li>使用<code>new ProcessBuilder().start()</code></li></ol><p>下面我在实际使用中的代码如下，这里使用的是<code>new ProcessBuilder().start()</code>的方式，调用cmd执行命令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deployHexo</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        String cmd = <span class="string">"cd "</span> + HEXO_DIR + <span class="string">" &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; hexo d"</span>;</span><br><span class="line">        List&lt;String&gt; cmds = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line"><span class="comment">//        cmds.add("sh");</span></span><br><span class="line">        cmds.add(<span class="string">"cmd.exe"</span>);</span><br><span class="line"><span class="comment">//        cmds.add("-c");</span></span><br><span class="line">        cmds.add(<span class="string">"/c"</span>);</span><br><span class="line">        cmds.add(cmd);</span><br><span class="line">        ProcessBuilder pb = <span class="keyword">new</span> ProcessBuilder(cmds);</span><br><span class="line">        <span class="comment">//重定向到标准输出</span></span><br><span class="line">        pb.redirectErrorStream(<span class="keyword">true</span>);</span><br><span class="line">        Process p = pb.start();</span><br><span class="line">        p.waitFor(<span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(p.getInputStream()));</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sb.append(line).append(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String result = sb.toString();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个方法会在调用后返回命令行处理的输出结果。如果是在Linux平台中调用，则把上面的5 -8行的命令改成如下即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">        cmds.add(<span class="string">"sh"</span>);</span><br><span class="line"><span class="comment">//        cmds.add("cmd.exe");</span></span><br><span class="line">        cmds.add(<span class="string">"-c"</span>);</span><br><span class="line"><span class="comment">//        cmds.add("/c");</span></span><br></pre></td></tr></table></figure><p>对<code>Runtime.getRuntime().exec()</code>方式的使用与上面的代码差别不大，将第4-10行替换成如下，另外可删除第12行即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] cmdArray =&#123;<span class="string">"cmd.exe"</span>,<span class="string">"/c"</span>,cmd&#125;;</span><br><span class="line">Process p = Runtime.getRuntime().exec(cmdArray);</span><br></pre></td></tr></table></figure><hr><p>我们使用这两种方式执行命令时，都会返回一个<code>Process</code> 并创建一个子线程。在Jdk文档中对它有下列描述：</p><blockquote><p>默认情况下，创建的子进程没有自己的终端或控制台。 其所有的标准<code>I/  O</code>（即标准输入，标准输出，标准错误）操作将被重定向到父进程，在那里他们可以经由使用所述方法获得的流进行访问<code>getOutputStream()</code>，<code>getInputStream()</code>和<code>getErrorStream()</code>。 父进程使用这些流将输入提供给子进程并从子进程获取输出。  因为一些本地平台只为标准输入和输出流提供有限的缓冲区大小，因此无法及时写入输入流或读取子进程的输出流可能导致子进程阻塞甚至死锁。</p></blockquote><p>我在使用过程中也遇到了进程阻塞的情况，因为缓冲区满了后，没有对缓冲区进行清空，数据也写不进才会阻塞卡住。因此我们在使用这两种方式执行命令操作时一定要对其子线程标准I/O进行处理。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我写博客的方式</title>
      <link href="/posts/9a5fac69/"/>
      <url>/posts/9a5fac69/</url>
      
        <content type="html"><![CDATA[<p>今天终于能舒服的写博客了</p><p>我的博客是使用Hexo静态部署，使用markdown写好文档后放到<code>_posts</code>文件夹里就可以直接部署了。但<code>_posts</code>目录里把所有文档都放在一起没有文件夹归类，因此我的思路是使用<code>Typora</code>写好笔记后存在本地指定目录，定时运行java小程序把目录里的文档全部复制到<code>_posts</code>里并调用<code>cmd</code>命令生成、发布hexo博客，最后把我的存放笔记的目录上传<code>gitee.com</code>中的仓库备份。</p><a id="more"></a><p>推荐使用<code>Typora</code>写markdown，所写即所见，很方便、很优雅。如图：</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507130513.png" alt="typora"></p><p>左侧使用目录的管理方式，可以很方便的在本地写文档。我不太喜欢博客网站中写，需要打开浏览器，访问网站等一系列操作，如断网还保存不了。</p><blockquote><p>这里分享一个使用Typora写hexo博客的小技巧，使用输入法的自定义短语生成文章头部的yaml样式,可自动生成时间 ，我们只需要填写标题，标签，分类即可。</p></blockquote><hr><p>如下图我写好的note按分类放在<code>F:/Markdown</code>目录，在这个目录下面还有一个。<code>java</code>文件与一个<code>bat</code>文件。</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507130450.png" alt="本地目录"></p><p><code>java</code>文件的作用是把该目录中的所有<code>md</code>复制到<code>hexo</code>中的<code>_posts</code>中然后调用cmd命令进行生成、发布等操作，<code>bat</code>文件的作用主要是设置系统的定时任务调用<code>java</code>小程序，最后把<code>F:Markdown</code>中的文件上传<code>gitee.com</code>仓库备份。</p><p>代码比较简单，直接上代码了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeployBlog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEXO_DIR = <span class="string">"F:/Blog/source/_posts"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MARKDOWN_DIR = <span class="string">"F:/Markdown"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;File&gt; fileList = <span class="keyword">new</span> ArrayList&lt;File&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Markdown目录中的所有md文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMarkdown</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.getName().indexOf(<span class="string">"md"</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">                fileList.add(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.getName() != <span class="string">".git"</span>) &#123;</span><br><span class="line">                File[] files = file.listFiles();</span><br><span class="line">                <span class="keyword">if</span> (files != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">                        getMarkdown(f);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将获取到的文件复制到hexo的_posts目录(先清空_posts目录)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(HEXO_DIR);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (File f1 : file.listFiles()) &#123;</span><br><span class="line">            f1.delete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (File f2 : fileList) &#123;</span><br><span class="line">            File dest = <span class="keyword">new</span> File(file, f2.getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Files.copy(f2.toPath(), dest.toPath());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行命令发布并部署</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deployHexo</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String cmd = <span class="string">"cd "</span> + HEXO_DIR + <span class="string">" &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; hexo d"</span>;</span><br><span class="line">        List&lt;String&gt; cmds = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line"><span class="comment">//        cmds.add("sh");</span></span><br><span class="line">        cmds.add(<span class="string">"cmd.exe"</span>);</span><br><span class="line"><span class="comment">//        cmds.add("-c");</span></span><br><span class="line">        cmds.add(<span class="string">"/c"</span>);</span><br><span class="line">        cmds.add(cmd);</span><br><span class="line">        System.out.println(<span class="string">"deploy..."</span>);</span><br><span class="line">        ProcessBuilder pb = <span class="keyword">new</span> ProcessBuilder(cmds);</span><br><span class="line">        <span class="comment">//重定向到标准输出</span></span><br><span class="line">        pb.redirectErrorStream(<span class="keyword">true</span>);</span><br><span class="line">        Process p = pb.start();</span><br><span class="line">        p.waitFor(<span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(p.getInputStream()));</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sb.append(line).append(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String result = sb.toString();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DeployBlog deployBlog = <span class="keyword">new</span> DeployBlog();</span><br><span class="line">        File file = <span class="keyword">new</span> File(MARKDOWN_DIR);</span><br><span class="line">        deployBlog.getMarkdown(file);</span><br><span class="line">        deployBlog.writeFile();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String cmdstr = deployBlog.deployHexo();</span><br><span class="line">            System.out.println(cmdstr);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"deploy success!"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于java中执行cmd命令可以搜索我博客中的文章：Java中执行bat或shell命令.md，其它文件操作比较简单就不多说了。最后使用一个bat完成java的调用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="built_in">echo</span> 正在更新博客...</span><br><span class="line">javac DeployBlog.java</span><br><span class="line">java DeployBlog</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 博客更新成功！访问hjwjw.github.io查看</span><br><span class="line"><span class="built_in">echo</span> ====================================</span><br><span class="line"><span class="built_in">echo</span> 正在备份笔记...</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"backup blog"</span></span><br><span class="line">git push</span><br><span class="line"><span class="built_in">echo</span> 备份成功！</span><br><span class="line">choice /T 5 /C ync /CS /D y /n</span><br></pre></td></tr></table></figure><p>bat文件内容也比较简单，最后一条是暂停5秒后才关闭窗口。</p><p>最后一步是设置windows定时任务，定时执行这个bat文件即可:joy:</p><hr><p>虽然方式算不上很高级，技术含量也不是很高，不过我感觉写博客已经很舒适了，使用自己喜欢的Markdown软件，自己的博客，本地写作，自动部署、自动备份。</p><p>写在最后：</p><p>写Markdown文档最头疼的就是图床了，这里推荐我在用的图床工具,点击直达github:<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile实践</title>
      <link href="/posts/1ef71e38/"/>
      <url>/posts/1ef71e38/</url>
      
        <content type="html"><![CDATA[<p>Dockerfile是用于构建Dcoker镜像的文件。在前面我们使用<code>docker commit</code>时也创建了一个新镜像，但使用Dockerfile构建新镜像是常用的方式。在编写好Dockerfile文件后，使用<code>docker build</code>命令即可构建一个新的镜像。Dockerfile文件的编写需要遵循一些规范。</p><a id="more"></a> <h2 id="Dockerfile的文件结构"><a href="#Dockerfile的文件结构" class="headerlink" title="Dockerfile的文件结构"></a>Dockerfile的文件结构</h2><p>Dockerfile的编写与脚本文件类似，注释使用<code>#</code>。</p><p>一般Dockerfile文件分成四个部分：基础镜像信息、维护者信息、镜像操作命令、容器启动时执行的命令</p><p>基本格式如下，分别对应上面的四个部分：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM ... </span><br><span class="line">MAINTAINER ...</span><br><span class="line">RUN ...</span><br><span class="line">CMD ...</span><br></pre></td></tr></table></figure><blockquote><p>第一条指令必须是<code>FROM</code>,如果在同一个Dockerfile文件中创建多个镜像时，可以使用多个<code>FROM</code>(每个镜像一次)</p></blockquote><h2 id="Dockerfile常用语法"><a href="#Dockerfile常用语法" class="headerlink" title="Dockerfile常用语法"></a>Dockerfile常用语法</h2><p>下面总结一些Dockerfile文件中常用的语法：</p><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td>FROM</td><td>base image(基础镜像)</td></tr><tr><td>RUN</td><td>执行命令</td></tr><tr><td>ADD</td><td>添加文件</td></tr><tr><td>ARG</td><td>设置构建参数</td></tr><tr><td>COPY</td><td>复制文件</td></tr><tr><td>CMD</td><td>执行命令</td></tr><tr><td>EXPOSE</td><td>暴露端口</td></tr><tr><td>WORKDIR</td><td>指定路径</td></tr><tr><td>MAINTAINER</td><td>维护者</td></tr><tr><td>ENV</td><td>设定环境变量</td></tr><tr><td>ENTRYPOINT</td><td>容器入口</td></tr><tr><td>USER</td><td>指定用户</td></tr><tr><td>VOLUME</td><td>mount point 指定挂载点</td></tr></tbody></table><h2 id="Dockerfile实践"><a href="#Dockerfile实践" class="headerlink" title="Dockerfile实践"></a>Dockerfile实践</h2><p>下面写一些小实例，通过编写Dockerfile来构建我们自己的镜像。</p><h3 id="创建Dockerfile"><a href="#创建Dockerfile" class="headerlink" title="创建Dockerfile"></a>创建Dockerfile</h3><p>在一个新目录下创建如下内容的Dockerfile：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"><span class="comment"># 维护者</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> hjw</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">'s/archive.ubuntu.com/mirrors.ustc.edu.cn/g'</span> /etc/apt/sources.list</span></span><br><span class="line"><span class="comment"># 执行更新命令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y nginx</span></span><br><span class="line"><span class="comment"># 将index.html复制到指定目录</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> index.html /var/www/html</span></span><br><span class="line"><span class="comment"># 容器入口命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/usr/sbin/nginx"</span>,<span class="string">"-g"</span>,<span class="string">"daemon off;"</span>]</span></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><blockquote><p>上面文件中<code>sed</code>命令主要是为了加速。替换apt-get的源地址，使用国内的镜像</p></blockquote><p>Dockerfile中写的命令作用可以看上面的注释。</p><p><code>ENTRYPOINT</code>的作用主要是指定容器入口即启动时执行的命令，后面为一个数组形式，展开后则是一条命令行。执行这条命令行的主要作用是将nginx在前台执行而不是作为守护进程执行。</p><p>另外再创建index.html文件，内容自定。</p><p>最终文件夹中的内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV ubuntu-nginx]<span class="comment"># ll</span></span><br><span class="line">总用量 4</span><br><span class="line">-rw-r--r--. 1 root root  0 9月  26 16:06 Dockerfile</span><br><span class="line">-rw-r--r--. 1 root root 54 9月  26 10:53 index.html</span><br></pre></td></tr></table></figure><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>使用<code>docker build</code>命令来构建新的镜像，build 时Docker会在指定的目录中读取Dockerfile文件，并将该目录下的所有内容发送给Docker 服务端，由服务端来构建镜像。也可以通过<code>.dockerignore</code>文件（每一行添加一条匹配模式）来让 Docker 忽略路径下的目录和文件。镜像构建命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV docker]<span class="comment"># docker build -t ubuntu-nginx ubuntu-nginx/.</span></span><br></pre></td></tr></table></figure><p><code>-t</code> 指定image标签，即镜像名称</p><p>最后为构建目录的路径，如果是在<code>ubuntu-nginx</code>目录下执行构建命令直接使用<code>.</code>即可。执行后Docker会按Dockerfile中的命令去构建我们的镜像。</p><p>执行成功后可以查看镜像是否生成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV docker]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu-nginx        latest              f6538f6564f6        15 minutes ago      186MB</span><br><span class="line">hello-docker        latest              be221a20a4d7        3 hours ago        4.41MB</span><br></pre></td></tr></table></figure><h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><p>运行<code>ubuntu-nginx</code>镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV docker]<span class="comment"># docker run -d -p 80:80 ubuntu-nginx</span></span><br></pre></td></tr></table></figure><p><code>-p</code> 表示端口映射，把nginx的 80 端口映射到宿主机的 80 端口</p><p><code>-d</code> 表示允许该Container作为守护进程来执行</p><p>运行成功后访问 宿主机+80 端口，会显示index.html的内容。</p><h2 id="镜像分层"><a href="#镜像分层" class="headerlink" title="镜像分层"></a>镜像分层</h2><p>因为镜像包含操作系统完整的 <code>root</code> 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 <a href="https://en.wikipedia.org/wiki/Union_mount" target="_blank" rel="noopener">Union FS</a> 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p><p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p><p>这种分层的方式可以让有相同内容的镜像共享某一层，可以减少存储压力。</p><p><img src="https://ws1.sinaimg.cn/large/005RGBbLly1fvo3zorhusj308d06zmxj.jpg" alt="镜像分层"></p><p>上图中下面的三层是只读层，Docker会把Dockerfile中的每一行都生成一层镜像，在image运行成一个容器时会生成一个容器层，即最上层，它是一个可读可写层。如果下面的层在容器运行中是需要被改动的，则该层会被复制到顶层，所以的改动都会在顶层进行。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dockerfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令使用记录</title>
      <link href="/posts/eae2c9c8/"/>
      <url>/posts/eae2c9c8/</url>
      
        <content type="html"><![CDATA[<p>Docker常用命令使用记录 </p><a id="more"></a><h2 id="常用命令表"><a href="#常用命令表" class="headerlink" title="常用命令表"></a>常用命令表</h2><p>Docker 常用命令总结：</p><table><thead><tr><th style="text-align:left">命令</th><th>用途</th></tr></thead><tbody><tr><td style="text-align:left">docker pull</td><td>获取 image</td></tr><tr><td style="text-align:left">docker build</td><td>创建 image</td></tr><tr><td style="text-align:left">docker images</td><td>列出 image</td></tr><tr><td style="text-align:left">docker rmi</td><td>删除 image (-f 强制删除）</td></tr><tr><td style="text-align:left">docker run</td><td>运行 container</td></tr><tr><td style="text-align:left">doeker stop</td><td>停止一个 container</td></tr><tr><td style="text-align:left">docker ps</td><td>列出正在运行的 container</td></tr><tr><td style="text-align:left">docker rm</td><td>删除 container</td></tr><tr><td style="text-align:left">dockre container ls -a</td><td>列出所有的容器</td></tr><tr><td style="text-align:left">docker container start/restart/stop</td><td>启动/重新启动/停止 一个容器</td></tr><tr><td style="text-align:left">docker cp</td><td>在host和container之间拷贝文件</td></tr><tr><td style="text-align:left">docker commit</td><td>保存改动为新的 image</td></tr><tr><td style="text-align:left">docker  exec</td><td>进入某个容器</td></tr><tr><td style="text-align:left">docker system df</td><td>查看docker 磁盘使用空间</td></tr><tr><td style="text-align:left">docker system prune</td><td>清理磁盘。删除关闭的容器、无用的数据卷和网络，以及dangling镜像(即无tag的镜像)</td></tr></tbody></table><h2 id="命令示例"><a href="#命令示例" class="headerlink" title="命令示例"></a>命令示例</h2><p>部分命令具体使用示例。</p><hr><h3 id="运行一个nginx镜像"><a href="#运行一个nginx镜像" class="headerlink" title="运行一个nginx镜像"></a>运行一个nginx镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV home]<span class="comment"># docker run -p 8080:80 -d nginx</span></span><br></pre></td></tr></table></figure><p><code>-p</code> 表示端口映射，把nginx的 80 端口映射到宿主机的 8080 端口</p><p><code>-d</code> 表示允许该Container作为守护进程来执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV home]<span class="comment"># docker run --rm -it ubuntu /bin/bash</span></span><br><span class="line">root@3b5c1d1ce739:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><code>--rm</code> 告诉Docker一旦运行的进程退出就删除容器，这在进行测试的时候非常有用</p><p><code>-it</code> 表示使用分配一个伪终端并进行交互模式，这将进入到容器内部。但不要在生产环境中这样使用</p><p><code>/bin/bash</code> 要运行的命令，因为我们以交互模式启动，它将显示一个容器的提示符</p><hr><h3 id="列出所有容器"><a href="#列出所有容器" class="headerlink" title="列出所有容器"></a>列出所有容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV home]<span class="comment"># docker ps -a</span></span><br></pre></td></tr></table></figure><p>包含历史运行过的容器</p><hr><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV home]<span class="comment"># docker rm 81b27f371312</span></span><br></pre></td></tr></table></figure><p>表示删除指定的容器 <code>81b27f371312</code>为容器的 <code>CONTAINER ID</code>，在使用ps列出容器时可以看到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker  rm $(docker ps -a -q)</span><br></pre></td></tr></table></figure><p>表示删除所有容器</p><h3 id="空间清理"><a href="#空间清理" class="headerlink" title="空间清理"></a>空间清理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker system prune</span><br><span class="line">WARNING! This will remove:</span><br><span class="line">        - all stopped containers</span><br><span class="line">        - all networks not used by at least one container</span><br><span class="line">        - all dangling images</span><br><span class="line">        - all dangling build cache</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] y</span><br></pre></td></tr></table></figure><p>表示清理磁盘，删除关闭的容器、无用的数据卷和网络，以及dangling镜像(即无tag的镜像)，可以使用这个命令清理Docker 所占用的空间。</p><p><strong>参数:</strong></p><p><code>-a</code>  表示清除所有没有容器引用的镜像，慎用！</p><hr><h3 id="停止某个容器"><a href="#停止某个容器" class="headerlink" title="停止某个容器"></a>停止某个容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV home]<span class="comment"># docker stop 0af0575bb931</span></span><br></pre></td></tr></table></figure><p>停止容器 <code>0af0575bb931</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -a -q)</span><br></pre></td></tr></table></figure><p>停止所有容器</p><hr><h3 id="启动一个容器"><a href="#启动一个容器" class="headerlink" title="启动一个容器"></a>启动一个容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV docker]<span class="comment"># docker container start a79bf9126f4c</span></span><br></pre></td></tr></table></figure><p>会以原来的方式启动这个容器</p><hr><h3 id="修改容器"><a href="#修改容器" class="headerlink" title="修改容器"></a>修改容器</h3><p>在<code>home</code>目录下新建一个index.html文件，并写入简单内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV home]<span class="comment"># touch index.html</span></span><br><span class="line">[root@HJWDEV home]<span class="comment"># vi index.html</span></span><br></pre></td></tr></table></figure><p>将<code>index.html</code>文件复制到 nginx 容器的指定目录下,则容器显示的首页会是我们上面写入的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV home]<span class="comment"># docker cp index.html 0af0575bb931://usr/share/nginx/html</span></span><br></pre></td></tr></table></figure><p>在重新启动该容器后，这个更改失效，因为Dockers在容器内做的改动都是暂时的，如需要保存则使用提交命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV home]<span class="comment"># docker commit -m 'fun' 0af0575bb931 nginx-fun</span></span><br></pre></td></tr></table></figure><p>表示将<code>0af0575bb931</code>容器的改动进行提交 ，<code>-m</code>则表示提交时添加的注释，当我们进行提交时会生成一个新的image，这里指定新镜像的名称为<code>nginx-fun</code>，如不指定名称则为<none></none></p><p>提交完成后可以通过 <code>docker images</code> 命令查看是否生成了一个新的image，启动这个新image得到的内容则会是我们上面更改的<code>index.html</code>的内容</p><hr><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nginx-fun /bin/bash</span><br><span class="line">root@15f556dcc7e5:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>只用 <code>-i</code> 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。</p><p>当 <code>-i</code> <code>-t</code> 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装配置</title>
      <link href="/posts/b035bcd6/"/>
      <url>/posts/b035bcd6/</url>
      
        <content type="html"><![CDATA[<p>官方建议把Docker安装在Linux操作系统上。当然，其它操作系统也可以安装使用。这里记录在Centos 7下Docker的安装与基本配置。<br><a id="more"></a></p><h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><ul><li>centos 7.x 以上</li><li>需要安装在64位平台上</li></ul><h2 id="清理非官方软件包"><a href="#清理非官方软件包" class="headerlink" title="清理非官方软件包"></a>清理非官方软件包</h2><p>Red Hat操作系统包含了一个旧版本的Docker软件包，该旧版本软件包的名称是<code>docker</code>。因此在我们安装新版本前先把旧版本删除，执行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sodo yum -y remove docker</span><br></pre></td></tr></table></figure></p><h2 id="设置yum源"><a href="#设置yum源" class="headerlink" title="设置yum源"></a>设置yum源</h2><p>鉴于国内网络问题，所以把yum源设置为国内的源，速度会快很多。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h2 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h2><p>Docker从2017年3月开始分成两个版本，一个是社区免费版本Docker CE，一个是企业版Docker EE。这里我们是个人使用所以安装CE版本。<br>执行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum makecache fast</span><br><span class="line">$ sudo yum install docker-ce</span><br></pre></td></tr></table></figure></p><h2 id="建立docker用户组"><a href="#建立docker用户组" class="headerlink" title="建立docker用户组"></a>建立docker用户组</h2><p>默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。因此，更好地做法是将需要使用 docker 的用户加入 docker 用户组。<br>建立 docker 组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br></pre></td></tr></table></figure><p>将当前用户加入 docker 组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>退出当前终端并重新登录，进行如下测试。</p><h2 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="运行Hello-world"><a href="#运行Hello-world" class="headerlink" title="运行Hello-world"></a>运行Hello-world</h2><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>如果能输出hello-world的内容即表示Docker安装成功</p><h2 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h2><p>同样是国内网络问题，我们在Docker官方仓库创建获取镜像时可能会很慢，因此可以使用国内同步的镜像仓库。</p><p>对于使用 <a href="https://www.freedesktop.org/wiki/Software/systemd/" target="_blank" rel="noopener">systemd</a> 的系统，请在 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完成后重新启动Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="开启远程访问"><a href="#开启远程访问" class="headerlink" title="开启远程访问"></a>开启远程访问</h2><p>不同系统或不同 Docker 版本开启方式不一样。我的系统为<code>Centos 7</code></p><p>我的Docker版本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@HJWDEV ~]<span class="comment"># docker --version</span></span><br><span class="line">Docker version 18.06.1-ce, build e68fc7a</span><br></pre></td></tr></table></figure><p>开启远程访问后，我们可以通过服务器上安装的 Docker 在本地构建 Docker 镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><p>编辑<code>docker.service</code> 文件在 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>前加上如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=</span><br><span class="line">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</span><br></pre></td></tr></table></figure><p>之后重启 Docker 即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>最后如果系统有防火墙还需要开启<code>2375</code>端口</p><p>添加端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent    （--permanent永久生效，没有此参数重启后失效）</span><br></pre></td></tr></table></figure><p>重新载入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker的理解</title>
      <link href="/posts/f388013c/"/>
      <url>/posts/f388013c/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Build once，Run anywhere</p></blockquote><a id="more"></a><p>Docker 是一个开源的容器引擎，它助于更快地交付应用。Docker可将应用与基础设施层隔离，并且能将基础设施当作程序一样进行管理。使用Docker可以更快的打包，测试以及部署应用程序，并可以缩短从编写到部署运行代码的周期。</p><h2 id="DcoKer的架构"><a href="#DcoKer的架构" class="headerlink" title="DcoKer的架构"></a>DcoKer的架构</h2><ul><li>Docker daemon<blockquote><p>是一个运行在宿主机的后台进程，可通过Docker客户端与之通信。相当于Docker在你本机的后台。</p></blockquote></li><li>Client (Docker客户端)<blockquote><p>docker客户端是docker的用户界面，它可以接受用户的命令与配置标识，并与Docker deamon通信</p></blockquote></li><li>Image (Docker镜像)<blockquote><p>Docker镜像是一个只读模板，它包含创建Docker容器的说明。它和系统光盘有点像，所以使用Docker镜像可以运行Docker镜像中的程序。</p></blockquote></li><li>Container (容器)<blockquote><p>容器是可运行的实例。镜像和容器的关系有点类似于面向对你中，类和对象的关系。可通过Docker Api或者CLI命令来启停、移动、删除容器。</p></blockquote></li><li>Registry<blockquote><p>Docker Registry是一个集中存储与分发镜像的服务。构建完docker镜像后，就可在当前宿主机上运行。但如果想要在其它机器上运行这个镜像，就需要手动复制。此时可以借助Docker Registry来避免镜像的手动复制。<br><img src="https://ws1.sinaimg.cn/large/005RGBbLly1fvkr26xdi8j30ed0awac7.jpg" alt="Docker架构图"></p></blockquote></li></ul><p>Docker Registry可分为公有与私有。最常用的Docker Registry就是官方的Docker Hub，这也是默认的Docker Registry。</p><hr><p>2020-3-11更</p><p>Linux 容器最基础的两种技术：Namespace 和 Cgroups</p><p>Namespace 的作用是“隔离”，它让应用进程只能看到该 Namespace 内的“世界”；而 Cgroups 的作用是“限制”，它给这个“世界”围上了一圈看不见的墙</p><p>容器是一种运行在宿主机上的特殊进程，所以多个容器之间使用的就还是同一个宿主机的操作系统内核。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Window下单机ELK搭建入门并与Spring Boot项目整合</title>
      <link href="/posts/6f31418d/"/>
      <url>/posts/6f31418d/</url>
      
        <content type="html"><![CDATA[<p>ELK是一款非常流行的日志分析系统，在微服务架构中，我们可以使用ELK来跟踪分析各个微服务的日志，从而来了解服务的运行情况。</p><a id="more"></a><p>ELK是由三个开源工具搭建而成一个系统，分别是：</p><ul><li><p><strong>ElasticSearch</strong>: ES是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</p></li><li><p><strong>Logstash</strong>：一个完全开源的工具，可以对日志进行收集、分析、并将其存储供以后使用。</p></li><li><p><strong>Kibana</strong>：一个开源和免费的工具，他Kibana可以为Logstash和ES提供的日志分析友好的Web界面，可以帮助您汇总、分析和搜索重要数据日志。</p></li></ul><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>Window 10</li><li>jdk 1.8</li><li>ElasticSearch-6.4</li><li>logstash-6.4</li><li>kibana-6.4-windows-x86_64</li></ul><h2 id="ELK安装"><a href="#ELK安装" class="headerlink" title="ELK安装"></a>ELK安装</h2><p>需要先安装jdk 1.8，其实只需要java运行环境即可，具体安装与环境变量配置过程这时不记录了</p><h3 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h3><p>Window下的安装比较简单。在官网下载对应平台的安装包即可。</p><p>官网：<a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/downloads/elasticsearch</a></p><p>下载下来后是一个zip的压缩文件，直接解压到安装目录即可。</p><p>ES的启动也非常简单，打开<code>/bin</code>目录双击 <code>elasticsearch.bat</code> 即可。</p><p>当然我们也可以选择作为服务启动，在命令行模式下切换到ES的<code>/bin</code>执行 <code>Service install</code> 再通过<code>/bin</code>目录下的 <code>elasticsearch-service-mgr.exe</code>来管理与启动服务。这里我选的第一种，使用的时候直接打开就行了。</p><p>启动后直接访问：<a href="http://localhost:9200/" target="_blank" rel="noopener">http://localhost:9200/</a> 若出现如下页面表示ES已经启动成功了。</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507114745.png" alt="ES启动成功"></p><h3 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h3><p>官网下载：<a href="https://www.elastic.co/downloads/logstash" target="_blank" rel="noopener">https://www.elastic.co/downloads/logstash</a></p><p>我下载的是ZIP格式的，将压缩包解压到安装目录即可。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在其<code>/config</code>目录可以看到已有一些配置文件，我们可以按自己的要求来新建一个配置文件,在此目录新建一个<code>logstach-test.conf</code>内容如下 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">input &#123; </span><br><span class="line">    tcp &#123;</span><br><span class="line">        port =&gt; 5044</span><br><span class="line">        type =&gt; &quot;test&quot;</span><br><span class="line">        codec =&gt; json_lines</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">output &#123; </span><br><span class="line">  elasticsearch &#123;  </span><br><span class="line">    hosts  =&gt; [&quot;localhost:9200&quot;]   </span><br><span class="line">    index =&gt; &quot;logstash-%&#123;type&#125;&quot;    </span><br><span class="line">  &#125;</span><br><span class="line">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的配置比较简单，logstash主要是收集日志给ElasticSearch。因此 <code>input{}</code>中主要是配置logstash监听的端口，后面我们在项目中配置日志向这个端口传输，logstash就会收集。</p><p><code>output{}</code>则配置ElasticSearch的地址，logstash将收集的日志向ES的地址进行输出，<code>index</code> 可以指定索引名， <code>stdout</code>是标准输出，会将收集到的日志进行输出，方便我们调试。</p><hr><p><code>input</code>中 <code>codec =&gt; json_lines</code>是一个json解析器，接收json的数据。这个要装<code>logstash-codec-json_lines</code> 插件。在命令行中切换到Logstash的 <code>/bin</code>目录下，执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logstash-plugin install logstash-codec-json_lines</span><br></pre></td></tr></table></figure><p>####启动</p><p>命令行中切换到Logstash的 <code>/bin</code>目录下，执行以下命令，使用我们上面的配置文件启动Logstash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logstash -f ../config/logstash-test.conf</span><br></pre></td></tr></table></figure><p>命令窗口中打印如下内容无报错并处于<strong>监听状态</strong>则启动成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2018-09-18T16:29:03,364][INFO ][logstash.agent] Successfully started Logstash API endpoint &#123;:port=&gt;9600&#125;</span><br></pre></td></tr></table></figure><h3 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h3><p>官网下载：<a href="https://www.elastic.co/downloads/kibana" target="_blank" rel="noopener">https://www.elastic.co/downloads/kibana</a></p><p>这里下载的是Window版本，下载下来是一个压缩包，直接解压到指定的安装目录即可。</p><p>启动则直接在<code>/bin</code>目录双击<code>kibana.bat</code></p><h2 id="新建Spring-Boot项目"><a href="#新建Spring-Boot项目" class="headerlink" title="新建Spring Boot项目"></a>新建Spring Boot项目</h2><p>这里使用之前写的项目作测试，项目的构建请看:<a href="https://blog.csdn.net/FTDD_HW/article/details/80874370" target="_blank" rel="noopener">微服务简单实例–电影购票</a> 这里使用用户微服务(服务提供者)。需要稍微作修改为我们整合Logstash</p><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加logstas--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改Controller"><a href="#修改Controller" class="headerlink" title="修改Controller"></a>修改Controller</h4><p>为了方便测试我们在findId方法中添加一条日志：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(@PathVariable Long id)</span></span>&#123;</span><br><span class="line">    User findOne = <span class="keyword">this</span>.userRepository.getOne(id);</span><br><span class="line">    logger.info(<span class="string">"找到用户 ： &#123;&#125;"</span>,findOne);</span><br><span class="line">    <span class="keyword">return</span> findOne;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="新建bootstrap-yml"><a href="#新建bootstrap-yml" class="headerlink" title="新建bootstrap.yml"></a>新建bootstrap.yml</h4><p>在application.yml同目录下新建bootstrap.yml，并将application.yml中的 以下内容移动到bootstrap.yml中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: microservice-simple-provider-user-trace-elk</span><br></pre></td></tr></table></figure><h4 id="配置logback-spring-xml"><a href="#配置logback-spring-xml" class="headerlink" title="配置logback-spring.xml"></a>配置logback-spring.xml</h4><p>在<code>resources</code>目录下新建<code>logback-spring.xml</code>文件添加以下内容:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"springAppName"</span> <span class="attr">source</span>=<span class="string">"spring.application.name"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"LOGSTASH"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.appender.LogstashTcpSocketAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>localhost:5044<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LogstashEncoder"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"LOGSTASH"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在上面的XML配置中添加了 <code>&lt;destination&gt;localhost:5044&lt;/destination&gt;</code>指定了我们上面配置logstash的监听地址，这样项目的日志才能被收集。</p></blockquote><p>配置完成后可以启动项目，观察logstash窗口会有日志打印出来。</p><h2 id="可视化查看"><a href="#可视化查看" class="headerlink" title="可视化查看"></a>可视化查看</h2><p>分别启动Es，Logstash，用户微服务，Kibana。打开kibana的地址：<a href="http://localhost:5601" target="_blank" rel="noopener">http://localhost:5601</a> 默认是没有密码可以直接登陆的。</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507124727.png" alt="Kibana启动界面"></p><h4 id="创建索引模式"><a href="#创建索引模式" class="headerlink" title="创建索引模式"></a>创建索引模式</h4><p>我这里使用了汉化，默认为英文。点击<code>发现</code>添加索引。索引名为Logstash配置方案中指定的<code>index</code>。所以可以看到Kibana为我们列出了可用或使用过的索引名。在索引模式的输入框中填入 <code>logstash-test</code>下一步即可。</p><blockquote><p>索引名称可以使用匹配规则，可以匹配多个索引。</p></blockquote><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507125024.png" alt="创建索引"></p><p>下一步需要选择过滤字段，这里我们先选择时间戳，并点击创建索引模式。创建完成后出现如下<code>系统管理&gt;索引模式界面</code>界面即创建成功，这里列出了可用的过滤字段，并可以在些删除该索引模式。</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507125128.png" alt="索引创建成功"></p><h4 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h4><p>点击<code>发现</code>这里我们可以看到刚刚新建的索引模式的数据。为了测试效果我们访问项目：<a href="http://localhost:8000/1多刷新几次再次返回`发现`界面查看，可以看到项目的日志已经过来了。下方可以看到日志内容，柱形图可以看到时间点上日志统计，左边为可显示的字段。可以把左边的字段加到下方进入展示。" target="_blank" rel="noopener">http://localhost:8000/1多刷新几次再次返回`发现`界面查看，可以看到项目的日志已经过来了。下方可以看到日志内容，柱形图可以看到时间点上日志统计，左边为可显示的字段。可以把左边的字段加到下方进入展示。</a></p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507125147.png" alt="查看数据"></p><h4 id="添加筛选器"><a href="#添加筛选器" class="headerlink" title="添加筛选器"></a>添加筛选器</h4><p>我们可以添加筛选器<code>message</code>筛选出我们打印的日志</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507125205.png" alt="添加筛选器"></p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507125220.png" alt="查找message"></p><h4 id="可视化分析"><a href="#可视化分析" class="headerlink" title="可视化分析"></a>可视化分析</h4><p>在可视化界面中，我们添加一些视图。</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507125236.png" alt="可视化"></p><p>通过一些条件定制，最后把视图放到仪表盘查看</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507125252.png" alt="仪表盘"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上只是简单的记录了下ELK的搭建与基本使用，对于生产部署还需要做一些配置。在学习过程中找到一些资料分享：</p><ul><li><a href="http://www.code123.cc/docs/kibana-logstash/v3/index.html" target="_blank" rel="noopener">Kibana 3指南</a></li><li><a href="https://www.cnblogs.com/iiiiher/p/7929379.html" target="_blank" rel="noopener">logstash的最佳实战-项目实战</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 日志管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elk </tag>
            
            <tag> 日志管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Sleuth配合Zipkin实现微服务的跟踪</title>
      <link href="/posts/6883841/"/>
      <url>/posts/6883841/</url>
      
        <content type="html"><![CDATA[<p>在微服务架构中可以使用Zipkin来追踪服务调用链路，可以知道各个服务的调用依赖关系。在Spring Cloud中，也提供了Spring Cloud Sleuth来方便集成Zipkin实现。</p><a id="more"></a><p>本文使用一个Zipkin Server，用户微服务，电影微服务来实现。完整实现的代码放在github中：</p><ul><li>Zipkin Server：<a href="https://github.com/hjwjw/Spring-Cloud-With-Docker-Practice-Demo/tree/master/microservice-trace-zipkin-server-stream-mysql" target="_blank" rel="noopener">microservice-trace-zipkin-server-stream-mysql</a></li><li>用户微服务：<a href="https://github.com/hjwjw/Spring-Cloud-With-Docker-Practice-Demo/tree/master/microservice-simple-provider-user-trace-zipkin-stream" target="_blank" rel="noopener">microservice-simple-provider-user-trace-zipkin-stream</a></li><li>电影微服务：<a href="https://github.com/hjwjw/Spring-Cloud-With-Docker-Practice-Demo/tree/master/microservice-simple-consumer-movie-trace-zipkin-stream" target="_blank" rel="noopener">microservice-simple-consumer-movie-trace-zipkin-stream</a></li></ul><h1 id="Zipkin-Server"><a href="#Zipkin-Server" class="headerlink" title="Zipkin Server"></a>Zipkin Server</h1><p>Zipkin可以不配置数据库，但跟踪的数据只存在内在中，不能长久保存，因此这里使用<code>mysql</code>存储跟踪数据。项目中还使用了rabbitMQ作为消息中间件进行数据收集，实现Zipkin与微服务的解耦。</p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>新建一个Spring Boot项目，添加以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-sleuth-zipkin-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.zipkin.java/zipkin-autoconfigure-storage-mysql --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-storage-mysql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入SpringCloud 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="添加注解"><a href="#添加注解" class="headerlink" title="添加注解"></a>添加注解</h2><p>在启动类上添加注解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableZipkinStreamServer</span><br></pre></td></tr></table></figure><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>配置文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">microservice-trace-zipkin-server-stream-mysql</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    schema:</span> <span class="attr">classpath:/mysql.sql</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/zipkin</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">zipkin:</span></span><br><span class="line"><span class="attr">  storage:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9411</span></span><br></pre></td></tr></table></figure><blockquote><p>mysql.sql文件可以在上面项目地址中找到,首先需要在Mysql数据库中新建<code>zipkin</code>数据库，在项目启动时会自动执行<code>mysql.sql</code>。</p></blockquote><p>RabbitMQ的安装与配置可以参考：<a href="https://blog.csdn.net/FTDD_HW/article/details/80082790" target="_blank" rel="noopener">RabbitMQ学习系列:一、RabbitMQ 的安装</a></p><h1 id="微服务整合Zipkin"><a href="#微服务整合Zipkin" class="headerlink" title="微服务整合Zipkin"></a>微服务整合Zipkin</h1><p>用户微服务与电影微服务作一样的修改。</p><p>##添加依赖</p><p>主要需要添加以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-sleuth-zipkin-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="修改配置-1"><a href="#修改配置-1" class="headerlink" title="修改配置"></a>修改配置</h2><p>在配置文件中添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">microservice-simple-consumer-movie-trace-zipkin</span></span><br><span class="line"><span class="attr">  zipkin:</span></span><br><span class="line"><span class="attr">    base-url:</span> <span class="attr">http://localhost:9411</span></span><br><span class="line"><span class="attr">  sleuth:</span></span><br><span class="line"><span class="attr">    sampler:</span></span><br><span class="line"><span class="attr">      percentage:</span> <span class="number">1.0</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure><h1 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h1><p>完成两个微服务的整合修改后，首先启动rabbitmq,保证mysql可以连通。分别启动Zipkin Server，用户微服务，电影微服务。</p><p>为了能看到跟踪数据，我们先访问服务让其产生数据：<a href="http://localhost:8011/user/1" target="_blank" rel="noopener">http://localhost:8011/user/1</a></p><p>再方便Zipink Server地址查看：<a href="http://localhost:9411/zipkin/" target="_blank" rel="noopener">http://localhost:9411/zipkin/</a></p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507141224.png" alt="Zipkin"></p><p>选择我们需要查看的时间点，点击 <code>Find Traces</code>我们就能看到跟踪数据了。</p><p>点击导航栏上的<code>Dependencies</code>可以查看服务依赖</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507141244.png" alt="Dependencies"></p><p>这里我们可以看到服务的调用方向。</p><p>打开Mysql数据库也可以看到跟踪数据已经被存储了：</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507141258.png" alt="mysql存储"></p><p>这样即使Zipkin被关闭，跟踪数据也不会丢失。</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zipkin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地仓库与远程仓库的关联问题</title>
      <link href="/posts/c2e49464/"/>
      <url>/posts/c2e49464/</url>
      
        <content type="html"><![CDATA[<p>今天新建一个本地仓库在关联远程仓库时遇到的问题，作下记录。</p><a id="more"></a><p>[TOC]</p><h2 id="配置SSH-KEY"><a href="#配置SSH-KEY" class="headerlink" title="配置SSH KEY"></a>配置SSH KEY</h2><blockquote><p>本地仓库与远程仓库通过SSH协议，所以需要配置SSH KEY</p></blockquote><p>使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -keygen  -t rsa –C “youremail@example.com”</span><br></pre></td></tr></table></figure><p>运行后会在本地用户目录生成一个 <code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>d_rsa.pub</code>两个文件，<code>d_rsa.pub</code>是公钥。在远程仓库中打开配置SSH的页面粘贴<code>d_rsa.pub</code>文件里面的内容即可。如果已经生成过可以直接使用。</p><!--more--><h2 id="关联空仓库"><a href="#关联空仓库" class="headerlink" title="关联空仓库"></a>关联空仓库</h2><p>在一个已经文件的文件夹里打开bash命令行窗口</p><p>使用命令初始化本地仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>提交本地仓库内容到暂缓区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure></p><p>提交到本地仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"first commit"</span></span><br></pre></td></tr></table></figure></p><p>新建一个远程<strong>空仓库</strong>，关联本地仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git仓库地址.git</span><br></pre></td></tr></table></figure></p><p>把本地仓库分支master内容推送到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><blockquote><p>第一次提交加 -u 表示该分支与远程仓库中的master分支关联，后面提交直接 git push 即可</p></blockquote><h2 id="关联非空仓库"><a href="#关联非空仓库" class="headerlink" title="关联非空仓库"></a>关联非空仓库</h2><p>如果你的远程仓库新建时已经添加了文件，并且本地仓库也不是空的，那么在本地仓库关联远程仓库后还是无法推送，需要先拉取远程仓库中的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">fatal: refusing to merge unrelated histories</span><br></pre></td></tr></table></figure><p>但我在操作时遇到了上面的错误 <code>fatal: refusing to merge unrelated histories</code>经过查找得知这个错误在2.9.0版本之后才出现，以前的版本可以正常使用，因此我们必需加一个可选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure><p>通过这个选项允许我们把origin仓库的master分支同步到本地，命令执行后还会打开一个vim填写备注，vim使用自行Google。</p><p>与远程同步成功后我们再执行推送命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><p>这样就可以成功把远程仓库与本地仓库关联了。</p>]]></content>
      
      
      <categories>
          
          <category> TortoiseGit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TortoiseGit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Zuul 微服务网关的构建</title>
      <link href="/posts/2d527b76/"/>
      <url>/posts/2d527b76/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p> 在学习完前面的知识后，微服务架构已经初具雏形。但还有一些问题：不同的微服务一般会有不同的网络地址，客户端在访问这些微服务时必须记住几十甚至几百个地址，这对于客户端方来说太复杂也难以维护。如下图：</p><a id="more"></a><p> <img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507141101.png" alt="请求多个服务"><br> 因此，我们需要一个微服务网关，介于客户端与服务器之间的中间层，所有的外部请求都会先经过微服务网关。客户端只需要与网关交互，只知道一个网关地址即可，这样简化了开发还有以下优点：<br> 1、易于监控<br> 2、易于认证<br> 3、减少了客户端与各个微服务之间的交互次数<br> 如下图：<br> <img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507141113.png" alt="微服务网关架构图"></p><p>在Spring Cloud中 Zuul是Netflix的基于JVM的路由器和服务器端负载均衡器。Zuul可以和Eureka、Ribbon、Hystrix、等组件配合使用。</p><h1 id="构建微服务网关"><a href="#构建微服务网关" class="headerlink" title="构建微服务网关"></a>构建微服务网关</h1><p>新建一个spring Boot项目microservice-gateway-zuul 。<br>Spring Boot :1.5.9.RELEASE<br>Spring Cloud:Edgware.RELEASE</p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="修改启动类"><a href="#修改启动类" class="headerlink" title="修改启动类"></a>修改启动类</h2><p>上面依赖中也加入了Eureka ，一般我们都会在启动类中添加上<br><code>@EnableDiscoveryClient</code> 注解，但在ZUUL 中我们只需要添加一个<br><code>@EnableZuulProxy</code>注解即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroserviceGatewayZuulApplication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(MicroserviceGatewayZuulApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><p>这里先使用最简单的配置，即配置应用名、端口、注册Eureka即可。后面再慢慢优化配置。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: microservice-gateway-zuul</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8040</span></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//user:admin@localhost:8761/eureka</span></span><br></pre></td></tr></table></figure></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>完成配置后则可以分别启动Eureka、用户微服务、Config Server(如果使用了)、microservice-gateway-zuul 项目。这样一个简单的微服务网关就完成了。我们可以通过 microservice-gateway-zuul 的路径加 微服务应用名 来访问微服务。<br>如访问用户微服务：<code>http://localhost:8040/microservice-provider-user/1</code><br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507141128.png" alt="微服务网关测试"><br>这样所有的微服务都可以通过 Zuul 进行访问。<br>前面提到Zuul 可以配合Ribbon使用，我们不用加任何配置和依赖，即可以实现负载均衡，可以再启动一个用户微服务进行测试。</p><h1 id="优化配置"><a href="#优化配置" class="headerlink" title="优化配置"></a>优化配置</h1><p>上一节使用 Zuul 实现了最简单的微服务网关，在实际环境中需要对Zuul 进行优化配置。</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p><strong>1、转发</strong><br>在Zuul的配置中可以为各微服务添加路由映射，如添加配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    microservice-provider-user:</span> <span class="string">/user/**</span></span><br></pre></td></tr></table></figure></p><p>表示HTTP调用将 <code>/user</code> 转发到<code>microservice-provider-user</code>服务，于是我们访问用户微服务的地址可以简化为：<br><code>http://localhost:8040/user/1</code></p><blockquote><p>/user/* 表示匹配其下的一个级别的路径，/user/** 表示匹配其下多个级别的路径。</p></blockquote><p>另外 还有一种方式也可以实现：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    user:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/user/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">microservice-provider-user</span></span><br></pre></td></tr></table></figure></p><p>这种写法与上面的效果相同。<code>zuul.routes.user</code> 这里的 user 是只该路由名称，可以自己随意命名。<br><strong>2、正则表达式指定路由规则</strong><br>Zuul中可以写正则来指定路由规则，如微服务名命名规则为：微服务名+版本。通过添加以下正则规则 ，我们可以通过 版本 + 微服务名 来访问。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroserviceGatewayZuulApplication</span> </span>&#123;</span><br><span class="line"><span class="comment">//正则表达式指定路由规则</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PatternServiceRouteMapper <span class="title">serviceRouteMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> PatternServiceRouteMapper(</span><br><span class="line"><span class="string">"(?&lt;name&gt;^.+)-(?&lt;version&gt;v.+$)"</span>,</span><br><span class="line"><span class="string">"$&#123;version&#125;/$&#123;name&#125;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(MicroserviceGatewayZuulApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>添加<code>PatternServiceRouteMapper</code>  传入两个参数，第一个为微服务的命名规则正则表达式，第二个是需要转化成什么形式的正则表达式。<br><code>(?&lt;name&gt;^.+)-(?&lt;version&gt;v.+$)</code>表示我们的微服务命名 为服务名+版本;<br><code>${version}/${name}</code> 表示访问路径转化成版本+服务名<br><strong>测试</strong><br>为了测试方便，把用户微服务的<code>spring.application.name</code> 更改为 <code>microservice-provider-user-v1</code> ,如果使用了Config Server 把git上的配置也记得更改。<br> 我们重启下Zuul，再次访问用户微服务会我发现原来的访问路径不行了。需要使用以下方式：<code>http://localhost:8040/v1/microservice-provider-user/1</code><br> <img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507141141.png" alt="正则匹配"></p><p><strong>3、前缀</strong><br>添加如下配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  prefix:</span> <span class="string">/api</span></span><br></pre></td></tr></table></figure></p><p>访问Zuul 的<code>/api/microservice-provider-user/1</code>会被映射到 <code>/microservice-provider-user/1</code> 即添加了前缀。<br>添加配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  prefix:</span> <span class="string">/api</span></span><br><span class="line"><span class="attr">  strip-prefix:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>配置 <code>strip-prefix</code>后，访问Zuul 的<code>api/microservice-provider-user/1</code>会被转发到 <code>microservice-provider-user</code>的 <code>/api/1</code><br><code>strip-prefix</code>需与<code>prefix</code>配合使用。</p><p><strong>4、忽略微服务或路径</strong><br>在有些情况下我们不想微服务网关去代理某个微服务，或者想保护某个微服务下了敏感路径可以使用以下配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">    ignored-services:</span> <span class="string">microservice-config-server</span></span><br></pre></td></tr></table></figure></p><p><code>zuul.ignored-services</code> 表示忽略指定的微服务，则通过Zuul不能访问到该微服务。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">    ignored-patterns:</span> <span class="string">/**/getProfile/**</span></span><br></pre></td></tr></table></figure></p><p><code>zuul.ignored-patterns</code> 表示忽略所以包含 <code>/getProfile/</code>的路径，上一篇笔记中我们为用户微服务添加了 <code>/getProfile/</code> 现在可以测试已无法访问了，但其它路径则正常，这种方式常可以用来屏蔽 <code>/admin/</code>等比较敏感的路径。</p><h1 id="Zuul-过滤器"><a href="#Zuul-过滤器" class="headerlink" title="Zuul 过滤器"></a>Zuul 过滤器</h1><p>Zuul 过滤器是Zuul的核心组件，Zuul中已经实现了一些过滤器，同时我们也可以自己定义过滤器。在Zuul中定义过滤器很简单，只需要继承 <code>ZuulFilter</code> 类。</p><h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><p>在上面构建的 <code>microservice-gateway-zuul</code>中新建类 并继承 <code>ZuulFilter</code> 如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器的优先级,数字越大顺序越后</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否使用该过滤器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 具体实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这里是通过ZuulFilter中打印出来的！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继承 <code>ZuulFilter</code>后实现它的四个方法，作用可看上面的注释。<br>过滤器类型有如下几种：</p><blockquote><p><code>PRE</code>：这种过滤器在请求被路由之前调用，可以利用这种过滤器实现身份认证，记录调用信息等。<br><code>ROUTING</code>：这种过滤器将请求路由到微服务。<br><code>POST</code>：这种过滤器在路由到微服务后执行。<br><code>ERROR</code>：在其他阶段发生错误时执行该过滤器。</p></blockquote><p>在启动类中添加Bean<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroserviceGatewayZuulApplication</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MyFilter <span class="title">myFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MyFilter();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(MicroserviceGatewayZuulApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重新启动Zuul，随意访问一个微服务，可以在Zuul控制台看到打印了过滤器run方法中输出的内容：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507141153.png" alt="过滤器输出内容"></p><h2 id="禁用过滤器"><a href="#禁用过滤器" class="headerlink" title="禁用过滤器"></a>禁用过滤器</h2><p>Zuul默认启用了一些过滤器，这些过滤器存放在<code>spring-cloud-netflix-core</code>包中的<code>com.netflix.zuul.filters</code>中，在发某些场景下，我们想禁用一些过滤器可以直接在配置文件中设置：<br><code>zuul.&lt;SimpleClassName&gt;.&lt;filterType&gt;.disable=true</code></p><p><code>SimpleClassName</code>:是指过滤器类名<br><code>filterType</code>:是过滤器类型<br>如禁用我们上面自定义过滤器可以这样写：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  MyFilter:</span></span><br><span class="line"><span class="attr">    pre:</span></span><br><span class="line"><span class="attr">      disable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>重启Zuul再次通过Zuul访问微服务，会发现Zuul的控制台不会再打印run方法中的内容，说明已经被禁用了。</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zuul </tag>
            
            <tag> API GateWay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Config 同步刷新配置及加密解密</title>
      <link href="/posts/525fe2aa/"/>
      <url>/posts/525fe2aa/</url>
      
        <content type="html"><![CDATA[<p>目录</p><p>[TOC]</p><p>前面的文章为微服务架构引入了统一配置管理Spring cloud config，实现了各个微服务配置分布式管理。配置被修改后，我们不可能重新启动微服务，前面说到过Spring Cloud Config可以自动更新配置，本篇会对同步自动刷新配置进行学习记录。另外配置文件存储在GIT仓库中，很多场景下，对于某些敏感的配置内容(例如数据库账号，密码等)，应当加密存储。部分内容涉及上篇文章：<a href="https://blog.csdn.net/FTDD_HW/article/details/82053079" target="_blank" rel="noopener">微服务学习笔记–使用Spring Cloud Config 统一管理微服务配置</a></p><a id="more"></a><h1 id="同步刷新"><a href="#同步刷新" class="headerlink" title="同步刷新"></a>同步刷新</h1><p>在项目中加入actuator，就会有一个<code>/refresh</code>端点，当配置被修改后，只需要手动通过POST方式去访问这个端口，项目配置即可被刷新。但这种手动刷新的方式只能针对单个项目刷新，如果所有的微服务节点的配置都需要手动去刷新则工作量会很大。因此这里介绍的是同步刷新的方式，使用Spring Cloud Bus实现。之所以它能实现同步刷新，是因为Spring Cloud Bus 使用了轻量级的消息代理(如rabbitmq,kafka)，通过广播的方式让所以有被修改配置的微服务节点都能被刷新。</p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>在上篇文章的Config Server，用户微服务，电影微服务三个项目中都引入以下依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h2 id="添加RabbitMQ"><a href="#添加RabbitMQ" class="headerlink" title="添加RabbitMQ"></a>添加RabbitMQ</h2><p>1、RabbitMQ安装可以参考之前的文章：<a href="https://blog.csdn.net/FTDD_HW/article/details/80082790" target="_blank" rel="noopener">RabbitMQ学习系列:一、RabbitMQ 的安装</a><br>在三个项目的配置文件中添加rabbitmq配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq:</span><br><span class="line">  host: localhost</span><br><span class="line">  port: 5672</span><br><span class="line">  username: guest</span><br><span class="line">  password: guest</span><br></pre></td></tr></table></figure></p><h2 id="添加测试方法"><a href="#添加测试方法" class="headerlink" title="添加测试方法"></a>添加测试方法</h2><p>其实这样就改造完成了，为了方便测试，我们把git上存储的各个配置文件添加相应配置：</p><pre><code>profile: user-dev-v1.0</code></pre><p>在用户与电影微服务中的Controller中添加以下红框中的内容以获取上面添加的配置值：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507140708.png" alt="添加内容"></p><blockquote><p><code>@RefreshScope</code> 添加该注解的类会在类更改时得到特殊处理</p></blockquote><p>通过这样改造，我们可以修改上面的属性，push到仓库，刷新后测试属性是否被更新来验证我们配置的Spring cloud bus 是否生效。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>首先我们访问用户与电影微服务的<code>getProfile</code>方法查看当前配置的<code>profile</code>值：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507140721.png" alt="用户微服务profile"><br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507140735.png" alt="电影微服务Profile"><br>把<code>microservice-provider-user-dev.yml</code>与 <code>microservice-consumer-movie-dev.yml</code>中的profile配置值分别修改成：user-dev-v2.0    和 movie-dev-v2.0  并推送到git仓库。再次使用getProfile方法获取配置值发现没有变化。<br>通过POSTMAN访问Config Server的<code>/bus/refresh</code>  端口：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507140750.png" alt="POSTMAN"><br>再次访问用户与电影微服务的<code>getProfile</code>方法：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507140801.png" alt="这里写图片描述"><br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507140814.png" alt="这里写图片描述"><br>发现获取的配置值已经改变，说明我们刷新配置生效了。<br>这里我们是访问Config Server的 <code>/bus/refresh</code>端口，其实访问用户或电影微服务的<code>/bus/refresh</code>端口效果也是一样的，不过在实际环境中，微服务被迁移，网络地址可能会发生改变，因此把Config Server也加入到消息总线中，它的地址一般比较固定，它的配置更新状态可以广播到其它微服务节点中。</p><h2 id="设置自动刷新"><a href="#设置自动刷新" class="headerlink" title="设置自动刷新"></a>设置自动刷新</h2><p>前面其实还是使用手动通过POST方式去访问<code>/bus/refresh</code>端口进行刷新，但已经实现了同步刷新。关于自动刷新我们可以借助GIT仓库的WebHook配置，在PUSH时让GIT给指定网络地址发送一个POST请求。<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507140825.png" alt="WebHooks"><br>由于这里是在本地进行学习测试，没有网络地址可以进行测试。</p><h1 id="加密解密"><a href="#加密解密" class="headerlink" title="加密解密"></a>加密解密</h1><p>Config Server 为配置内容的加密解密提供了两种方式。</p><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><h3 id="安装JCE"><a href="#安装JCE" class="headerlink" title="安装JCE"></a>安装JCE</h3><p>使用JCE,下载地址：<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html</a><br>需要对应相应版本的JDK，上面地址是jdk8的。<br>下载后打开解压有两个jar文件，把它们替换JDK安装目录下：<br>%JAVA_HOME%\jre\lib\security<br> 在Config Server的配置文件中添加密钥：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">  key: wei</span><br></pre></td></tr></table></figure></p><blockquote><p>key 可以自己随意设置<br>需要<code>注意</code>的是，这个配置必须配置在bootstrap.yml中，因此在Config Server中我们需要新建bootstrap.yml并将配置写入。</p></blockquote><h3 id="存储加密内容"><a href="#存储加密内容" class="headerlink" title="存储加密内容"></a>存储加密内容</h3><p>做好上面的工作后，重新启动Config Server 项目，可能在控制到看到打印了以下端点：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507140836.png" alt="加密解密端口"><br>这两个端点可以进行加密与解密。我们用POSTMAN把上面添加的<code>profile</code>配置值加密：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507140847.png" alt="加密"><br>然后把返回的加密值写入配置文件中，以<code>{cipher}</code>开关，以让Config Server识别这是需要解密的内容。<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507140950.png" alt="添加加密内容"><br>将修改后的配置文件push到git仓库，使用<code>/bus/refresh</code>刷新配置后访问用户微服务的<code>getProfile</code>方法以测试：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507141015.png" alt="测试"><br>可以看到返回到Config Client的配置已经被自动解密了</p><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>非对称加密相对与对称加密来说更安全。<br><strong>1、生成keyStore</strong><br>非对称加密可以使用JDK自带的keytool工具，打开cmd输入以下命令：</p><pre><code>keytool -genkeypair -alias config-server -keyalg RSA -keystore config-server.keystore</code></pre><p>按下图方式填写内容：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507141031.png" alt="生成keystore"><br>方便测试，上图我只输入了红框中的内容，其它地方直接回车即可。</p><p>运行完后会在当前运行路径下生成一个<code>config-server.keystore</code> 把这个文件移动到Config Server项目的 <code>\src\main\resources</code>目录下。<br><strong>2、添加配置</strong><br>在Config Server 的bootstrap.yml配置下添加以下内容：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">encrypt:</span></span><br><span class="line"><span class="attr">  key-store:</span></span><br><span class="line"><span class="attr">    location:</span> <span class="string">config-server.keystore</span></span><br><span class="line"><span class="attr">    alias:</span> <span class="string">config-server</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">******</span></span><br><span class="line"><span class="attr">    secret:</span> <span class="string">******</span></span><br></pre></td></tr></table></figure></p><p>这里的<code>password</code>与<code>secret</code>分别是生成keystroe时第一次与第二次输入的密码。<code>location</code> 是指向config-server.keystore的放置路径。<br><strong>3、非对称加密测试</strong><br>配置好上面的内容后，重启Config Server ，和对称加密一样，通过POSTMAN生成加密内容，写到配置文件中PUSH到GIT仓库即可。</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Config 统一管理微服务配置</title>
      <link href="/posts/e60cfe17/"/>
      <url>/posts/e60cfe17/</url>
      
        <content type="html"><![CDATA[<p>目录</p><p>[TOC]</p><p>微服务架构中为了方便管理与更新各微服务的配置，在Spring Cloud中可以使用 Spring Cloud Config 来统一管理系统内各微服务的配置文件。使用Config统一管理后，可实现git分布式版本控制，不同环境不同配置，动态调整自动更新配置等功能。<br>Spring Cloud Config 包括Config Server 和 Config Client 两部分，Config Server用于管理配置，Config Client 则与各微服务集成负责向Config Server请求获取配置并进行缓存以提高性能。<br>Config Server默认使用Git存储配置内容，当然也可以使用SVN,本地文件系统或Vault存储配置。<br>下面把Config Server 、 Config Client 和 Eureka配合使用记录下来。</p><a id="more"></a><h1 id="编写Config-Server"><a href="#编写Config-Server" class="headerlink" title="编写Config Server"></a>编写Config Server</h1><p>在编写Config Server 前，我们需要使用Git作为后端存储。</p><h2 id="创建Git仓库"><a href="#创建Git仓库" class="headerlink" title="创建Git仓库"></a>创建Git仓库</h2><p>可以在github.com上创建一个仓库。先前面用到了电影与用户微服务的配置文件直接放到仓库中。配置文件命名使用规范：<code>服务名+环境</code> 。这里我创建的仓库如下图：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507140217.png" alt="git仓库"><br>每个微服务的配置我这里按开发与生产环境分别部署两份。配置文件内容与前面做的demo配置一样，但开发与生产配置的端口号不同。<br>另外，方便测试版本控制，我给仓库新建了一个 config-label-v2.0 分支，将端口号进行修改以便区分。</p><h2 id="编写Config-Server-1"><a href="#编写Config-Server-1" class="headerlink" title="编写Config Server"></a>编写Config Server</h2><p>新建一个Spring Boot项目，<br><strong>1、引入依赖</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;Edgware.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure></p><p><strong>2、添加注解</strong><br>在启动类上添加 <code>@EnableConfigServer</code> 声明这是一个Config Server<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroserviceConfigServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(MicroserviceConfigServerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>因为我们是配合Eureka使用，因此启动类上也需要添加 <code>@EnableDiscoveryClient</code> 注解 </p></blockquote><p><strong>3、编写配置</strong><br>编写application.yml ，并添加以下配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span>  <span class="string">microservice-config-server</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://github.com/hjwzyy/spring-cloud-edgware-configServer-demo</span></span><br><span class="line"><span class="attr">          username:</span> <span class="string">******@*******.com</span></span><br><span class="line"><span class="attr">          password:</span> <span class="string">*******</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://user:admin@localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure></p><p>至此 一个简单的Config Server就完成了。<br>下面我们来启动Config Server进行测试。<br>访问如下地址：<a href="http://localhost:8082/microservice-provider-user/dev" target="_blank" rel="noopener">http://localhost:8082/microservice-provider-user/dev</a> 如下图：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507140417.png" alt="查看配置"><br>这里显示的是我们放在Git仓库里的用户微服务的开发环境配置文件，说明Config Server正常。<br>测试版本控制，访问如下地址：<a href="http://localhost:8082/microservice-provider-user/dev/config-label-v2.0" target="_blank" rel="noopener">http://localhost:8082/microservice-provider-user/dev/config-label-v2.0</a><br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507140532.png" alt="分支配置"><br>可以看到访问地址加上指定分支后显示的是指定分支下的配置文件。</p><pre><code>关于Config Server 获取git上的资源信息遵循如下规则：</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]</span><br><span class="line">/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class="line">/&#123;application&#125;-&#123;profile&#125;.properties</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.properties</span><br></pre></td></tr></table></figure><p>我们可以按以上规则去访问git上的配置文件</p><h1 id="编写Config-Client"><a href="#编写Config-Client" class="headerlink" title="编写Config Client"></a>编写Config Client</h1><p>前面我们写过，Config Client与微服务集成，因此在微服务中添加Config的依赖，稍微配置一下就可以了。<br>下面我将前面的用户微服务与电影微服务添加Config Client，整个用户与电影微服务的编写，服务注册这里不再贅述，可参考前文：</p><p><a href="https://blog.csdn.net/FTDD_HW/article/details/80874370" target="_blank" rel="noopener">微服务简单实例–电影购票</a></p><p><a href="https://blog.csdn.net/FTDD_HW/article/details/80922134" target="_blank" rel="noopener">微服务学习笔记 –使用Spring Cloud Eureka实现服务注册与发现</a></p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>向用户微服务添加以下依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>电影微服务同上添加依赖。</p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>因为用户微服务的配置已经放在了git上，所以项目的中的application.yml文件只需要配置一个端口即可，其它配置清除：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8005</span></span><br></pre></td></tr></table></figure></p><blockquote><p>git上的配置文件也可以配置端口，并且会以git上的配置文件为准</p></blockquote><p><strong>添加<code>bootstrap.yml</code>配置文件</strong> </p><blockquote><p>Spring Cloud 有一个“引导上下文”的概念，这里主应用程序的父上下文。引导上下文负责从配置服务器加载配置属性，以及解密外部配置文件中的属性。和主应用程序加载application.*(yml或priperties)中的属性不同，引导上下文加载bootstarap.*中的属性。配置在bootstrap.*中的属性有更高的优先级，因此默认情况下它们不能被本地配置覆盖。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">microservice-provider-user</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        serviceId:</span> <span class="string">microservice-config-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://user:admin@localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>配置文件中加上服务注册配置，因为我们是与Eureka配合使用，Config Client需要先从Eureka中找到Config Server，再从Config Server中获取到对应的配置。而获取对应配置是依靠<code>spring.application.name</code> 与 <code>spring.cloud.config.profile</code>来找到对应配置文件的。还记得前面我们在Git仓库中建立的配置文件命名吗？都是以  <code>服务名+环境</code> 进行命名的。</p></blockquote><p> <code>spring.cloud.config.label</code> 则是指定分支为主分支 <code>master</code><br><code>spring.cloud.config.discovery.enabled</code> 表示使用服务发现组件中的Config Server，而不是自己指定的Config Serverr uri，默认为false<br><code>spring.cloud.config.discovery.serviceId</code>指定Config Server在服务发现中的serviceId，默认是configserver ，因此这里写的是前面编写的Config Server 的<code>spring.application.name</code></p><p><strong>电影微服务的配置同上</strong><br>至此，Config Client已经配置完成。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>分别启动Eureka，Config Server，用户微服务与电影微服务。<br>在Eureka界面可以看到有三个注册的服务：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507140552.png" alt="注册服务"><br>用户微服务与电影微服务启动的端口是git配置文件中设置的端口，访问各各微服务通过正常获取数据：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507140607.png" alt="正常获取数据"><br>说明配置文件已经实现了通过Spring cloud Config 统一管理与获取。</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hystrix实现微服务的容错处理与监控数据</title>
      <link href="/posts/31090589/"/>
      <url>/posts/31090589/</url>
      
        <content type="html"><![CDATA[<p>目录</p><p>[TOC]</p><p>在微服务架构中，如果服务提供者响应缓慢，那么服务消费者的请求就会被强制等待，或响应超时。在高负载场景下，如果不做任何处理，这类问题可能会导致服务消费者资源耗竭甚至整个系统的崩溃。</p><a id="more"></a><h1 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h1><p>Hystrix是一个实现了超时机制和断路器模式的工具类库。是由Netflix开源的，用于隔离访问系统、服务或者第三方库，防止级联失败，从而提升系统的可用性与容错性。<br>Hystrix主要通过以下几点实现延迟和容错：<br><strong>1、包裹请求：</strong> 使用HystrixCommand（或HystrixObservableCommand）包裹对依赖的调用逻辑，每个命令在独立线程中执行。这使用到了设计模式中的“命令模式”。<br><strong>2、跳闸机制：</strong> 当某服务的错误率超过一定阈值时，Hystrix可以自动或手动跳闸，停止请求该服务一段时间 。<br><strong>3、资源跳闸：</strong> Hystrix为每个依赖都维护了一个小型的线程池（或者信号量）。如果该线程池已满，发往该依赖的请求就被立即拒绝，而不是排除等候，从而加速失败判定。<br><strong>4、监控：</strong> Hystrix可以近乎实时地监控运行指标和配置的变化，例如成功、失败、超时、以及被拒绝的请求等。<br><strong>5、回退机制：</strong> 当请求失败、超时、被拒绝，或当断路器打开，执行回退逻辑。回退逻辑可由开发人员自行提供，例如返回一个缺省值。<br><strong>6、自我修复：</strong> 断路器打开一段时间后，会自动进行“半开”状态。断路器打开、关闭、半开的逻辑转换。</p><h1 id="整合Hystrix"><a href="#整合Hystrix" class="headerlink" title="整合Hystrix"></a>整合Hystrix</h1><p>在Spring Cloud 中整合Hystrix非常方便。我们以前面的服务消费者项目为例进行修改。</p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="修改启动类"><a href="#修改启动类" class="headerlink" title="修改启动类"></a>修改启动类</h2><p>在启动类中添加注解 <code>@EnableHystrix</code> 或<code>@EnableCircuitBreaker</code>，为项目启用断路器支持。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroserviceConsumerMovieRibbonApplication</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(MicroserviceConsumerMovieRibbonApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(UserController.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancerClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"findByIdFallback"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(@PathVariable Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://microservice-provider-user/"</span> + id,User.class);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findByIdFallback</span><span class="params">(@PathVariable Long id)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(-<span class="number">1L</span>);</span><br><span class="line">        user.setName(<span class="string">"默认用户"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/log-user-instance"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logUserinstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServiceInstance serviceInstance = <span class="keyword">this</span>.loadBalancerClient.choose(<span class="string">"microservice-provider-user"</span>);</span><br><span class="line">        UserController.LOGGER.info(<span class="string">"&#123;&#125;:&#123;&#125;:&#123;&#125;"</span>,serviceInstance.getServiceId(),serviceInstance.getHost(),serviceInstance.getPort());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Controller中，我们为<code>findById</code>方法编写了一个回退方法<code>findByIdFallback</code>，在<code>findByIdFallback</code>方法中返回了一个默认用户，在<code>findById</code>中添加注解<code>@HystrixCommand</code>在<code>fallbackMethod</code>属性中指定它的回退方法即可。</p><h2 id="容错测试"><a href="#容错测试" class="headerlink" title="容错测试"></a>容错测试</h2><p>修改好上述内容后我们分别启动一个服务提供者，服务消费者与Eureka。访问服务消费者：<a href="http://localhost:8011/user/1" target="_blank" rel="noopener">http://localhost:8011/user/1</a> 可以正常得到数据。当我们把服务提供者关闭后再次访问，会发现返回了之前的默认用户:<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507140023.png" alt="默认用户">。</p><h1 id="Hystrix监控"><a href="#Hystrix监控" class="headerlink" title="Hystrix监控"></a>Hystrix监控</h1><p>前面提到Hystrix除了可以实现容错处理，还有监控功能。<br>使用Hystrix的模块<code>hystrix-metrics-event-stream</code>，就可以将这些监控信息以文本的形式暴露给外部系统。<code>spring-cloud-starter-netflix-hystrix</code>已经包含了这个模块，我人只需要添加Actuator，就可以使用<code>/hystrix.stream</code>端口获得Hystrix监控信息。</p><h2 id="添加Actuator"><a href="#添加Actuator" class="headerlink" title="添加Actuator"></a>添加Actuator</h2><p>只需要在项目中添加Actuator依赖即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>重新启动项目，访问 <a href="http://localhost:8011/hystrix.stream会出现类似如下图的信息：" target="_blank" rel="noopener">http://localhost:8011/hystrix.stream会出现类似如下图的信息：</a><br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507140047.png" alt="监牢信息"></p><h2 id="可视化监控数据"><a href="#可视化监控数据" class="headerlink" title="可视化监控数据"></a>可视化监控数据</h2><p>上一节我们可以看到监控信息，但都是通过文字形式展示的，不能直观的显示系统状态。<br>我们可以使用Hystrix Dashboard，让监控数据图形化，可视化。<br>我们新建一个最简单的Spring Boot 项目</p><ul><li><p>添加以下依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>启动类添加注解<br>在启动类上添加注解 <code>@EnableHystrixDashboard</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroserviceHystrixDashboardApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(MicroserviceHystrixDashboardApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置文件<br>在配置文件中添加访问端口</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8030</span></span><br></pre></td></tr></table></figure></li><li><p>启动项目<br>启动新建的项目：<a href="http://localhost:8030/hystrix" target="_blank" rel="noopener">http://localhost:8030/hystrix</a> ，就可以看到Dashboard界面，在中间的地址栏中输入上一节中我们查看监控数据的地址<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507140059.png" alt="Dashboard"><br>随意填写一个Title 点击按钮，Dashboard即可把<a href="http://localhost:8011/hystrix.stream" target="_blank" rel="noopener">http://localhost:8011/hystrix.stream</a> 的文本信息转化成可视化视图：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507140113.png" alt="可视化监控"><br>关于显示的指标信息解释可以参考如下图：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507140125.png" alt="指标解释"></p><h1 id="Turbine聚合监控数据"><a href="#Turbine聚合监控数据" class="headerlink" title="Turbine聚合监控数据"></a>Turbine聚合监控数据</h1><p>上一节我们把要监控的项目的 /hystrix.stream 地址填入Dashboard即可以可视化的监控项目状态。但在微服务中往往有若干个微服务，每个微服务又有多个实例，如果这样一个个监控非常不方便。这一节我们使用Turbine来聚合Hystrix监控数据。<br>首页我们把服务消费者项目复制一份，<code>修改应用名、端口与方法名</code>，模拟多个微服务的场景。<br>这里我把前面使用的服务消费者项目直接复制一份，在配置文件中修改<code>spring.application.name</code>为microservice-consumer-movie2,修改<code>server.port</code>为8031。在<code>Controller</code>中将原方法<code>findById</code> 名更改为<code>findById2</code>,回退方法名更改为<code>findByIdFallback2</code><br>然后新建一个Spring Boot项目<br><strong>1、依赖</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-turbine&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ul><p><strong>2、配置文件</strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8031</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">microservice-hystrix-turbine</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">        defaultZone:</span> <span class="attr">http://user:admin@localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">turbine:</span></span><br><span class="line"><span class="attr">  app-config:</span> <span class="string">microservice-consumer-movie,microservice-consumer-movie2</span></span><br><span class="line"><span class="attr">  cluster-name-expression:</span> <span class="string">"'default'"</span></span><br></pre></td></tr></table></figure></p><p>在配置文件中，把项目注册到Eureka，使用 <code>turbine.app-config</code> 属性添加需要聚合监控的项目名<br><strong>3、添加注解</strong><br>在启动类上添加注解 <code>@EnableTurbine</code></p><p><strong>4、聚合监控数据</strong><br>最后我们启动服务提供者，两个服务消费者，一个Eureka，上一节新建的Dashboard项目与刚新建的Turbine项目。<br>上一节中我们是把服务消费者的 <code>/hystrix.stream</code> 放入Dashboard中进行可视化，但Turbine项目已经聚合了两个服务消费者的监控数据，因为我们只需要把Turbine项目的地址放入Dashboard中即可。<br>Turbine项目聚合监控信息的地址为 <a href="http://localhost:8031/turbine.stream" target="_blank" rel="noopener">http://localhost:8031/turbine.stream</a><br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507140139.png" alt="tuebine聚合"><br>点击按钮后可展示如下图的可视化界面<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507140151.png" alt="聚合后的可视化界面"><br>可以看到两个服务消费者的方法都显示出来了，如果同名会显示成一个。<br>这样我们就完成了监控的聚合，更加方便的显示各各微服务的状态。</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hystrix </tag>
            
            <tag> Turbine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Feign实现声明式REST调用</title>
      <link href="/posts/f0c3ea98/"/>
      <url>/posts/f0c3ea98/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>#<br>前面的文章中，服务消费者调用服务提供者的接口我们是使用RestTemplate实现的REST API调用的。但这种方式在参数比较多时会变得低效，难以维护。</p><a id="more"></a><h1 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h1><p>Feign是Netflix开发的声明式，模板化的HTTP客户端。它可以让我们更加便捷，优雅的调用HTTP API。Feign有自己的注解，在Spring Cloud中对Feign进行了增强，使其可以支持Spring MVC注解，并整合Ribbon与Eureka。</p><h1 id="整合Feign"><a href="#整合Feign" class="headerlink" title="整合Feign"></a>整合Feign</h1><p>前面的服务消费都使用RestTemplate来调用服务提供者，这里更改成使用Feign，使用声明式的RestFul API。</p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置其实无需修改<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8011</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">microservice-consumer-movie</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://user:admin@localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h2 id="创建Feign接口"><a href="#创建Feign接口" class="headerlink" title="创建Feign接口"></a>创建Feign接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"microservice-provider-user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@FeignClient</code> 注解中的<code>microservice-provider-user</code> 是服务提供者的主机名，用于创建Ribbon负载均衡器，与上篇文章中使用主机名是一样的。也可以使用URL属性指定请求的URL:</p><pre><code>@FeignClient(name = &quot;microservice-provider-user&quot;,url=&quot;http://localhost:8000/&quot;)</code></pre><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserFeignClient userFeignClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(@PathVariable Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userFeignClient.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller 中去掉RestTemplate，定义 UserFeignClient 。我在测试中定义的 UserFeignClient 会提示 <code>Could not autowire. No beans of &#39;UserFeignClient&#39; type found.</code> 但运行并不影响。</p><h2 id="添加注解"><a href="#添加注解" class="headerlink" title="添加注解"></a>添加注解</h2><p>在启动类上注解 <code>@EnableFeignClients</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroserviceSimpleConsumerMovieApplication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(MicroserviceSimpleConsumerMovieApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>完成上述修改后，就可以像之前一样去调用服务提供者了。<br>与上篇Ribbon一样，启动一个Eureka，一个或多个服务提供者(Feign自己集成了Ribbon)，启动修改完成后的服务消费者。<br>访问<a href="http://localhost:8011/user/1" target="_blank" rel="noopener">http://localhost:8011/user/1</a><br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507135844.png" alt="测试"></p><h1 id="自定义Feign配置"><a href="#自定义Feign配置" class="headerlink" title="自定义Feign配置"></a>自定义Feign配置</h1><p>按上一节整合Feign很简单，但有时候我们想自定义Feign的配置，如更改Feign使用的编码器，解码器，契约，拦截器等。<br>如服务提供者是需要Http Basic的认证才能调用的，那么服务消费者可以在Feign中自定义配置拦截器，添加 Http Basic 认证。</p><h2 id="编写配置类"><a href="#编写配置类" class="headerlink" title="编写配置类"></a>编写配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BasicAuthRequestInterceptor <span class="title">basicAuthRequestInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BasicAuthRequestInterceptor(<span class="string">"user"</span>,<span class="string">"123456"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这个配置，只需要在Feign接口类<code>UserFeignClient</code>的<code>@FeignClient</code>注解中添加<code>configuration</code> 属性</p><pre><code>@FeignClient(name = &quot;microservice-provider-user&quot;,configuration=&quot;FooConfiguration.class&quot;)</code></pre><p>另外还需要把服务提供者加上Http Basic认证。<br>在服务提供都项目中添加security<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>在其配置文件中添加用户名与密码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line"><span class="attr">  basic:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  user:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>重新启动服务提供者与服务消费者<br>这里我们直接去访问服务提供者是需要进行认证的：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507135930.png" alt="测试"><br>访问服务消费者，通过服务消费者去调用服务提供者，不会弹出认证窗口，因为服务消费者在Feign中已经配置了用户名与密码了。<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507135950.png" alt="这里写图片描述"></p><h1 id="Feign服务间传送文件"><a href="#Feign服务间传送文件" class="headerlink" title="Feign服务间传送文件"></a>Feign服务间传送文件</h1><p>转 ：<a href="https://blog.csdn.net/qq_29534483/article/details/81330269" target="_blank" rel="noopener">Spring Cloud微服务【Finchley.RELEASE版本】(四)使用feign服务间传送文件</a></p><h1 id="Feign构造多参数请求"><a href="#Feign构造多参数请求" class="headerlink" title="Feign构造多参数请求"></a>Feign构造多参数请求</h1><h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><p>对于GET请求可以使用Map来构建。接口修改如下 :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"microservice-provider-user"</span>,configuration = FooConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserFeignClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/get"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(@RequestParam Map&lt;String,Object&gt; map)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用时构建一个Map传递到接口中</p><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><p>post请求则简单得多，可以直接使用 <code>User</code> 实体类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"microservice-provider-user"</span>,configuration = FooConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserFeignClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/get"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(@RequestBody User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Feign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ribbon实现负载均衡</title>
      <link href="/posts/d09d9c9a/"/>
      <url>/posts/d09d9c9a/</url>
      
        <content type="html"><![CDATA[<p>目录</p><p>[TOC]</p><p>为了实现微服务架构的高可用性，一般在生产环境中，各个微服务会部署多个实例。这里我们需要用到负载均衡，将服务消费者的请求分摊到多个服务提供者实例上。</p><a id="more"></a><h1 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h1><p>Ribbon 是Netflix发布的负载均衡器，它有助于控制HTTP和TCP客户端的行为。Ribbon配置好后，它可以根据如轮询，随机等负载均衡算法自动帮助服务消费去请求。在Spring Cloud中，Ribbon 与Eureka可以很好的配合 ，Ribbon向Eureka注册后可以自动从Eureka中获取服务提供者的地址列表，然后基于某种负载均衡算法去请求其中一个服务提供者实例。</p><h1 id="集成Ribbon"><a href="#集成Ribbon" class="headerlink" title="集成Ribbon"></a>集成Ribbon</h1><p>在Spring Cloud中使用Ribbon很简单，只需要做一点小修改。<br>将 <a href="https://blog.csdn.net/FTDD_HW/article/details/80874370" target="_blank" rel="noopener">微服务简单实例–电影购票</a> 中的服务消费者为基础进行修改。</p><p>##添加依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>由于 Eureka已经包含了Ribbon 所以这里其实不需要添加上面这个依赖了。</p><h2 id="添加注解"><a href="#添加注解" class="headerlink" title="添加注解"></a>添加注解</h2><p>还需要为RestTemplate添加@LoadBalanced注解。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroserviceConsumerMovieRibbonApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Bean</span> 是一个方法注解，作用是实例化一个Bean并使用该方法的名称命名。在本例中，添加<span class="doctag">@Bean</span>注解的restTemplate()方法，等价于RestTemplate restTemplate = new RestTemplate();</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@LoadBalanced</span> 可以为RestTemplate整合Ribbon 使其具备负载均衡的能力。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(MicroserviceConsumerMovieRibbonApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="修改Controller"><a href="#修改Controller" class="headerlink" title="修改Controller"></a>修改Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(UserController.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancerClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(@PathVariable Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://microservice-provider-user/"</span> + id,User.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/log-user-instance"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logUserinstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServiceInstance serviceInstance = <span class="keyword">this</span>.loadBalancerClient.choose(<span class="string">"microservice-provider-user"</span>);</span><br><span class="line">        UserController.LOGGER.info(<span class="string">"&#123;&#125;:&#123;&#125;:&#123;&#125;"</span>,serviceInstance.getServiceId(),serviceInstance.getHost(),serviceInstance.getPort());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要把请求地址改成 <a href="http://microservice-provider-user/" target="_blank" rel="noopener">http://microservice-provider-user/</a> 。microservice-provider-user是用户微服务(服务提供者)的虚拟主机名。当Ribbon与Eureka配合使用时，会自动将虚拟主机名映射成微服务的网络地址。在新增的方法logUserinstance() 方法中使用LoadBalancerClient 的API更加直观的获取当前选择的用户微服务节点。<br><code>注意需要在服务提供者的配置文件中添加其虚拟主机名，并且命名不能使用 _ ：</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: microservice-provider-user</span><br></pre></td></tr></table></figure></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>我们启动前文中 <a href="https://blog.csdn.net/FTDD_HW/article/details/80922134" target="_blank" rel="noopener">微服务学习笔记 –使用Spring Cloud Eureka实现服务注册与发现</a> 的一个Eureka项目，启动多个服务提供者，因为是在本地做测试，需要把端口改成不一样的，避免端口占用。最后启动修改后的服务消费者。查看Eureka界面：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507135708.png" alt="微信截图_20180806151100.png"><br>可以看到在Eureka上注册了三个服务提供者，分别使用了不同的端口号。另外还注册了集成Ribbon后的服务消费者。<br>访问localhost:8010/user/1 可以请求到数据<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507135730.png" alt="微信截图_20180806155709.png"><br>多次请求后后台可以看到请求会随机分配给不同的服务提供者。<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507135742.png" alt="微信截图_20180806155835.png"><br>可以通过访问 <a href="http://localhost:8010/log-user-instance" target="_blank" rel="noopener">http://localhost:8010/log-user-instance</a> 更加直观的查看负载均衡效果。<br>多次访问 <a href="http://localhost:8010/log-user-instance" target="_blank" rel="noopener">http://localhost:8010/log-user-instance</a> ，查看后台日志如下：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507135756.png" alt="微信截图_20180806160158.png"></p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ribbon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos 7离线安装Nginx 配置负载均衡集群</title>
      <link href="/posts/6a085911/"/>
      <url>/posts/6a085911/</url>
      
        <content type="html"><![CDATA[<p>目录</p><p>[TOC]</p><hr><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p> 项目中有三台应用服务器，系统为Centos 7 ，应用地址分别为:</p><a id="more"></a><ul><li>192.168.198.229:8080</li><li>192.168.198.230:8080</li><li>192.168.198.231:8080</li></ul><p>应用使用tomcat部署，目前没有域名，都是使用IP在局域网中单独访问。因为没有单独的服务器可以用来部署Nginx,所以Nginx部署在229服务器上。</p><!--more--><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><p>在安装Nginx前，需要先安装好一些依赖包。<br><strong>gcc依赖包</strong></p><ul><li>gcc-4.8.5-16.el7.x86_64.rpm</li><li>glibc-devel-2.17-196.el7.x86_64.rpm</li><li>glibc-headers-2.17-196.el7.x86_64.rpm</li><li>kernel-headers-3.10.0-693.el7.x86_64.rpm</li></ul><p><strong>其它依赖包</strong></p><ul><li>pcre-devel-8.32-17.el7.x86_64.rpm</li><li>zlib-devel-1.2.7-17.el7.x86_64.rpm</li><li>openssl-fips-2.0.10.tar.gz</li></ul><p>因为无法使用yum，我下载好后通过ftp上传到服务器。依赖包下载传送门：<a href="https://centos.pkgs.org/" target="_blank" rel="noopener">https://centos.pkgs.org/</a><br>前四个为gcc安装包与相关依赖，最后一个openssl-fips如果使用rpm，还需要安装很多依赖包，因此使用压缩包安装更简单。<br><strong>gcc安装</strong><br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4no3ic8j30hh0aw0z0.jpg" alt="gcc安装"><br>gcc安装验证：<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nohch6j30hf06qt9d.jpg" alt="gcc验证"><br>​    </p><p><strong>其它依赖包安装</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@APP1 opt]# rpm -ivh pcre-devel-8.32-17.el7.x86_64.rpm </span><br><span class="line">警告：pcre-devel-8.32-17.el7.x86_64.rpm: 头V3 RSA/SHA256 Signature, 密钥 ID f4a80eb5: NOKEY</span><br><span class="line">准备中...                          ################################# [100%]</span><br><span class="line">正在升级/安装...</span><br><span class="line"></span><br><span class="line">[root@APP1 opt]# rpm -ivh zlib-devel-1.2.7-17.el7.x86_64.rpm </span><br><span class="line">警告：zlib-devel-1.2.7-17.el7.x86_64.rpm: 头V3 RSA/SHA256 Signature, 密钥 ID f4a80eb5: NOKEY</span><br><span class="line">准备中...                          ################################# [100%]</span><br><span class="line">正在升级/安装...</span><br><span class="line">   1:zlib-devel-1.2.7-17.el7          ################################# [100%]</span><br><span class="line">   </span><br><span class="line">[root@APP1 opt]# tar zxvf openssl-fips-2.0.10.tar.gz </span><br><span class="line">[root@APP1 opt]# cd openssl-fips-2.0.10/</span><br><span class="line">[root@APP1 openssl-fips-2.0.10]# ./config &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><p>安装好上述依赖包后就可以安装Nginx了。安装如下：<br>使用tar将nginx-1.12.0.tar.gz 解压到 /usr/local/目录，编译安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@HMDMAPP1 opt]# tar -zxvf nginx-1.12.0.tar.gz -C /usr/local/</span><br><span class="line">[root@HMDMAPP1 opt]# cd /usr/local/nginx-1.12.0/</span><br><span class="line">[root@HMDMAPP1 nginx-1.12.0]# ./configure &amp;&amp; make &amp;&amp; make install</span><br><span class="line">[root@HMDMAPP1 nginx-1.12.0]# whereis nginx</span><br><span class="line">nginx: /usr/local/nginx</span><br></pre></td></tr></table></figure></p><h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><p>安装好后我们需要对Nginx进行配置。<br>配置文件路径为：/usr/local/nginx/sconf/nginx.conf<br>主要配置点：<br>1、<strong>upstream</strong><br>这里配置一组被代理的服务器地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream mysvr &#123;</span><br><span class="line">server 192.168.198.229:8080   weight=1 max_fails=3 fail_timeout=15;</span><br><span class="line">        server 192.168.198.230:8080   weight=1 max_fails=3 fail_timeout=15;</span><br><span class="line">        server 192.168.198.231:8080   weight=1 max_fails=3 fail_timeout=15;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2、<strong>server</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80; #监听端口，与应用端口不同</span><br><span class="line">        server_name  192.168.198.229; #监听地址，一般是配置域名</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://mysvr; #请求转向upstream配置中mysvr定义的服务器列表</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>请求转向还有另外一种写法：<br>如果upstream 中的服务器列表地址前加了<code>http://</code> 则在server中的请求转向地址<code>mysvr</code>不需要加<code>http://</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">upstream mysvr&#123;</span><br><span class="line">server http://192.168.198.229:8080   weight=1 max_fails=3 fail_timeout=15;</span><br><span class="line">       ...</span><br><span class="line">       ...</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">....</span><br><span class="line">location / &#123;</span><br><span class="line">            proxy_pass mysvr; #请求转向upstream配置中mysvr定义的服务器列表</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@HMDMAPP1 /]# cd /usr/local/nginx/sbin</span><br><span class="line"></span><br><span class="line">[root@HMDMAPP1 sbin]# ./nginx</span><br></pre></td></tr></table></figure><blockquote><p>Nginx常用命令<br>查看进程: ps -aux |grep ‘nginx’<br>重启nginx: ./nginx -s reopen<br>停止nginx: ./nginx -s stop<br>重新载入配置文件: ./nginx -s reload </p><p>验证配置：./nginx -t</p></blockquote><p>通过 192.168.198.229+应用地址 进行访问，我们可以在不同的服务器中的页面中添加标识来测试Nginx配置是否成功。下面访问test3.html页面不同刷新显示结果如下：<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4no9zl4j30en02lt8s.jpg" alt="这里写图片描述"><br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nod9avj30cy02mjrg.jpg" alt="这里写图片描述"><br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4no7o8zj30ee02n3yk.jpg" alt="这里写图片描述"><br>可以看到访问地址没有变化，但Nginx把请求分配到了不同的服务器上。</p><p>本文中使用到了依赖包与Nginx.conf完整配置文件下载：<a href="https://download.csdn.net/download/ftdd_hw/10578071" target="_blank" rel="noopener">https://download.csdn.net/download/ftdd_hw/10578071</a></p><p>推荐学习：<a href="https://blog.csdn.net/qq_29534483/article/details/81020755" target="_blank" rel="noopener">Nginx部署与配置</a></p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Eureka实现服务注册与发现</title>
      <link href="/posts/7d66ca0d/"/>
      <url>/posts/7d66ca0d/</url>
      
        <content type="html"><![CDATA[<p>目录</p><p>[TOC]</p><p>服务发现组件是微服务架构中非常关键的一个组件。SpringCloud 提供的服务发现有多种，如Eureka，Consul和Zookeeper等。本篇介绍的是Eureka的使用。</p><a id="more"></a><h1 id="服务发现简介"><a href="#服务发现简介" class="headerlink" title="服务发现简介"></a>服务发现简介</h1><p>服务提供者，服务消费者，服务发现组件这三者之间的关系大致如下：</p><p><code>服务提供者与服务消费者都需要向服务发现组件进行注册，服务消费者从服务发现组件中获取服务提供者的信息(如名称、地址、端口等)。在服务发现组件注册的微服务需要通过心跳机制来保持连接状态并更新注册信息，当服务发现组件长时间无法与某个微服务实例进行通信时，会注销这个实例。这种机制使得即使服务提供者信息发生变化，服务消费者也无须修改配置文件。</code></p><p>由以上得知，服务发现组件应具备以下功能：</p><ul><li><p>服务注册表：用于记录各个微服务的注册信息，它还提供查询API与管理API。</p></li><li><p>服务注册与服务发现：服务注册是指微服务在启动是将自己的信息注册到服务发现组件的过程。服务发现是指查询可用的微服务列表及其网络地址的机制。</p></li><li><p>服务检查：服务发现组件应有一定的机制定时检测已注册的微服务，如长时间无法访问，就会从服务注册表中移除该实例。</p></li></ul><h1 id="Eureka原理"><a href="#Eureka原理" class="headerlink" title="Eureka原理"></a>Eureka原理</h1><p>以下是Eureka官方的架构图，比较详细的描述了Erueka集群的工作原理：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507135017.png" alt="Eureka官方架构图"><br>我们可以把us-east-1c、us-east-1d与us-east-1e理解成独立的机房，而这整个图则是一个跨机房的Eureka集群。其中：</p><ul><li><p>Application Service 相当于前面说的服务提供者</p></li><li><p>Application Client 相当于前面的服务消费者</p></li><li><p>Make Remote Call 可以理解成调用RESTful API的行为</p></li></ul><p>由于图中所示，我们可以知道Eureka包含两个组件:Eureka Server 和 Eureka Client，它们的作用如下：</p><ul><li><p>Eureka Server提供服务发现的能力</p></li><li><p>Eureka Client 是一个java客户端，用于简化与Eureka Server的交互</p></li><li><p>微服务在启动后，会同期性（默认30s）地向Eureka Server 发送心跳来续约自己的“租期”</p></li><li><p>如果Eureka Server 在一定时间内（默认90s）没有接收到某个微服务的实例心跳，Eureka Server将会注销该实例</p></li><li><p>默认情况下，Eureka Server同时也是Eureka Client。多个Eureka Server 实例，互相之间通过复制的方式，来实现服务注册表中的数据同步</p></li><li><p>Eureka Client 会缓存服务注册表的信息，所以微服务无须每次请求都查询Eureka Server，从而降低了Eureka Server的压力。另外，即使Eureka Server 所以节点都挂了，服务消费者仍然可以使用缓存中的信息找到服务提供者并完成调用</p></li></ul><h1 id="Eureka-Server实现"><a href="#Eureka-Server实现" class="headerlink" title="Eureka Server实现"></a>Eureka Server实现</h1><p><strong>环境</strong></p><ul><li>Idea</li><li>Spring Boot ：1.5.9.RELEASE</li><li>Spring Cloud：Edgware.RELEASE</li><li>JDK ：1.8</li></ul><p><strong>引入依赖</strong><br>在Idea新建 一个Spring Boot项目，添加以下依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入Eureka依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入spring cloud的依赖 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>编写启动类</strong><br>我们需要在启动类上加上 <code>@EnableEurekaServer</code> 注解，声明这是一个Eureka Server<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroserviceDiscoveryEurekaApplication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(MicroserviceDiscoveryEurekaApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>添加配置</strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure></p><blockquote><p><code>eureka.client.register-with-eureka</code> 表示是否将自己注册到Eureka Server，默认为true,由于当前应用就是Eureka Server，所以设为false<br><code>eureka.client.fetch-registry</code> 表示是否从Eureka Server获取注册信息，默认为true,因为这是一个单点的Eureka Server，不需要同步其他的Eureka Server节点的数据，所以设定为false<br><code>eureka.client.serviceUrl.defaultZone</code> 设置与Eureka Server交互的地址，查询服务和注册服务都需要依赖这个地址，多个地址可以使用 <code>,</code> 分隔</p></blockquote><p>启动项目，访问<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a> 即可看到Eureka Server的首页。可以看到界面展示了实例的状态，可用与不可用的Eureka节点，注册的服务实例列表，常用信息等，当然，目前还没有服务向这个Server注册过，下面记录实现服务注册。</p><h1 id="微服务注册"><a href="#微服务注册" class="headerlink" title="微服务注册"></a>微服务注册</h1><p>Eureka Server建好后，我们的微服务就可以向这个Eureka Server进行注册了。<br>我们把之前文章(<a href="https://blog.csdn.net/ftdd_hw/article/details/80874370" target="_blank" rel="noopener">微服务简单实例–电影购票</a>)中实现的服务提供者修改一下。<br><strong>添加依赖</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册Eureka Server--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>修改配置</strong><br>在之前项目配置的基础上添加以下配置<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">microservice-provider-user</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer1:8761/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><blockquote><p><code>eureka.client.instance.prefer-ip-address</code>表示将自己的IP注册到Eureka Server<br><code>spring.application.name</code> 是指定一个应用名称<br><code>eureka.client.serviceUrl.defaultZone</code> 设置Eureka Server的地址，多个Eureka地址使用<code>,</code>分隔</p></blockquote><p><strong>修改启动类</strong><br>同样的，在微服务的启动类上加上一个注解 <code>@EnableDiscoveryClient</code> 表示这是一个Eureka Client。上面也说到Eureka 包含Server 与 Client两个组件，Client本身是一个JAVA客户端，把它集成到微服务中，简化了微服务与Eureka Server 的交互。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroserviceSimpleProviderUserApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(MicroserviceSimpleProviderUserApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完成以上修改后，启动服务提供者项目。刷新Eureka Server可以看到在 Instances currently registered with Eureka 栏目下出现了服务提供者的名称，地址，状态等信息。<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507135439.png" alt="注册成功"><br>这样，一个微服务就注册到Eureka Server上了。另外如果是非JAVA服务注册到Eureka Server，可以使用Eureka的api进行注册。</p><h1 id="Erueka高可用部署"><a href="#Erueka高可用部署" class="headerlink" title="Erueka高可用部署"></a>Erueka高可用部署</h1><p>前面我们写了一个Eureka Server，并将一个微服务注册到了Eureka Server，在实际环境中，Eureka 需要是一个高可用的集群环境。这样Eureka Server 宕机时，其它的Eureka节点还是能够继续提供服务，虽然Eureka Client有缓存注册表信息，也可以提供服务查询，但缓存不及时更新也会影响之后的服务调用。<br>前面在编写Eureka  Server时配置了  <code>eureka.client.register-with-eureka=false</code> 和<code>eureka.client.fetch-registry=false</code>，现在在多节点的环境中，要实现Eureka实例之间相互注册彼此增量地同步信息，才能确保各节点数据一致，实现Eureka的高可用部署。所以下面的集群环境中，这两个配置应该为 <code>true</code> 或不配置默认为 <code>true</code> 。<br><strong>修改hosts</strong><br>因为是在本机实现多节点的Eureka Server集群，需要修改一下系统的hosts文件，添加以下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1  peer1 peer2 peer3</span><br></pre></td></tr></table></figure><blockquote><p>如修改hosts无法保存，需要添加用户修改权限。<br>添加成功后可以ping peer1试试是否配置生效。</p></blockquote><p><strong>修改配置</strong><br>将上面编写的Eureka Server 项目的application.yml修改如下 :<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">microservice-discovery-eureka</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">peer1</span>                     <span class="comment"># 指定profile=peer1</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">peer1</span>                   <span class="comment"># 指定当profile=peer1时，主机名是peer1</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer2:8762/eureka/,http://peer3:8763/eureka/</span>      <span class="comment"># 将自己注册到peer2和peer3这两个Eureka上面去</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">peer2</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8762</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">peer2</span></span><br><span class="line"><span class="attr">  prefer-ip-address:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer1:8761/eureka/,http://peer3:8763/eureka/</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">peer3</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8763</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">peer3</span></span><br><span class="line"><span class="attr">  prefer-ip-address:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer1:8761/eureka/,http://peer2:8762/eureka/</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><blockquote><p>YAML 文件可以由一或多个文档组成（即相对独立的组织结构组成），文档间使用<code>---</code>（三个横线）在每文档开始作为分隔符。同时，文档也可以使用<code>...</code>（三个点号）作为结束符（可选）。<br>所以这里的配置文件实际上是三个配置文件组成，<code>---</code>分隔符不可少，否则编译出错。也可以把这几段配置写在三个YAML文件中。</p></blockquote><p><strong>启动</strong><br>启动项目时通过给spring.profiles.active 传递不同的参数，以使用不同的配置。<br>在IDEA中我们可以在启动前配置参数：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507135502.png" alt="这里写图片描述"><br>添加三个Spring Boot Application，并选择启动类，在Active Profiles中分别配置peer1,peer2,peer3参数后，分别启动。<br>在启动时，先启动成功的Eureka 可能会报以下错误：</p><p>​    2018-07-05 14:32:10.983 ERROR 13768 — [-target_peer2-8] c.n.e.cluster.ReplicationTaskProcessor   : Network level connection to peer peer2; retrying after delay<br>​    com.sun.jersey.api.client.ClientHandlerException: java.net.SocketTimeoutException: Read timed out</p><p>这是因为先启动成功的peer1根据配置会向peer2和peer3进行注册请求，而此时这两个应用可能还没启动好，所以出现上面的错误，三个应用启动成功后就正常了。<br>正常情况下如下图：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507135520.png" alt="Eureka集群"><br>显示了注册到该Eureka的实例信息，Eureka各节点地址。<br>在下面可以看到显示了两个注册的节点，同时这两个节点是可用的。<br>我之前测试时出现不可用(<strong>unavailable-replicas</strong>)的节点，如下：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507135537.png" alt="不可用Eureka"><br><strong>解决情况是将 <code>eureka.instance.prefer-ip-address</code> 设置为 <code>false</code> ，因为是在本地配置集群环境，IP是相同的，因此使用IP注册可能会导致节点不可识别，另外，三个应用的<code>spring.application.name</code>不一致也会出现 <em>unavailable-replicas</em> 的情况</strong></p><p><strong>服务注册到Erueka 集群</strong><br>前面我们将服务提供者注册到了一个单节点的Eureka Server ，在Eureka的集群环境中，只需要稍加修改即可。把服务提供者的 <code>eureka.client.serviceUrl.defaultZone</code>配置修改如下:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer1:8761/eureka/,http://peer2:8762/eureka/,http://peer3:8763/eureka/</span></span><br></pre></td></tr></table></figure><blockquote><p>其实可以继续使用localhost，因为是在本地测试。<br>另外，我们可以只写一个Eureka Server的地址，因为各Eureka Server节点之间会自动同步注册的实例信息，正常情况下这两种方式是一样。建议全部写上。</p></blockquote><p>启动服务提供者，刷新三个Eureka Server可以看到服务已经注册了:<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507135606.png" alt="集群注册"></p><h1 id="Eureka用户认证"><a href="#Eureka用户认证" class="headerlink" title="Eureka用户认证"></a>Eureka用户认证</h1><p>在生产环境中Eureka Server需要登录才能访问，Eureka的用户认证可以使用Security实现。下面稍微修改一下Eureka Server<br><strong>添加依赖</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>添加配置</strong><br>添加以下配置在第一段中，作为三个Eureka Server的公共配置。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line"><span class="attr">  basic:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span>                     <span class="comment">#开启HTTP basic的认证</span></span><br><span class="line"><span class="attr">  user:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">user</span>                        <span class="comment">#配置登录账号证</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">admin</span>                   <span class="comment">#配置登录密码</span></span><br></pre></td></tr></table></figure></p><p><code>最后把Eureka以及服务提供者的配置文件中的 defaultZone 地址修改成如下格式：</code></p><pre><code>http://user:admin@peer1:8761/eureka/</code></pre><p>这样才能注册到需要认证的Eureka Server。</p><p>重新启动Eureka Server和服务提供者后，再次访问三个Eureka可以看到弹出了登录框，输入上面的账号与密码后登录后即可进行Eureka Server首页，服务已正常注册成功。</p><h1 id="Eureka自我保护模式"><a href="#Eureka自我保护模式" class="headerlink" title="Eureka自我保护模式"></a>Eureka自我保护模式</h1><p>在实现上面的练习过程中，打开Eureka可能会遇到如下情况：<br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507135622.png" alt="Eureka自我保护模式"><br>这是Eureka开启自我保护模式时的警告。<br>前面说过Eureka Server在一定时间内没有接收到某个微服务实例心跳，Eureka Server将会注销该实例。但如果出现网络分区故障，微服务与Eureka Server之间无法正常通信，微服务其实是正常的，但由于无法接收到该微服务的通信，Eureka Server则会注销该服务。<br>为了避免这种情况的发生，Eureka Server 通过 自我保护模式 来解决这个问题。当Eureka Server在短时间内丢失过多客户端时，那么这个Eureka节点会进行自我保护模式。Eureka 会保护服务注册表中的信息，不再删除服务注册表中的数据，当网络故障恢复后，该Eureka节点会自动退出自我保护模式。<br>这种模式使得Eureka 集群更加健壮，稳定。<br>另外也可以选择禁用该模式，配置如下：</p><p>​    eureka.server.enable-self-preservation = false</p><h1 id="Eureka健康检查"><a href="#Eureka健康检查" class="headerlink" title="Eureka健康检查"></a>Eureka健康检查</h1><p>登录Eureka首页可以看到注册的微服务状态是 <code>UP</code><br><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/master/img/20190507135632.png" alt="微服务状态"><br>表示应用程序状态正常，应用的状态还有其它取值，如DOWN,OUT_OF_SERVICE,UNKNOWN等。只有标记为 <code>UP</code> 的微服务会被请求。<br>默认情况下，服务器端与客户端的心跳保持正常，应用程序状态就会显示<code>UP</code> 状态。但这个机制并不能完全反应微服务的状态，举个栗子，微服务与Eureka Server心跳正常，但微服务的数据源出现了问题（如数据库被关闭）。这个微服务其实无法正常工作，但Eureka Server认为该微服务为<code>UP</code>状态。<br>为了解决这个问题，我们可以把微服务的健康状态传播到Eureka Server，只需要在微服务中作如下配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    healthcheck:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>这样，当微服务健康状态出问题时，Eureka Server能够实时反应其它真实状态。</p><p>参考：<a href="http://cloud.spring.io/spring-cloud-netflix/single/spring-cloud-netflix.html" target="_blank" rel="noopener">官方API文档</a></p><p>以上，为《Spring Cloud与Docker微服务架构实战》第4章学习笔记。    </p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eureka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot Actuator监控端点</title>
      <link href="/posts/297fa226/"/>
      <url>/posts/297fa226/</url>
      
        <content type="html"><![CDATA[<p>目录</p><p>[TOC]</p><p>微服务的这种架构虽然解决了单体应用的一些劣势，但它也面临一些挑战，比如对运维的要求更高了。一个微服务架构中可能有几十个上百个应用构成，要保证这些应用都正常运行，相互协调是比较麻烦的事情，因此我们需要一个组件来对这些应用进行监控和管理。<br><code>spring-boot-starter-actuator</code> 就是Spring Boot提供这个功能的模块。</p><a id="more"></a><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>运行环境：</p><blockquote><p>Spring Boot 2.0.3.RELEASE</p></blockquote><p><strong>1、引入依赖</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>2、启动应用</strong><br>重新启动应用访问 <code>http://localhost:8000/actuator/health</code> 会显示如下信息：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">status: "UP"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Actuator监控管理默认的访问路径是在 <code>/actuator</code> 下。在测试Spring  Boot 1.5.9版本时是直接访问端点路径，不需要加 <code>/actuator</code> </p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>除了health端点外，Actuator还为我们提供了很多端点，有些可以直接访问，有些需要授权或通过配置才能访问。</p><h2 id="端点列表"><a href="#端点列表" class="headerlink" title="端点列表"></a>端点列表</h2><table><thead><tr><th style="text-align:right">端点</th><th style="text-align:right">描述</th></tr></thead><tbody><tr><td style="text-align:right"><code>actuator</code></td><td style="text-align:right">为其他端点提供基于超媒体的“发现页面”。要求Spring HATEOAS在类路径上</td></tr><tr><td style="text-align:right"><code>auditevents</code></td><td style="text-align:right">公开当前应用程序的审核事件信息</td></tr><tr><td style="text-align:right"><code>autoconfig</code></td><td style="text-align:right">显示自动配置报告，显示所有自动配置候选项以及它们“未被”应用的原因</td></tr><tr><td style="text-align:right"><code>beans</code></td><td style="text-align:right">显示应用程序中所有Spring bean的完整列表</td></tr><tr><td style="text-align:right"><code>configprops</code></td><td style="text-align:right">显示所有配置信息。</td></tr><tr><td style="text-align:right"><code>dump</code></td><td style="text-align:right">打印线程栈</td></tr><tr><td style="text-align:right"><code>env</code></td><td style="text-align:right">查看所以环境变量</td></tr><tr><td style="text-align:right"><code>health</code></td><td style="text-align:right">显示应用程序运行状况信息</td></tr><tr><td style="text-align:right"><code>info</code></td><td style="text-align:right">显示应用信息</td></tr><tr><td style="text-align:right"><code>loggers</code></td><td style="text-align:right">显示和修改应用程序中记录器的配置</td></tr><tr><td style="text-align:right"><code>liquibase</code></td><td style="text-align:right">显示已应用的任何Liquibase数据库迁移</td></tr><tr><td style="text-align:right"><code>metrics</code></td><td style="text-align:right">显示当前应用程序的“指标”信息</td></tr><tr><td style="text-align:right"><code>mappings</code></td><td style="text-align:right">显示所有@RequestMapping路径的整理列表</td></tr><tr><td style="text-align:right"><code>shutdown</code></td><td style="text-align:right">允许应用程序正常关闭（默认情况下不启用）</td></tr><tr><td style="text-align:right"><code>trace</code></td><td style="text-align:right">显示跟踪信息（默认情况下是最近的100个HTTP请求</td></tr></tbody></table><h2 id="Actuator配置"><a href="#Actuator配置" class="headerlink" title="Actuator配置"></a>Actuator配置</h2><p><strong>自定义默认路径</strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">management.endpoints.web.base-path</span> <span class="string">=</span> <span class="string">/application</span></span><br></pre></td></tr></table></figure></p><blockquote><p>修改后访问端点的默认路径不再是 <code>/actuator</code> 而是 <code>/application</code></p></blockquote><p><strong>自定义访问端口号</strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">management.server.port=</span> <span class="number">8012</span></span><br></pre></td></tr></table></figure></p><blockquote><p>修改后我们查看Actuator需要修改成8012端口进行访问，如<code>http://localhost:8012/actuator/health</code></p></blockquote><p><strong>关闭验证</strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">management.security.enabled=</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><blockquote><p>默认情况下只开放了<code>health</code> 与 <code>info</code> 端口，关闭验证后，其它的也可以访问了，但不安全，最好添加 <code>security</code> 验证</p></blockquote><p><strong>控制端点是否开放</strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">management.endpoints.web.exposure.include=</span> <span class="string">'info'</span></span><br></pre></td></tr></table></figure></p><blockquote><p>表示只暴露<code>info</code>端口，如添加其它端口使用 <code>,</code> 分隔，暴露所有端口使用 <code>*</code></p></blockquote><p><strong>端口属性配置</strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">management.endpoint.端口名.属性=值</span></span><br></pre></td></tr></table></figure></p><blockquote><p>如 <code>management.endpoint.health.show-details= always</code> 表示显示 <code>health</code>端口的详细信息，大多数端口可以这样配置。</p></blockquote><h2 id="整合Spring-Security"><a href="#整合Spring-Security" class="headerlink" title="整合Spring Security"></a>整合Spring Security</h2><p>监控端点的很多信息住信比较隐私，不能让没有权限的人随意查看，因此可以添加Srping Security进行控制。<br><strong>添加依赖</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>配置Security</strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  security:</span></span><br><span class="line"><span class="attr">    user:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">      password:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure></p><blockquote><p>配置security后，访问端口需要进行登陆验证。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>另外还有其它的端口配置，还可以自定义端口等，这里不一一总结，以后需要时查查资料。贴上一个学习链接： <a href="http://blog.didispace.com/spring-boot-actuator-1/" target="_blank" rel="noopener">http://blog.didispace.com/spring-boot-actuator-1/</a></p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Actuator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务简单实例--电影购票</title>
      <link href="/posts/5a5916f3/"/>
      <url>/posts/5a5916f3/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>通过上一篇文章理解了微服务后我们通过一个简单的电影购票场景来实现微服务。</p><a id="more"></a><p>如图：<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4n62ckwj30g502qjre.jpg" alt="电影购票系统"><br>这个场景当中，用户微服务是一个服务提供者，电影微服务是一个服务消费者，之前我们也说到，每个微服务从开发，测试，构建，部署，都应当独立运行，即每个微服务是单独的子项目。下面来实现这个场景。</p><h1 id="一、编写服务提供者"><a href="#一、编写服务提供者" class="headerlink" title="一、编写服务提供者"></a>一、编写服务提供者</h1><p>新建一个Spring Boot （版本1.5.9.RELEASE) 项目，不知道如何在IDEA中新建的可以看这篇&gt;&gt;传送门：：<a href="https://blog.csdn.net/ftdd_hw/article/details/76889440" target="_blank" rel="noopener">Spring Boot 入门知识</a></p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>项目使用H2作为数据库，使用jpa作为持久层框架。Spring Boot环境中H2数据库的基本配置可参考这篇&gt;&gt;传送门：<a href="https://blog.csdn.net/FTDD_HW/article/details/80696381" target="_blank" rel="noopener">Spring Boot环境下的 H2数据库基本配置</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入SpringCloud 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>application.yml 文件配置如下 ：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    generate-ddl:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl_auto:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">  h2:</span></span><br><span class="line"><span class="attr">    console:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/h2-console</span>               <span class="comment">#h2 web控制台路径</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span>                   <span class="comment">#开启 Web Console</span></span><br><span class="line"><span class="attr">      settings:</span></span><br><span class="line"><span class="attr">        web-allow-others:</span> <span class="literal">true</span>        <span class="comment">#允许远程访问 Web Console</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    platform:</span> <span class="string">h2</span>                      <span class="comment">#指定数据源类型</span></span><br><span class="line"><span class="attr">    schema:</span> <span class="attr">classpath:schema.sql</span>      <span class="comment">#指定数据库的数据脚本</span></span><br><span class="line"><span class="attr">    data:</span> <span class="attr">classpath:data.sql</span>          <span class="comment">#指定数据库的数据脚本</span></span><br></pre></td></tr></table></figure><blockquote><p>spring.h2.console.path 指定了h2控制台的路径，可以通过localhost:8000/h2-console 去访问H2的控制台。<br>spring.datasource.schema 与 datasource.data 会在每次启动项目时都会被执行</p></blockquote><p><strong>schema.sql</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">if</span> <span class="keyword">exists</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span> (<span class="keyword">id</span> <span class="built_in">bigint</span> <span class="keyword">generated</span> <span class="keyword">by</span> <span class="keyword">default</span> <span class="keyword">as</span> <span class="keyword">identity</span>, username <span class="built_in">varchar</span>(<span class="number">40</span>), <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>), age <span class="built_in">int</span>(<span class="number">3</span>), balance <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>), primary <span class="keyword">key</span> (<span class="keyword">id</span>));</span><br></pre></td></tr></table></figure></p><p><strong>data.sql</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="keyword">id</span>, username, <span class="keyword">name</span>, age, balance) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">'account1'</span>, <span class="string">'张三'</span>, <span class="number">20</span>, <span class="number">100.00</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="keyword">id</span>, username, <span class="keyword">name</span>, age, balance) <span class="keyword">values</span> (<span class="number">2</span>, <span class="string">'account2'</span>, <span class="string">'李四'</span>, <span class="number">28</span>, <span class="number">180.00</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="keyword">id</span>, username, <span class="keyword">name</span>, age, balance) <span class="keyword">values</span> (<span class="number">3</span>, <span class="string">'account3'</span>, <span class="string">'王一'</span>, <span class="number">32</span>, <span class="number">280.00</span>);</span><br></pre></td></tr></table></figure></p><h2 id="pojo"><a href="#pojo" class="headerlink" title="pojo"></a>pojo</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@JsonIgnoreProperties</span>(value=&#123;<span class="string">"hibernateLazyInitializer"</span>,<span class="string">"handler"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="keyword">private</span> String username;</span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="keyword">private</span> BigDecimal balance;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...get</span></span><br><span class="line"><span class="comment">//...set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>报错</strong><br>​<br>    com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer and no properties discovered to create BeanSerializer<br>如果在运行时报以上错误，则需要添加注释：<br><strong>@JsonIgnoreProperties(value={“hibernateLazyInitializer”,”handler”})</strong></p><blockquote><p>这是因为 hibernate会给每个被管理的对象加上hibernateLazyInitializer属性，jsonplugin通过java的反射机制将pojo转换成json，会把hibernateLazyInitializer也拿出来操作,但是hibernateLazyInitializer无法由反射得到，就会抛异常了。</p></blockquote><h2 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Long</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(@PathVariable Long id)</span></span>&#123;</span><br><span class="line">        User findOne = <span class="keyword">this</span>.userRepository.getOne(id);</span><br><span class="line">        <span class="keyword">return</span> findOne;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@GetMapping() 等同于 @RequestMapping(method = {RequestMethod.GET})</p></blockquote><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>运行项目，访问测试<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4n6a4wej30cm06rwen.jpg" alt="测试"></p><h1 id="二、编写服务消费者"><a href="#二、编写服务消费者" class="headerlink" title="二、编写服务消费者"></a>二、编写服务消费者</h1><p>消费者作为服务调用方，这里只使用最简单的方式来实现。</p><h2 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入SpringCloud 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p><strong>application.yml</strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8011</span></span><br><span class="line"><span class="attr">user:</span></span><br><span class="line"><span class="attr">    userServiceUrl:</span> <span class="attr">http://localhost:8000/</span></span><br></pre></td></tr></table></figure></p><blockquote><p>user.userServiceUrl ：把调用地址写入配置文件</p></blockquote><h2 id="pojo-1"><a href="#pojo-1" class="headerlink" title="pojo"></a>pojo</h2><p>这里与上面的服务提供者相同</p><h2 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h2><p>实例化RestTemplate<br>在启动类中添加以下方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;user.userServiceUrl&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userServiceUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(@PathVariable Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForObject(<span class="keyword">this</span>.userServiceUrl + id,User.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里使用 restTemplate 来调用服务<br>@Value(“${user.userServiceUrl}”) 从配置文件中取user.userServiceUrl值</p></blockquote><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>启动项目进行测试<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4n66hlaj30dl06ndg2.jpg" alt="消费者测试"></p><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>至此，一个简单的微服务完成！是不是觉得与我们平时写接口是差不多的，平时我们是在整个系统内部，各个功能模块之间进行接口调用，微服务则是把这些模块单独出来成为一个子系统，每个子系统提供接口给其它系统调用。<br><strong>在整个电影购票系统中</strong><br>使用单一职责原则：两个微服务只关注整个系统中单独，有界限的一部分。<br>满足服务自治原则：每个微服务具备独立的业务能力，依赖与运行环境。<br>使用了轻量级通信机制：消费者中使用了Rest 进行服务调用<br>微服务粒度：两个微服务都有明确的功能划分。</p><p>当然微服务不只是这么简单，还应该包括安全性，高可用性等，还需要集成其它的组件，后面会边学习边作记录。</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot环境下的 H2数据库基本配置</title>
      <link href="/posts/41733482/"/>
      <url>/posts/41733482/</url>
      
        <content type="html"><![CDATA[<p><strong>目录</strong></p><p>[TOC]</p><p>#<br>H2是一个开源的、纯Java实现的关系数据库。</p><a id="more"></a><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>1、它可以与应用程序打包一起发布，这样可以很方便存储少量的结构化数据。<br>2、还可以用于单元测试，启动速度快，而且可以关闭持久化功能，每一个用例执行完随即还原到初始状态<br>3、可以作为缓存，作为NoSQL的一个补充。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>1、纯Java编写，不受平台限制<br>2、只有一个Jar文件，适合作为嵌入式数据库使用<br>3、提供了一个完善的基于浏览器的Console应用<br>4、支持标准的sql和jdbc<br>5、支持内嵌模式，服务器模式和集群</p><h1 id="二、下载安装"><a href="#二、下载安装" class="headerlink" title="二、下载安装"></a>二、下载安装</h1><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><pre><code>http://www.h2database.com/html/main.html</code></pre><p><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4o0mxjoj30n00cbdh1.jpg" alt="H2下载"><br>我们可以下载win安装包，也可以直接下载zip，解压即用。我使用的是ZIP的压缩包。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>前面我们说过H2是纯Java编写的，所以在安装H2之前需要配置Java环境，具体Java环境配置这里就不写了。<br>H2的ZIP安装方式很简单，直接把下载下来的ZIP解压到安装目录下就可以了。<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nzyys7j30gu05qwet.jpg" alt="这里写图片描述"><br>启动H2 bin/h2.bat</p><h1 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h1><p>在Spring Boot环境中配置H2</p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><pre><code>&lt;dependency&gt;    &lt;groupId&gt;com.h2database&lt;/groupId&gt;    &lt;artifactId&gt;h2&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><p>这里还引入了jpa 用来对H2进行操作</p><h2 id="服务器模式"><a href="#服务器模式" class="headerlink" title="服务器模式"></a>服务器模式</h2><p><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4o0a4uij30ej0a6t9b.jpg" alt="配置H2"><br>其中URL使用的形式表示这里使用的是H2的服务器模式。连接的是我们上面安装的本地的H2数据库，因此我们在启动程序前必须把本地的H2数据库先启动。<br>URL中指定了数据存放位置，如果数据库test不存在会自动创建。<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4o07b6wj30h706baah.jpg" alt="创建数据库"></p><blockquote><p>配置中指定两个SQL脚本，每次启动程序都会重新执行脚本对数据进行初始化，当然我们可以不指定。<br>schema.sql 创建了一个user表结构<br>data.sql 向user表插入了三条数据</p></blockquote><p><strong>查看Console</strong><br>在前面启动H2数据库的时候会自动弹出consol管理页，按程序中指定的URL进行连接即可查看到我们创建的数据<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4o0dnwgj30l40c8wf5.jpg" alt="这里写图片描述"><br>用户名 sa 是默认的用户，密码默认为空。<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4o0364fj30nc0cpwfm.jpg" alt="这里写图片描述"><br>登入进Console后我们可以查看user表</p><p>在配置文件中配置了Web Console的路径，同样我们可以使用这个路径进行登入。</p><h2 id="内嵌模式"><a href="#内嵌模式" class="headerlink" title="内嵌模式"></a>内嵌模式</h2><p>H2最方便的是只需要一个jar包就可以使用了。前面我们引入H2依赖后其它就可以使用H2了，不需要连接我们本地安装的H2。<br>可以直接不指定URL<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4o0psowj30f008pgm3.jpg" alt="这里写图片描述"><br>或者修改一URL为：<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4o0h0m4j30d203wmxb.jpg" alt="这里写图片描述"><br>我们可以使用Web Console连接,连接的url为 </p><pre><code>jdbc:h2:mem:testdb</code></pre><blockquote><p>当我们没有指定URL的时候，默认的连接的数据库也是testdb 之前看教程说在把日志改成DEBUG可以看到连接的URL，但我试了还是没有找到，只只根据教程上的URL也连接，确定连接上了对应的数据库</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> H2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H2 </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ学习系列 五 RabbitMQ整合Spring</title>
      <link href="/posts/d72bda77/"/>
      <url>/posts/d72bda77/</url>
      
        <content type="html"><![CDATA[<p>最后学习一下RabbitMQ如何整合Spring，毕竟现在大多是使用框架来做项目。这篇主要使用的方式是XML配置。</p><a id="more"></a><p>[TOC]</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>RabbitMQ整合Spring的学习中，搭了两个web项目，一个作为客户端，一个作为服务端，放在一个项目中也可以实现效果，但毕竟RabbitMQ也是在这种类似的环境中使用的。客户端会把info类型和error类型的日志发送给RabbitMQ，RabbitMQ根据所定义的路由与绑定的key分别把日志消息传递给不同的队列。<br>客户端项目结构:<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nmj04gj308x09cdg0.jpg" alt="rabbitmq整合Spring项目结构"></p><h1 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h1><h2 id="RabbitMQ配置文件"><a href="#RabbitMQ配置文件" class="headerlink" title="RabbitMQ配置文件"></a>RabbitMQ配置文件</h2><p><strong>config.properties</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># RabbitMQ config</span><br><span class="line">rabbitmq.host=localhost</span><br><span class="line">rabbitmq.username=guest</span><br><span class="line">rabbitmq.password=guest</span><br><span class="line">rabbitmq.port=5672</span><br></pre></td></tr></table></figure></p><blockquote><p>这里在我本机的RabbitMQ，如果是在远程主机上则要做相应修改。需要注意的是，我们访问RabbitMQ管理界面是使用的<strong>15672</strong>端口，但通过连接访问RabbitMQ是使用<strong>5672</strong>端口</p></blockquote><h2 id="XML配置"><a href="#XML配置" class="headerlink" title="XML配置"></a>XML配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:rabbit</span>=<span class="string">"http://www.springframework.org/schema/rabbit"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.7.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd"</span>&gt;</span></span><br><span class="line">                           </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.rabbitmq.spring"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath*:config.properties"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">host</span>=<span class="string">"$&#123;rabbitmq.host&#125;"</span> <span class="attr">username</span>=<span class="string">"$&#123;rabbitmq.username&#125;"</span> <span class="attr">password</span>=<span class="string">"$&#123;rabbitmq.password&#125;"</span> <span class="attr">port</span>=<span class="string">"$&#123;rabbitmq.port&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:connection-factory</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--RabbitAdmin主要用于创建队列和交换器以及绑定关系等。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:admin</span> <span class="attr">id</span>=<span class="string">"rabbitAdmin"</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明队列--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">name</span>=<span class="string">"rabbitmq_log_info"</span> <span class="attr">durable</span>=<span class="string">"true"</span> <span class="attr">auto-delete</span>=<span class="string">"false"</span>  /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">name</span>=<span class="string">"rabbitmq_log_error"</span> <span class="attr">durable</span>=<span class="string">"true"</span> <span class="attr">auto-delete</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明路由并绑定队列，指定routingKey--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:direct-exchange</span> <span class="attr">name</span>=<span class="string">"hap.log.exchange"</span>  <span class="attr">auto-delete</span>=<span class="string">"false"</span> <span class="attr">durable</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">queue</span>=<span class="string">"rabbitmq_log_info"</span> <span class="attr">key</span>=<span class="string">"info"</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:binding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">queue</span>=<span class="string">"rabbitmq_log_error"</span> <span class="attr">key</span>=<span class="string">"error"</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:binding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:direct-exchange</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义RabbitTemplate，用于发送与接收消息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:template</span> <span class="attr">id</span>=<span class="string">"rabbitTemplateLogInfo"</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span> <span class="attr">routing-key</span>=<span class="string">"info"</span> <span class="attr">exchange</span>=<span class="string">"hap.log.exchange"</span> <span class="attr">message-converter</span>=<span class="string">"jsonMessageConverter"</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:template</span> <span class="attr">id</span>=<span class="string">"rabbitTemplateLogError"</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span> <span class="attr">routing-key</span>=<span class="string">"error"</span> <span class="attr">exchange</span>=<span class="string">"hap.log.exchange"</span> <span class="attr">message-converter</span>=<span class="string">"jsonMessageConverter"</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 消息对象json转换类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jsonMessageConverter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.amqp.support.converter.Jackson2JsonMessageConverter"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p> <strong>rabbit-admin</strong>  标签如不声明,则 rabbit:queue 与 rabbit:direct-exchange 标签中必须添加 auto-declare 属性为true ,表示如果队列或路由不存在则自动声明，如不声明rabbit-admin，也不添加auto-declare属性则启动时会报声明队列错误，或队列不存在。<br> <strong>rabbit:template</strong> 标签中的routing-key、exchange也可以不在XML中配置，在类中发送消息时可以作为参数代入。则XML中只需要配置一个rabbit:template标签即可</p></blockquote><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p><strong>Service接口</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISendMessageService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendInfoMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendErrorMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Service实现类</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessageService</span> <span class="keyword">implements</span> <span class="title">ISendMessageService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"rabbitTemplateLogInfo"</span>)</span><br><span class="line">    <span class="keyword">public</span> RabbitTemplate rabbitTemplateLogInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"rabbitTemplateLogError"</span>)</span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplateLogError;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendInfoMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Info发送消息中&gt;&gt;&gt;"</span> + message);</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplateLogInfo.convertAndSend(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendErrorMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Error发送消息中&gt;&gt;&gt;"</span> + message);</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplateLogError.convertAndSend(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>RabbitTemplate的convertAndSend方法中，如果XML中已经配置好了对应的exchange与routingKey则可以直接传入一个消息进行发送即可。如果没有可以在参数中加入Exchange 与 routingkey</p></blockquote><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/rabbitmqLog"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitmqController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"sendMessageService"</span>)</span><br><span class="line">    ISendMessageService service = <span class="keyword">new</span> SendMessageService();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/sendInfoLog"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendInfoMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        service.sendInfoMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/sendErrorLog"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendErrorMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        service.sendErrorMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="服务端实现"><a href="#服务端实现" class="headerlink" title="服务端实现"></a>服务端实现</h1><p>因为这里只是做一个简单的示例，所以服务端只做了监听，没有做什么业务逻辑。</p><h2 id="RabbitMQ配置文件-1"><a href="#RabbitMQ配置文件-1" class="headerlink" title="RabbitMQ配置文件"></a>RabbitMQ配置文件</h2><p>这里与客户端是一样的</p><h2 id="XML配置-1"><a href="#XML配置-1" class="headerlink" title="XML配置"></a>XML配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:rabbit</span>=<span class="string">"http://www.springframework.org/schema/rabbit"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.7.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.rabbitmq.spring"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath*:config.properties"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">host</span>=<span class="string">"$&#123;rabbitmq.host&#125;"</span> <span class="attr">username</span>=<span class="string">"$&#123;rabbitmq.username&#125;"</span> <span class="attr">password</span>=<span class="string">"$&#123;rabbitmq.password&#125;"</span> <span class="attr">port</span>=<span class="string">"$&#123;rabbitmq.port&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:connection-factory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:admin</span> <span class="attr">id</span>=<span class="string">"rabbitAdmin"</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">name</span>=<span class="string">"rabbitmq_log_info"</span> <span class="attr">durable</span>=<span class="string">"true"</span> <span class="attr">auto-delete</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">name</span>=<span class="string">"rabbitmq_log_error"</span> <span class="attr">durable</span>=<span class="string">"true"</span> <span class="attr">auto-delete</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:listener-container</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span> <span class="attr">acknowledge</span>=<span class="string">"auto"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">"messageRecevicer"</span> <span class="attr">queues</span>=<span class="string">"rabbitmq_log_info"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">"messageRecevicer"</span> <span class="attr">queues</span>=<span class="string">"rabbitmq_log_error"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:listener-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageRecevicer"</span> <span class="attr">class</span>=<span class="string">"com.rabbitmq.spring.listener.QueueListener"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 消息对象json转换类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jsonMessageConverter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.amqp.support.converter.Jackson2JsonMessageConverter"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>服务端的XML与客户端不同的是多了监听配置与监听类的Bean，少了路由声明与队列绑定的配置。</p></blockquote><h2 id="监听类"><a href="#监听类" class="headerlink" title="监听类"></a>监听类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        String msg = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            msg = <span class="keyword">new</span> String(message.getBody(),<span class="string">"UTF-8"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"监听到 "</span>+ message.getMessageProperties().getConsumerQueue()+<span class="string">" 队列消息:"</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>最后我们分别启动客户端与服务端。客户端调用Controller向服务端发送消息 。<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nmmad8j3116095my4.jpg" alt="测试"></p>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ学习系列 三 发布 订阅</title>
      <link href="/posts/5dabf99c/"/>
      <url>/posts/5dabf99c/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>上一篇记录了一个简单的rabbitmq 发布接收队列消息，但没有使用路由。本篇写一写rabbitmq的路由的使用。</p><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>有几个概念介绍一下<br>1、生产者<br>​<br>​    生产者是发送消息的用户的应用程序</p><p>2、路由<br>​<br>​    处理生产者消息发到哪个队列</p><p>3、队列</p><pre><code>队列是存储消息的缓冲器</code></pre><p>4、消费者</p><pre><code>消费者是接收消息的用户的应用程序</code></pre><p><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nqtijnj30bq0483yk.jpg" alt="消息模型"></p><p>RabbitMQ中的消息传递模型的核心思想是生产者永远不会将任何消息直接发送到队列中。实际上，生产者通常甚至不知道消息是否会被传送到任何队列中。我们的消息实际上是从生产者传递到路由，路由会绑定队列并指定绑定的routingKey。根据routingkey匹配到这个路由上绑定的队列，并向队列发送消息，不能匹配上的队列则不会收到该消息。所以我们上一篇文章中虽然没有明确定义路由，实际上是使用是默认的路由。我们可以根据需求自己声明相应的路由。</p><h1 id="路由-Exchange"><a href="#路由-Exchange" class="headerlink" title="路由(Exchange)"></a>路由(Exchange)</h1><h3 id="声明方式"><a href="#声明方式" class="headerlink" title="声明方式"></a>声明方式</h3><pre><code>exchangeDeclare(String exchange, String type, boolean durable, boolean autoDelete, Map&lt;String, Object&gt; arguments)</code></pre><blockquote><p>exchange :路由名<br>type : 路由类型<br>durable: 是否持久化<br>autoDelete：是否自动删除<br>arguments: 其它参数</p></blockquote><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>1、Fanout<br>​    &gt; 广播。这个类型的路由会忽略routingKey。收到生产者消息后会直接发送给绑定在该路由上的所有队列</p><p>2、Direct</p><blockquote><p>单播。该类型的路由会根据routingKey去匹配队列，将消息发送给该路由上绑定的并且routingKey完全匹配上的队列</p></blockquote><p>3、Topic</p><blockquote><p>多播。该类型路由的routingKey可以使用通配符进行匹配。即 * 代表一个单词，# 代表多个单词。routingKey 的定义不能是任意字符，只能是由点号分隔的字符串，如: “ stock.usd.nyse ”，“ nyse.vmw ”，“ quick.orange.rabbit ”。<br>如下图<br>Q1队列的与路由绑定的routingKey 是<strong><strong>.orange.</strong></strong><br>Q2队列的与路由绑定的routingKey 是 <strong><strong>.</strong></strong>.rabbit  与 lazy.#<br>如果我们发送消息时指定的routingKey为:quick.orange.rabbit ，则消息会被路由发送到Q1与Q2两个队列中。<br>如果我们发送消息时指定的routingKey为:lazy.brown.fox ，则消息会被路由发送到Q2队列<br>如果指定的routingKey为 lazy.pink.rabbit，也会被发送到Q2，但只会发送一次，即使它匹配到了两个绑定的routingKey<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nqr0t8j30bs04rt8t.jpg" alt="示例"></p></blockquote><p>4、Headers</p><blockquote><p>这种类型的路由不处理路由键，而是根据发送消息的Headers属性进行匹配，在队列绑定交换机的时候会指定一组键对值;</p></blockquote><h3 id="绑定队列"><a href="#绑定队列" class="headerlink" title="绑定队列"></a>绑定队列</h3><pre><code>queueBind(String queue, String exchange, String routingKey)</code></pre><blockquote><p>前面我们说过 RabbitMQ中的消息传递模型的核心思想是生产者永远不会将任何消息直接发送到队列中。所以我们每个队列都需要绑定在一个路由上。从生产者发送到该路由的消息只会被传递到与路由绑定的队列上。绑定时还需要指定一个routingKey，路由根据发布消息时传递过来的routintKey来匹配到相应队列并传送消息到该队列中。<br>queue: 队列名<br>exchange: 路由名<br>routingKey: 队列与路由绑定的key</p></blockquote><h1 id="编写生产者"><a href="#编写生产者" class="headerlink" title="编写生产者"></a>编写生产者</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmitLogTopic</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME=<span class="string">"topic_logs"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">"localhost"</span>);</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC);</span><br><span class="line">        String message =<span class="string">"Hello World! This is error info!"</span>;</span><br><span class="line">        <span class="comment">/* 我们使用的是topic类型的路由，第二个参数为routingKey*/</span></span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME,<span class="string">"rabbit.log.error"</span>,<span class="keyword">null</span>,message.getBytes());</span><br><span class="line"></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>发送消息时我们指定的routingKey为 rabbit.log.error 因为是topic类型的路由，所以需要用点分隔的形式写routingKey ，如果是Direct类型则不需要。</p></blockquote><h1 id="编写消费者"><a href="#编写消费者" class="headerlink" title="编写消费者"></a>编写消费者</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceivedLogsTopic</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME=<span class="string">"topic_logs"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">"localhost"</span>);</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC);</span><br><span class="line">        String queuesName = channel.queueDeclare().getQueue();</span><br><span class="line">        <span class="comment">/*将队列绑定路由并定义topic类型路由的匹配规则*/</span></span><br><span class="line">        channel.queueBind(queuesName,EXCHANGE_NAME,<span class="string">"*.log.*"</span>);</span><br><span class="line"></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String message = <span class="keyword">new</span> String(body,<span class="string">"UTF-8"</span>);</span><br><span class="line">                System.out.println(<span class="string">"[x] recv:"</span> + message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queuesName,<span class="keyword">true</span>,consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里队列绑定topic 类型路由时指定的匹配规则为 <strong><strong>.log.</strong></strong><br>前面生产者发送时的routingKey 为 rabbit.log.error 所以这条消息会被路由监听到。 如果我们将绑定的匹配规则修改为 log.# 并重新启动一个消费者B，通过生产者再次发送消息，则消费者B不会监听到这条消息，因为routingKey 无法匹配上，路由不会把这条消息传递给消费者B</p></blockquote><p> <strong>* 注意在测试时是需要先启动消费者，再启动生产者。因为如果没有消费者在线，消息会被rabbitMq丢弃处理 </strong></p>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ学习系列 二 “Hello World”</title>
      <link href="/posts/aca91396/"/>
      <url>/posts/aca91396/</url>
      
        <content type="html"><![CDATA[<p> 前面写了RabbitMQ的安装，这一篇记录一下 “Hello World” 的实现 。</p><a id="more"></a><p>[TOC]</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>使用最简单的方式发布一个消息并接收<br>这里声明了一个hello队列，没有使用路由。</p></blockquote><h3 id="编写生产者"><a href="#编写生产者" class="headerlink" title="编写生产者"></a>编写生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME=<span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">/*创建连接工厂*/</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">"localhost"</span>);</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">/*创建频道*/</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">/*声明一个队列*/</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        String message = <span class="string">"HJW,Hello World!"</span>;</span><br><span class="line">        <span class="comment">/*发布消息*/</span></span><br><span class="line">        channel.basicPublish(<span class="string">""</span>,QUEUE_NAME,<span class="keyword">null</span>,message.getBytes());</span><br><span class="line"></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写消费者"><a href="#编写消费者" class="headerlink" title="编写消费者"></a>编写消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME =<span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">/*创建连接工厂*/</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">/*设置Rabbitmq主机地址，用户名密码与端口。用户名密码与端口可不设置可以使用默认*/</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">"localhost"</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">"guest"</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">"guest"</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">/*通过连接创建频道*/</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">/*声明一个队列 */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">/*创建一个消费者*/</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException  </span>&#123;</span><br><span class="line">                String message = <span class="keyword">new</span> String(body,<span class="string">"UTF-8"</span>);</span><br><span class="line">                System.out.println(<span class="string">" Message is received: "</span> + message );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/*订阅消息并消费*/</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h3><p>1、队列声明</p><pre><code>queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</code></pre><blockquote><p>queue:队列名称<br>durable:是否持久化<br>exclusive:是否为排它队列。即只有自己可见，对首次连接可见，连接断开自动删除<br>autoDelete:是否自动删除，在没有消费者的时候<br>arguments:其它参数</p></blockquote><p>2、发布消息</p><pre><code>basicPublish(String exchange, String routingKey, BasicProperties props, byte[] body)</code></pre><blockquote><p>exchange:路由名<br>routingKey:发布到哪个队列<br>props: 其它参数<br>body: 消息体</p></blockquote><p>3、订阅消息并消费</p><pre><code>basicConsume(String queue, boolean autoAck, Consumer callback)</code></pre><blockquote><p>queue:消息队列名<br>autoAck: 是否自动确认。消息被消息后需要向rabbitmq返回一个确认，rabbitmq才会把消息删除，也可以手动确认<br>callback: 消费者</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ学习系列 一 RabbitMQ 的安装</title>
      <link href="/posts/a7407de/"/>
      <url>/posts/a7407de/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>之前项目上使用到了ActiveMQ，所以学习了下ActiveMQ ，使用JMS结合ActiveMQ发送消息或主题，大致了解了它的使用。听说RabbitMQ 才是主流，打算学习RabbitMQ。</p><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><blockquote><p>RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。消息中间件主要用于组件之间的解耦。rabbitmq多应用于批量数据异步处理、并行任务串行化，高负载任务的负载均衡等 重量级，高并发，异步高可靠性场景。<br>AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</p></blockquote><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>RabitMQ是使用Erlang开发的，它的运行依赖Erlang。所以在使用前需要下载安装Erlang<br>Erlang 下载地址：<a href="http://www.erlang.org/downloads" target="_blank" rel="noopener">Erlang官方下载</a><br>RabbitMQ 下载地址：<a href="http://www.rabbitmq.com/install-windows-manual.html" target="_blank" rel="noopener">RabbitMQ 官方下载</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Erlang-安装"><a href="#Erlang-安装" class="headerlink" title="Erlang 安装"></a>Erlang 安装</h2><p>Window中 Erlang下载下来的安装程序是 otp_win64_20.3.exe ，直接双击安装即可。<br><strong>配置环境变量</strong><br>添加一个系统变量 ERLANG_HOME 并设置为 Erlang 的目录 ，比如我的安装目录为 ：D:\Program Files\erl9.3<br>在 Path 系统变量中加上 %ERLANG_HOME%\bin<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nbg9j8j30tk0fd0u9.jpg" alt="Erlang配置环境变量"><br><strong>验证</strong><br>在cmd命令下输入:erl<br>能够返回版本号则表示安装与配置环境变量成功<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nbcd4nj30ak04gq2w.jpg" alt="这里写图片描述"></p><h2 id="RabbitMQ-安装"><a href="#RabbitMQ-安装" class="headerlink" title="RabbitMQ 安装"></a>RabbitMQ 安装</h2><p>将下载下来的 rabbitmq-server-windows-3.7.4.zip 解压到指定的安装目录即可。<br><strong>配置环境变量</strong><br>添加 RABBITMQ_SERVER 并设置为RabbitMQ 解压到的目录，如我放置的目录为 ：D:\rabbitmq_server-3.7.4<br>在 Path 系统变量末尾添加 %RABBITMQ_SERVER%\sbin </p><p><strong>验证</strong><br>打开cmd窗口，输入: rabbitmq-service</p><pre><code>PS C:\WINDOWS\system32&gt; rabbitmq-service*********************Service control usage*********************rabbitmq-service help    - Display this helprabbitmq-service install - Install the RabbitMQ servicerabbitmq-service remove  - Remove the RabbitMQ serviceThe following actions can also be accomplished by usingWindows Services Management Console (services.msc):rabbitmq-service start   - Start the RabbitMQ servicerabbitmq-service stop    - Stop the RabbitMQ servicerabbitmq-service disable - Disable the RabbitMQ servicerabbitmq-service enable  - Enable the RabbitMQ service</code></pre><p>如有输出 以上 rabbitmq 命令的解释信息即表示安装成功。</p><p><strong>安装服务</strong><br>可以把RabbitMQ服务器作为服务运行，打开一个cmd窗口(管理员)，输入命令： rabbitmq-service install</p><pre><code>PS C:\WINDOWS\system32&gt; rabbitmq-service installD:\Program Files\erl9.3\erts-9.3\bin\erlsrv: Service RabbitMQ added to system.</code></pre><p>运行命令成功后我们可以查看一下服务是否已添加成功<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nbmabnj30ih07raap.jpg" alt="服务添加成功"></p><p><strong>启动RabbitMQ</strong><br>在cmd 窗口中输入命令:rabbitmq-service start</p><pre><code>PS C:\WINDOWS\system32&gt; rabbitmq-service startRabbitMQ 服务正在启动 .RabbitMQ 服务已经启动成功。</code></pre><p><strong>安装web管理插件</strong><br>RabbitMQ 可以通用一个Web界面来进行管理。在cmd命令窗口中输入命令:rabbitmq-plugins enable rabbitmq_management</p><pre><code>PS C:\WINDOWS\system32&gt; rabbitmq-plugins enable rabbitmq_managementEnabling plugins on node rabbit@hwacer-hp:rabbitmq_managementThe following plugins have been configured:  rabbitmq_management  rabbitmq_management_agent  rabbitmq_web_dispatchApplying plugin configuration to rabbit@hwacer-hp...The following plugins have been enabled:  rabbitmq_management  rabbitmq_management_agent  rabbitmq_web_dispatchset 3 plugins.Offline change; changes will take effect at broker restart.</code></pre><p>安装好后需要重启RabbitMQ，使用 stop 停止 再使用start 启动即可。<br>​<br>​    PS C:\WINDOWS\system32&gt; rabbitmq-service stop<br>​    RabbitMQ 服务正在停止………<br>​    RabbitMQ 服务已成功停止。<br>​<br>    PS C:\WINDOWS\system32&gt; rabbitmq-service start<br>    RabbitMQ 服务正在启动 .<br>    RabbitMQ 服务已经启动成功。</p><p>重启之后我们访问 <a href="http://localhost:15672/" target="_blank" rel="noopener">http://localhost:15672/</a>  登陆RabbitMQ 的web管理后台。默认用户密码为 guest/guest<br>重启之后可能需要过一会访问才能打开<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nbqbnej30zv061weo.jpg" alt="这里写图片描述"></p><p>至此，RabbitMQ 的一系列安装准备工作已经完成了，接下来要学习如何通过编码发送消息。</p>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四 ActiveMQ消息持久化与配置</title>
      <link href="/posts/7cb7ab7d/"/>
      <url>/posts/7cb7ab7d/</url>
      
        <content type="html"><![CDATA[<p>四 ActiveMQ消息持久化与配置</p><a id="more"></a><h1 id="一、ActiveMQ-消息持久化"><a href="#一、ActiveMQ-消息持久化" class="headerlink" title="一、ActiveMQ 消息持久化"></a>一、ActiveMQ 消息持久化</h1><h3 id="1、新建数据库"><a href="#1、新建数据库" class="headerlink" title="1、新建数据库"></a>1、新建数据库</h3><p>首先我们先新建一个mysql数据库，并把所有权限赋给新建用户，用户需要在建表的权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> 创建数据库</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> misc</span><br><span class="line"><span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=UTF8;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> 创建用户和授权</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> misc.*</span><br><span class="line"><span class="keyword">TO</span> <span class="string">'misc_root'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span></span><br><span class="line"><span class="keyword">BY</span> <span class="string">'misc_root_pwd'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> misc.*</span><br><span class="line"><span class="keyword">TO</span> <span class="string">'misc_root'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span></span><br><span class="line"><span class="keyword">BY</span> <span class="string">'misc_root_pwd'</span>;</span><br></pre></td></tr></table></figure><h3 id="2、配置数据源"><a href="#2、配置数据源" class="headerlink" title="2、配置数据源"></a>2、配置数据源</h3><p>在ActiveMQ目录中找到conf/activemq.xml 文件。<br>ActiveMQ默认使用的是kahadb 我们在xml中修改成使用mysql<br>在文件中找到：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">kahaDB</span> <span class="attr">directory</span>=<span class="string">"$&#123;activemq.data&#125;/kahadb"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span><br></pre></td></tr></table></figure><p>把它注释掉，添加mysql的配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">jdbcPersistenceAdapter</span> <span class="attr">dataSource</span>=<span class="string">"#MySQL-DS"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span><br></pre></td></tr></table></figure></p><pre><code>在&lt;/broker&gt;后面添加数据源的配置</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MySQL DataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"MySQL-DS"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/misc?useUnicode=true&amp;amp;characterEncoding=UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"misc_root"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"misc_root_pwd"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的ID对应的就是我们上面配置的ID。<br>最后，我们需要把mysql的jar包复制到ActiveMQ目录中的lib目录下，<br>接着重新启动ActiveMQ，这时它会自动在数据库中生成三张表<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nsbyyaj30cx042aa3.jpg" alt="数据表"></p><p>我们可以用上一篇文章写的代码做测试，发布的消息会被存储在mysql数据库中，被消费后会自动删除。</p><h1 id="二、ActiveMQ配置"><a href="#二、ActiveMQ配置" class="headerlink" title="二、ActiveMQ配置"></a>二、ActiveMQ配置</h1><p>在第二篇文章中，我人提到ActiveMQ管理页面的登陆用户与密码默认是admin/admin。这个默认的用户与密码在正式环境中肯定是需要修改的。</p><h3 id="1、ActiveMQ管理页面登陆配置"><a href="#1、ActiveMQ管理页面登陆配置" class="headerlink" title="1、ActiveMQ管理页面登陆配置"></a>1、ActiveMQ管理页面登陆配置</h3><p>我们找到ActiveMQ目录中的 conf/jetty-realm.properties<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nsk4vpj30qf0c63ze.jpg" alt="jetty-realm.properties"><br>可以看到配置了两个用户，admin与user。<br>配置的格式为:<br>​<br>​    用户名:密码,用户角色</p><p>这里我们修改一下admin用户的密码，重新启动ActiveMQ，打开管理员后台<a href="http://localhost:8161/admin" target="_blank" rel="noopener">http://localhost:8161/admin</a><br>弹出的登陆框中需要输入我们新设置的用户与密码才能登陆了。</p><h3 id="2、ActiveMQ连接开启密码认证"><a href="#2、ActiveMQ连接开启密码认证" class="headerlink" title="2、ActiveMQ连接开启密码认证"></a>2、ActiveMQ连接开启密码认证</h3><p><strong>第一步:</strong>找到 ActiveMQ目录中的conf/credentials.properties<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nsoazzj30nj0byt9l.jpg" alt="credentials.properties"><br>这里配置的是连接的用户与密码，我们可以把密码修改成123456。<br><strong>第二步：</strong>找到activemq/conf/activemq.xml<br>在systemUsage 后面添加一个插件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">simpleAuthenticationPlugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">authenticationUser</span> <span class="attr">username</span>=<span class="string">"$&#123;activemq.username&#125;"</span> <span class="attr">password</span>=<span class="string">"$&#123;activemq.password&#125;"</span> <span class="attr">groups</span>=<span class="string">"users,admins"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">simpleAuthenticationPlugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>位置如图:<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nsrzgoj30yk0c2jsn.jpg" alt="这里写图片描述"></p><p>最后重启ActiveMQ ，如果我们还用前面的代码去连接ActiveMQ 会提示用户或密码无效。我们需要修改代码中的连接工厂内容。<br>在实例化工厂时传入我们修改后的用户与密码</p><pre><code>//实例化连接工厂        connectionFactory = new ActiveMQConnectionFactory(&quot;system&quot;,&quot;123456&quot;,JMSProducer.URL);</code></pre><p>重新启动程序即可连接成功。<br>这样我们就实现了密码认证连接ActiveMQ。</p>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ActiveMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三 JMS发布 订阅模型--ActiveMQ简单应用</title>
      <link href="/posts/42a9c4a1/"/>
      <url>/posts/42a9c4a1/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><blockquote><p>上一篇文章 《<a href="https://blog.csdn.net/ftdd_hw/article/details/79921004" target="_blank" rel="noopener">二、JMS 点对点模型 – ActiveMQ简单实现</a>》 我们实现了JMS点对点模型的实例，本章对第二种 发布/订阅 模型来做一个简单的实例。</p></blockquote><p>其实发布/订阅 模型与点对点模型的实现方式基本一致，因此这里就不写完整的过程了。</p><a id="more"></a><h1 id="一、开发环境"><a href="#一、开发环境" class="headerlink" title="一、开发环境"></a>一、开发环境</h1><pre><code>与上篇文章相同</code></pre><h1 id="二、java项目"><a href="#二、java项目" class="headerlink" title="二、java项目"></a>二、java项目</h1><pre><code>与上篇文章相同</code></pre><h1 id="三、具体实现"><a href="#三、具体实现" class="headerlink" title="三、具体实现"></a>三、具体实现</h1><h3 id="1、编写发布者"><a href="#1、编写发布者" class="headerlink" title="1、编写发布者"></a>1、编写发布者</h3><p>发布者的代码与上篇文章基本相同，不同的是 使用session 创建是的主题，而不是队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnection;</span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> .</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@name</span> JMS生产者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 消息的生产者类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/4/11 0011.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMSProducer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//默认连接用户名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME = ActiveMQConnection.DEFAULT_USER;</span><br><span class="line">    <span class="comment">//默认连接密码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = ActiveMQConnection.DEFAULT_PASSWORD;</span><br><span class="line">    <span class="comment">//默认连接地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = ActiveMQConnection.DEFAULT_BROKER_URL;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory;</span><br><span class="line">        <span class="comment">//连接</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//会话</span></span><br><span class="line">        Session session;</span><br><span class="line">        <span class="comment">//目的地</span></span><br><span class="line">        Destination destination;</span><br><span class="line">        <span class="comment">//生产者</span></span><br><span class="line">        MessageProducer messageProducer;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 编写生产者的步骤</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实例化连接工厂</span></span><br><span class="line">            connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(JMSProducer.USERNAME,JMSProducer.PASSWORD,JMSProducer.URL);</span><br><span class="line">            <span class="comment">//使用连接工厂获取连接</span></span><br><span class="line">            connection = connectionFactory.createConnection();</span><br><span class="line">            <span class="comment">//启动连接</span></span><br><span class="line">            connection.start();</span><br><span class="line">            <span class="comment">//使用连接创建获取会话</span></span><br><span class="line">            session = connection.createSession(<span class="keyword">true</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">            <span class="comment">//与点对点唯一不同的地方</span></span><br><span class="line">            <span class="comment">//使用会话连接一个主题作为目的地，如果这个主题不存在将会被创建</span></span><br><span class="line">            destination = session.createTopic(<span class="string">"HelloWorld.Topic"</span>);</span><br><span class="line">            <span class="comment">//使用会话创建消息发布者</span></span><br><span class="line">            messageProducer = session.createProducer(destination);</span><br><span class="line">            <span class="comment">//发布主题</span></span><br><span class="line">            sendMessage(session,messageProducer);</span><br><span class="line">            session.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布者发布主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session  会话</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageProducer   发布者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Session session,MessageProducer messageProducer)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用会话创建一条文本消息,当然，消息的类型有很多，如文字，字节，对象等,可以通过session.create..方法来创建出来</span></span><br><span class="line">            TextMessage textMessage = session.createTextMessage(<span class="string">"你好，世界! by Topic"</span>);</span><br><span class="line">            <span class="comment">//通过消息发布者发出主题</span></span><br><span class="line">            messageProducer.send(textMessage);</span><br><span class="line">            System.out.println(<span class="string">"已发送主题消息:"</span>+textMessage.getText());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、编写订阅者"><a href="#2、编写订阅者" class="headerlink" title="2、编写订阅者"></a>2、编写订阅者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnection;</span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> .</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@name</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/4/11 0011.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMSConsumer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//默认连接用户名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME = ActiveMQConnection.DEFAULT_USER;</span><br><span class="line">    <span class="comment">//默认连接密码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = ActiveMQConnection.DEFAULT_PASSWORD;</span><br><span class="line">    <span class="comment">//默认连接地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = ActiveMQConnection.DEFAULT_BROKER_URL;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory;</span><br><span class="line">        <span class="comment">//连接</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//会话</span></span><br><span class="line">        Session session;</span><br><span class="line">        <span class="comment">//目的地</span></span><br><span class="line">        Destination destination;</span><br><span class="line">        <span class="comment">//消息的消费者</span></span><br><span class="line">        MessageConsumer messageConsumer;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 消息的消费者编写</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实例化工厂</span></span><br><span class="line">            connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(JMSConsumer.USERNAME,JMSConsumer.PASSWORD,JMSConsumer.URL);</span><br><span class="line">            <span class="comment">//使用实例工厂获取连接</span></span><br><span class="line">            connection = connectionFactory.createConnection();</span><br><span class="line">            <span class="comment">//启动连接</span></span><br><span class="line">            connection.start();</span><br><span class="line">            <span class="comment">//使用连接获取会话</span></span><br><span class="line">            session = connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">            <span class="comment">//使用会话连接一个队列作为目的地，如果这个队列不存在将会被创建</span></span><br><span class="line"><span class="comment">//            destination  = session.createQueue("HelloWorld");</span></span><br><span class="line"><span class="comment">//使用会话创建一个主题，如果这个主题不存在将会被创建</span></span><br><span class="line">            Topic topic = session.createTopic(<span class="string">"HelloWorld.Topic"</span>);</span><br><span class="line">            <span class="comment">//使用会话创建一个订阅者</span></span><br><span class="line">            messageConsumer = session.createConsumer(topic);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *获取消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">/*同步实现*/</span></span><br><span class="line">            <span class="comment">//设置接收者接收消息的时间,为了便于测试,这里定为50s,接收到消息之前（或超时之前）将一直阻塞</span></span><br><span class="line">            <span class="comment">/*TextMessage textMessage = (TextMessage) messageConsumer.receive(50000);</span></span><br><span class="line"><span class="comment">            if (textMessage!=null)&#123;</span></span><br><span class="line"><span class="comment">                System.out.println("收到的消息是:" + textMessage.getText());</span></span><br><span class="line"><span class="comment">            &#125;else &#123;</span></span><br><span class="line"><span class="comment">                System.out.println("没有收到消息");</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            <span class="comment">/*异步实现*/</span></span><br><span class="line">            messageConsumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        String text = ((TextMessage)message).getText();</span><br><span class="line">                        System.out.println(<span class="string">"收到的消息 :"</span> +text );</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*需要异步，则不关闭连接*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、关于持久订阅模式"><a href="#3、关于持久订阅模式" class="headerlink" title="3、关于持久订阅模式"></a>3、关于持久订阅模式</h3><p>在第一篇文章 《<a href="https://blog.csdn.net/ftdd_hw/article/details/79920145" target="_blank" rel="noopener">一、JMS概述</a>》中我们提到:</p><blockquote><p>发布/订阅模型还支持持久订阅的概念，在消息发布时，注册了主题的消费者不需要处于活动状态; 当消费者随后变得活跃时，它将收到消息。如果没有活动使用者注册主题，则该主题不会持有它收到的消息，除非它具有持久订阅的不活动消费者。</p></blockquote><p>主要是业务场景如下:</p><blockquote><p>A系统通过MQ推送数据到B系统。通过发布订阅的消息传送模型。由于涉及到的数据比较重要：比如是关于资金、交易、股票价格的信息。要保证B系统一定收到A系统发送的消息，考虑B系统会断电重启之类异常，故设置持久订阅模式。可以保证在B订阅A主题后，因为断电，订阅者状态变为不活动的。在B系统重启后，依然可以收到消息。</p></blockquote><p>实现持久订阅模式与普通的发布订阅模式一样，主要的不同是必须设置唯一的客户端ID和订阅者ID。</p><pre><code>1、在连接启动前设置设置客户端ID2、使用createDurableSubscriber 创建订阅者并指定订阅者ID</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置客户端ID</span></span><br><span class="line">connection.setClientID(<span class="string">"client1"</span>);</span><br><span class="line"><span class="comment">//使用会话创建一个订阅者，并指定订阅者ID为 sub1</span></span><br><span class="line">TopicSubscriber topicSubscriber = session.createDurableSubscriber(topic,<span class="string">"sub1"</span>);</span><br></pre></td></tr></table></figure><h1 id="四、运行"><a href="#四、运行" class="headerlink" title="四、运行"></a>四、运行</h1><h3 id="1、启动ActiveMQ"><a href="#1、启动ActiveMQ" class="headerlink" title="1、启动ActiveMQ"></a>1、启动ActiveMQ</h3><p>与上一篇文章相同</p><h3 id="2、运行程序"><a href="#2、运行程序" class="headerlink" title="2、运行程序"></a>2、运行程序</h3><p>首先我们运行一下发布者。发布成功后我们可以在ActiveMQ 的主题中看到我们创建出来的主题消息<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4ndbkulj30tn0fpjsk.jpg" alt="这里写图片描述"></p><p>我们再运行一下订阅者，会发现订阅者一直在待接收消息，并没有输出我们刚刚发布的主题消息。这是因为 发布/订阅 模型 的特点:发布端在发布消息时，如果没有订阅端在线，则不会保留消息，将会认为消息已经发送。</p><p>因此我们可以先运行订阅者的代码，启动一个订阅者。为了体现发布/订阅模式一对多的特点，我们再启动第二个订阅者。可以在ActiveMQ中看到在两个订阅者在线了。<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nd6yf0j30t002g0sp.jpg" alt="这里写图片描述"></p><p>我们再启动发布者，发布一个消息。在线的两个订阅者就可以接收到我们刚刚发布的消息了。<br>我们再设想一下，其中一个订阅者断电下线了，如果再有消息发布，则待它再次上线时已经接收不到第二次发布的消息了。为了解决一个问题，我们可以使用持久订阅模式。<br>按照上面 <strong>持久订阅</strong>修改代码后重新启动两个订阅者，注意的时这两个订阅者的客户端ID与订阅者ID都必须唯一。<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nd2o4aj30e104jglz.jpg" alt="这里写图片描述"><br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4ndjg4rj30h504z3yx.jpg" alt="这里写图片描述"></p><p>启动发布者发布一个消息 ，可以看到两个订阅者分别都接收到了发布的消息。<br>这时我们关闭 订阅者 Client1 ，再发布一个消息。这时Client2接收到了。当我们启动订阅者 Client1后，它也能够收到第二次发布的消息<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4ndfdw2j30fp05ddg7.jpg" alt="这里写图片描述"></p><p>至此，我们实现了JMS发布/订阅模型，并使用了持久订阅模式关于持久订阅我们需要注意的是:</p><blockquote><p>很多情况下，持久化订阅非常有用，但有的时候并非如此。虽然使用持久还是非持久通常由业务决定。但是，我们还必须考虑消息消耗的存储容量。比如有一个持久订阅者长期处于不活动的状态，那么jms服务器就必须为这个订阅者存储数以千计、万计的无用信息，浪费JMS数据仓库的宝贵空间。因为，我们必须得考虑这个问题。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ActiveMQ </tag>
            
            <tag> JMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二 JMS 点对点模型 -- ActiveMQ简单实现</title>
      <link href="/posts/762f8ad8/"/>
      <url>/posts/762f8ad8/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>本文我们使用ActiveMQ实现简单的点对点的消息模型。</p><a id="more"></a><h1 id="一、开发环境"><a href="#一、开发环境" class="headerlink" title="一、开发环境"></a>一、开发环境</h1><p>这里我使用的是 <em>apache-activemq-5.11.1</em> 可以去<a href="http://activemq.apache.org/download-archives.html" target="_blank" rel="noopener">官网下载</a> </p><ul><li>jdk1.8</li><li>idea</li></ul><h1 id="二、新建java项目"><a href="#二、新建java项目" class="headerlink" title="二、新建java项目"></a>二、新建java项目</h1><p><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nv9gsrj308c07w0sq.jpg" alt="这里写图片描述"></p><p>其中activemq-all-5.11.1.jar在下载下来的 <em>apache-activemq-5.11.1</em> 中就有，直接复制过来导入项目即可。</p><h1 id="三、具体实现"><a href="#三、具体实现" class="headerlink" title="三、具体实现"></a>三、具体实现</h1><p><strong>JMSProducer</strong>：消息的生产者<br><strong>JMSConsumer</strong>：消息的消费者</p><p><strong>大致步骤</strong>：<br>（1）创建连接工厂<br>（2）使用连接工厂创建一个连接<br>（3）启动连接<br>（4）使用连接创建一个会话<br>（5）使用会话创建一个队列/主题<br>（6）使用会话创建一个生产者/消费者<br>（7）使用会话创建一个消息/对象/集合/文件/字节<br>（8）使用生产者/消费者 发送/获取 消息</p><h3 id="1、编写生产者"><a href="#1、编写生产者" class="headerlink" title="1、编写生产者"></a>1、编写生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnection;</span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@name</span> JMS生产者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 消息的生产者类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/4/11 0011.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMSProducer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//默认连接用户名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME = ActiveMQConnection.DEFAULT_USER;</span><br><span class="line">    <span class="comment">//默认连接密码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = ActiveMQConnection.DEFAULT_PASSWORD;</span><br><span class="line">    <span class="comment">//默认连接地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = ActiveMQConnection.DEFAULT_BROKER_URL;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory;</span><br><span class="line">        <span class="comment">//连接</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//会话</span></span><br><span class="line">        Session session;</span><br><span class="line">        <span class="comment">//目的地</span></span><br><span class="line">        Destination destination;</span><br><span class="line">        <span class="comment">//生产者</span></span><br><span class="line">        MessageProducer messageProducer;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 编写生产者的步骤</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实例化连接工厂</span></span><br><span class="line">            connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(JMSConsumer.USERNAME,JMSConsumer.PASSWORD,JMSConsumer.URL);</span><br><span class="line">            <span class="comment">//使用连接工厂获取连接</span></span><br><span class="line">            connection = connectionFactory.createConnection();</span><br><span class="line">            <span class="comment">//启动连接</span></span><br><span class="line">            connection.start();</span><br><span class="line">            <span class="comment">//使用连接创建获取会话</span></span><br><span class="line">            session = connection.createSession(<span class="keyword">true</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">            <span class="comment">//使用会话连接一个队列作为目的地，如果这个队列不存在将会被创建</span></span><br><span class="line">            destination = session.createQueue(<span class="string">"HelloWorld"</span>);</span><br><span class="line">            <span class="comment">//使用会话创建消息生产者</span></span><br><span class="line">            messageProducer = session.createProducer(destination);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送消息</span></span><br><span class="line">            sendMessage(session,messageProducer);</span><br><span class="line"><span class="comment">//支持事务则必须提交</span></span><br><span class="line">            session.commit();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//关闭连接</span></span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产者发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session  会话</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageProducer   生产者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Session session,MessageProducer messageProducer)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用会话创建一条文本消息,当然，消息的类型有很多，如文字，字节，对象等,可以通过session.create..方法来创建出来</span></span><br><span class="line">            TextMessage textMessage = session.createTextMessage(<span class="string">"你好，世界!"</span>);</span><br><span class="line">            <span class="comment">//通过消息生产者发出消息</span></span><br><span class="line">            messageProducer.send(textMessage);</span><br><span class="line">            System.out.println(<span class="string">"已发送消息:"</span>+textMessage.getText());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2、编写消费者"><a href="#2、编写消费者" class="headerlink" title="2、编写消费者"></a>2、编写消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnection;</span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> .</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@name</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/4/11 0011.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMSConsumer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//默认连接用户名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME = ActiveMQConnection.DEFAULT_USER;</span><br><span class="line">    <span class="comment">//默认连接密码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = ActiveMQConnection.DEFAULT_PASSWORD;</span><br><span class="line">    <span class="comment">//默认连接地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = ActiveMQConnection.DEFAULT_BROKER_URL;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory;</span><br><span class="line">        <span class="comment">//连接</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//会话</span></span><br><span class="line">        Session session;</span><br><span class="line">        <span class="comment">//目的地</span></span><br><span class="line">        Destination destination;</span><br><span class="line">        <span class="comment">//消息的消费者</span></span><br><span class="line">        MessageConsumer messageConsumer;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 消息的消费者编写</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实例化工厂</span></span><br><span class="line">            connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(JMSConsumer.USERNAME,JMSConsumer.PASSWORD,JMSConsumer.URL);</span><br><span class="line">            <span class="comment">//使用实例工厂获取连接</span></span><br><span class="line">            connection = connectionFactory.createConnection();</span><br><span class="line">            <span class="comment">//启动连接</span></span><br><span class="line">            connection.start();</span><br><span class="line">            <span class="comment">//使用连接获取会话</span></span><br><span class="line">            session = connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">            <span class="comment">//使用会话连接一个队列作为目的地，如果这个队列不存在将会被创建</span></span><br><span class="line">            destination  = session.createQueue(<span class="string">"HelloWorld"</span>);</span><br><span class="line">            <span class="comment">//使用会话获取消费者</span></span><br><span class="line">            messageConsumer = session.createConsumer(destination);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *获取消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">/*同步实现*/</span></span><br><span class="line">            <span class="comment">//设置接收者接收消息的时间,为了便于测试,这里定为50s,接收到消息之前（或超时之前）将一直阻塞</span></span><br><span class="line">            <span class="comment">/*TextMessage textMessage = (TextMessage) messageConsumer.receive(50000);</span></span><br><span class="line"><span class="comment">            if (textMessage!=null)&#123;</span></span><br><span class="line"><span class="comment">                System.out.println("收到的消息是:" + textMessage.getText());</span></span><br><span class="line"><span class="comment">            &#125;else &#123;</span></span><br><span class="line"><span class="comment">                System.out.println("没有收到消息");</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            <span class="comment">/*异步实现*/</span></span><br><span class="line">            messageConsumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        String text = ((TextMessage)message).getText();</span><br><span class="line">                        System.out.println(<span class="string">"收到的消息是:"</span> +text );</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、session与事务处理"><a href="#3、session与事务处理" class="headerlink" title="3、session与事务处理"></a>3、session与事务处理</h3><pre><code>session = connection.createSession(true,Session.AUTO_ACKNOWLEDGE);</code></pre><p><strong>第一个参数</strong></p><p> 要使用事务处理，必须通过作为第一个参数设置为<strong>true</strong>来创建一个事务处理会话</p><blockquote><p>事务处理允许您将整个系列的传入和传出消息分组在一起，并将它们视为原子单元。消息代理跟踪事务的各个消息的状态，但在您提交事务之前不会完成它们的传送。在发生故障时，您可以回滚事务，取消其所有消息并从头开始重新启动整个系列。<br>事务处理会话总是只有一个打开的事务，包含自会话创建或前一个事务完成以来发送或接收的所有消息。提交或回滚事务会结束该事务并自动开始另一个事务。</p></blockquote><hr><p>当交易中的所有消息都已成功交付时，您可以调用会话的commit方法来提交交易</p><pre><code>session.commit();</code></pre><p>所有会话的传入消息都会被确认，并且所有传出的消息都将被发送。交易被视为完成，并开始新的交易。</p><p>发送或接收操作失败时，会引发异常。虽然可以通过忽略或重试操作来处理异常，但建议您使用会话的rollback方法回退事务：</p><pre><code>session.rollback（）;</code></pre><p><strong>第二个参数</strong>：</p><blockquote><p>值可为Session.AUTO_ACKNOWLEDGE，Session.CLIENT_ACKNOWLEDGE，DUPS_OK_ACKNOWLEDGE其中一个。<br>Session.AUTO_ACKNOWLEDGE为自动确认，客户端发送和接收消息不需要做额外的工作。哪怕是接收端发生异常，也会被当作正常发送成功。<br>Session.CLIENT_ACKNOWLEDGE为客户端确认。客户端接收到消息后，必须调用javax.jms.Message的acknowledge方法。jms服务器才会当作发送成功，并删除消息。<br>DUPS_OK_ACKNOWLEDGE允许副本的确认模式。一旦接收方应用程序的方法调用从处理消息处返回，会话对象就会确认消息的接收；而且允许重复确认。</p></blockquote><h3 id="4、连接工厂-ConnectionFactory"><a href="#4、连接工厂-ConnectionFactory" class="headerlink" title="4、连接工厂 ConnectionFactory"></a>4、连接工厂 ConnectionFactory</h3><pre><code>connectionFactory = new ActiveMQConnectionFactory(JMSConsumer.USERNAME,JMSConsumer.PASSWORD,JMSConsumer.URL);</code></pre><p>activemq默认是不需要密码，生产消费者就可以连接的<br>实例化连接工厂时我们可以去掉用户名与密码，同样可以连接到ActiveMQ<br><strong>如果ActiveMQ是部署在你本地的，则默认的用户名为admin,默认密码也为admin,地址为:tcp://localhost:61616  我们可以直接从<em>ActiveMQConnection</em> 中 取得默认的用户名，密码与地址</strong></p><h3 id="5、关于同步与异步"><a href="#5、关于同步与异步" class="headerlink" title="5、关于同步与异步"></a>5、关于同步与异步</h3><ul><li><p>同步 </p><blockquote><p>订阅者或接收者调用receive方法来接收消息，receive方法在能够接收到消息之前（或超时之前）将一直阻塞 </p></blockquote></li><li><p>异步 </p><blockquote><p>订阅者或接收者可以注册为一个消息监听器。当消息到达之后，系统自动调用监听器的onMessage方法。上面消费者的代码中使用的是这种方法</p></blockquote></li></ul><h1 id="四、运行"><a href="#四、运行" class="headerlink" title="四、运行"></a>四、运行</h1><h3 id="1、启动ActiveMQ"><a href="#1、启动ActiveMQ" class="headerlink" title="1、启动ActiveMQ"></a>1、启动ActiveMQ</h3><p><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nv6mcrj30gm06274s.jpg" alt="ActiveMQ运行"></p><pre><code>如果你的64bit机器，则在这个目录下打开Activemq.bat 32bit机器可以执行 bin\win32\activemq.bat</code></pre><p>打开后出现以下窗口后，表示启动成功，这个窗口不能关闭<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nw0s3ej30rk0exdgn.jpg" alt="ActiveMQ打开窗口"></p><p>打开ActiveMQ的管理界面：<a href="http://127.0.0.1:8161/admin/" target="_blank" rel="noopener">http://127.0.0.1:8161/admin/</a><br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nvmomoj30o80bjwfb.jpg" alt="ActiveMQ管理页面"></p><p>分别点击队列与主题可以查看发送到ActiveMQ的队列消息或主题</p><h3 id="2、运行生产者"><a href="#2、运行生产者" class="headerlink" title="2、运行生产者"></a>2、运行生产者</h3><p>ActiveMQ 启动好后，我们就可以运行生产者向ActiveMQ发送消息了<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nv39yjj30o30600t6.jpg" alt="运行生产者"></p><p>运行结束后，我们查看一下ActiveMQ的队列<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nvd7v0j30ue0710ta.jpg" alt="查看队列"></p><p>表示ActiveMQ自动创建一个名为”HelloWorld“的队列，队列已经收到了一条消息，暂时没有消费者，我们也可以在ActiveMQ中对消息进行浏览删除等操作</p><h3 id="3、运行消费者"><a href="#3、运行消费者" class="headerlink" title="3、运行消费者"></a>3、运行消费者</h3><p><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nvtumsj30o1063t94.jpg" alt="这里写图片描述"><br>这里我们使用异步接收，生产者再次发送消息时同样可以接收到。<br>如果使用同步接收，在规定的时间超时后会程序停止，关闭连接。</p><p>看看ActiveMQ中的队列发生的变化：</p><p><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nvhh96j30ue079aai.jpg" alt="接收消息后"></p><p>可以看到待处理消息已为0，出队消息加1，有一个消费者在线。</p><p>官方文档参考: <a href="https://docs.oracle.com/cd/E26576_01/doc.312/e24945/toc.htm" target="_blank" rel="noopener">https://docs.oracle.com/cd/E26576_01/doc.312/e24945/toc.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ActiveMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一 JMS概述</title>
      <link href="/posts/b7f40b7d/"/>
      <url>/posts/b7f40b7d/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="一、JMS概念"><a href="#一、JMS概念" class="headerlink" title="一、JMS概念"></a>一、JMS概念</h1><blockquote><p>摘要：The Java Message Service (JMS) API is a messaging standard that allows application components based on the Java Platform Enterprise Edition (Java EE) to create, send, receive, and read messages. It enables distributed communication that is loosely coupled, reliable, and asynchronous.</p><a id="more"></a></blockquote><blockquote><p>JMS（JAVA Message Service,java消息服务）API是一个消息服务的标准或者说是规范，允许应用程序组件基于JavaEE平台创建、发送、接收和读取消息。它使分布式通信耦合度更低，消息服务更加可靠以及异步性。jms是java的消息服务，JMS客户端之间可以通过JMS服务进行异步的消息传输</p></blockquote><blockquote><p>消息包括：消息头，消息扩展属性和消息休，其结构看起来与SOAP非常相似，但一般情况下，SOAP主要关注远程服务调用，而消息则专注于信息的交换。</p></blockquote><blockquote><p>消息分为：消息生产者，消息服务器和消息消费者。生产者与消费者之间是透明的，生产者在产生消息后，把消息发送到消息服务器，再由消息服务器发给消费者，因此它们构成了JMS的3点结构;<br>消息服务器再给消费者时，有2种模式:点到点(point to point )模式和发布/订阅(pbulish/subscribe) 模式,两种模式下面会详细介绍;</p></blockquote><h1 id="二、消息服务器"><a href="#二、消息服务器" class="headerlink" title="二、消息服务器"></a>二、消息服务器</h1><blockquote><p>消息服务器有很多:ActiveMQ,Jboss MQ,Open MQ,RabbitMQ ,ZeroMQ等等。<br>本文介绍的是开源的java实现的Apache ActiveMQ,后面我们会写到如何应用它与jms结合。</p></blockquote><p>看到一个对消息服务器作用的解释：</p><blockquote><p>消息队列的主要作用不是通讯，主要是用于解除子系统间的耦合，所以异构系统间的通讯实际并不是ActiveMQ发挥作用的场景，那反而是RPC发挥作用的时候。<br>消息队列更适合于需要更大流量和并发的大型系统场景，可以将消息队列视为一个可靠的通道，主交易过程在处理时，遇到需时较多同时又已经确定了条件的处理就丢到消息队列里进行后续处理，这样可以将主交易过程划分为一个一个可以异步处理的更小的处理过程，减少了主交易流程的处理时间，可以提供更快的响应速度和并发速度。例如，象淘宝这样的处理逻辑非常多的系统，在处理付款时，就可以将通知买家和卖家、记日志甚至记帐流程都放到消息队列里处理，整个主流程能够快速处理完成，继续处理下一个买家的请求。</p></blockquote><p>应用场景:<br><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4mafi9lj30k00dnt9n.jpg" alt="应用场景"></p><h1 id="三、消息模型"><a href="#三、消息模型" class="headerlink" title="三、消息模型"></a>三、消息模型</h1><h2 id="1、Point-to-Point-P2P-–-点对点模式"><a href="#1、Point-to-Point-P2P-–-点对点模式" class="headerlink" title="1、Point-to-Point(P2P) – 点对点模式"></a>1、Point-to-Point(P2P) – 点对点模式</h2><p><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4ma1cryj30dj0450tc.jpg" alt="这里写图片描述"></p><blockquote><p>每条消息都从消息生产者传递到单个消息使用者。生产者将消息传递给队列，稍后将其传递给为队列注册的其中一个消费者。任何数量的生产者和消费者都可以与同一个队列进行交互，但是每个消息都被保证传递给（并且被成功消费）一个消费者，而不会再消费。如果没有消费者注册队列，它将保存它收到的消息，并最终在消费者注册时传递消息。</p></blockquote><h2 id="2、Publish-Subscribe-Pub-Sub-–-发布订阅模型"><a href="#2、Publish-Subscribe-Pub-Sub-–-发布订阅模型" class="headerlink" title="2、Publish/Subscribe(Pub/Sub)  – 发布订阅模型"></a>2、Publish/Subscribe(Pub/Sub)  – 发布订阅模型</h2><p><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4macqaej30c606ldgm.jpg" alt="这里写图片描述"></p><blockquote><p>单个消息可以从生产者被传递到任何数量的消费者。生产者将消息发布到一个主题，然后将其发送给订阅了该主题的所有活动消费者。任何数量的生产者都可以将消息发布到给定主题，并且每条消息都可以传递给任意数量的订阅消费者。该模型还支持持久订阅的概念，在消息发布时，注册了主题的消费者不需要处于活动状态; 当消费者随后变得活跃时，它将收到消息。如果没有活动使用者注册主题，则该主题不会持有它收到的消息，除非它具有持久订阅的不活动消费者。</p></blockquote><h1 id="三、消息的消费"><a href="#三、消息的消费" class="headerlink" title="三、消息的消费"></a>三、消息的消费</h1><p>在JMS中，消息的产生和消息是异步的。对于消费来说，JMS的消息者可以通过两种方式来消费消息。<br>○ 同步 </p><blockquote><p>订阅者或接收者调用receive方法来接收消息，receive方法在能够接收到消息之前（或超时之前）将一直阻塞 </p></blockquote><p>○ 异步 </p><blockquote><p>订阅者或接收者可以注册为一个消息监听器。当消息到达之后，系统自动调用监听器的onMessage方法。</p></blockquote><h1 id="四、JMS编程模型"><a href="#四、JMS编程模型" class="headerlink" title="四、JMS编程模型"></a>四、JMS编程模型</h1><p>1、 ConnectionFactory</p><blockquote><p>创建Connection对象的工厂，针对两种不同的jms消息模型，分别有QueueConnectionFactory和TopicConnectionFactory两种。可以通过JNDI来查找ConnectionFactory对象。</p></blockquote><p>2、Destination</p><blockquote><p>Destination的意思是消息生产者的消息发送目标或者说消息消费者的消息来源。对于消息生产者来说，它的Destination是某个队列（Queue）或某个主题（Topic）;对于消息消费者来说，它的Destination也是某个队列或主题（即消息来源）。</p></blockquote><blockquote><p>所以，Destination实际上就是两种类型的对象：Queue、Topic可以通过JNDI来查找Destination。</p></blockquote><p>3、Connection</p><blockquote><p>Connection表示在客户端和JMS系统之间建立的链接（对TCP/IP socket的包装）。Connection可以产生一个或多个Session。跟ConnectionFactory一样，Connection也有两种类型：QueueConnection和TopicConnection。</p></blockquote><p>4、Session</p><blockquote><p>Session是我们操作消息的接口。可以通过session创建生产者、消费者、消息等。Session提供了事务的功能。当我们需要使用session发送/接收多个消息时，可以将这些发送/接收动作放到一个事务中。同样，也分QueueSession和TopicSession。</p></blockquote><p>5、消息的生产者</p><blockquote><p>消息生产者由Session创建，并用于将消息发送到Destination。同样，消息生产者分两种类型：QueueSender和TopicPublisher。可以调用消息生产者的方法（send或publish方法）发送消息。</p></blockquote><p>6、消息消费者</p><blockquote><p>消息消费者由Session创建，用于接收被发送到Destination的消息。两种类型：QueueReceiver和TopicSubscriber。可分别通过session的createReceiver(Queue)或createSubscriber(Topic)来创建。当然，也可以session的creatDurableSubscriber方法来创建持久化的订阅者。</p></blockquote><p>7、MessageListener</p><blockquote><p>消息监听器。如果注册了消息监听器，一旦消息到达，将自动调用监听器的onMessage方法。EJB中的MDB（Message-Driven Bean）就是一种MessageListener。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ActiveMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常见问题记录</title>
      <link href="/posts/7fc60b16/"/>
      <url>/posts/7fc60b16/</url>
      
        <content type="html"><![CDATA[<p>git pull遇到的问题</p><a id="more"></a><pre><code>early EOF index-pack failed</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/boostorg/boost.git</span><br><span class="line">Cloning into &apos;boost&apos;...</span><br><span class="line">remote: Counting objects: 183543, done.</span><br><span class="line">remote: Compressing objects: 100% (69361/69361), done.</span><br><span class="line">fatal: The remote end hung up unexpectedly</span><br><span class="line">fatal: early EOF</span><br><span class="line">fatal: index-pack failed</span><br></pre></td></tr></table></figure><p>我遇到这个应该是项目中有一些大文件，所以无法传输</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>在项目目录下，先使用 git config -l 查看一下git的配置，添加以下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --add core.compression -1</span><br></pre></td></tr></table></figure></p><blockquote><p>compression 是压缩的意思，从 clone 的终端输出就知道，服务器会压缩目标文件，然后传输到客户端，客户端再解压。取值为 [-1, 9]，-1 以 zlib 为默认压缩库，0 表示不进行压缩，1..9 是压缩速度与最终获得文件大小的不同程度的权衡，数字越大，压缩越慢，当然得到的文件会越小。</p></blockquote><h3 id="git-clone-遇到的问题"><a href="#git-clone-遇到的问题" class="headerlink" title="git clone 遇到的问题"></a>git clone 遇到的问题</h3><pre><code>同样是项目中文件过大，无法clone下来</code></pre><h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.postBuffer 524288000</span><br></pre></td></tr></table></figure><p>把git的postBuffer设置大一些就可以了</p>]]></content>
      
      
      <categories>
          
          <category> TortoiseGit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TortoiseGit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebService的简单实现</title>
      <link href="/posts/9c73294c/"/>
      <url>/posts/9c73294c/</url>
      
        <content type="html"><![CDATA[<p>WebService的简单实现</p><a id="more"></a><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>发布一个WebService，只需要几个注解：</p><ul><li><p>@WebService </p><blockquote><p>注解在一个类上，声明一个WebServier 对外发布，public 方法都会默认发布</p></blockquote></li><li><p>@WebMethod</p><blockquote><p>在方法上使用，可以对设置排除某个方法发布 </p></blockquote></li><li><p>@WebResult</p><blockquote><p>定义方法返回参数说明</p></blockquote></li><li><p>@WebParam</p><blockquote><p>定义方法接收参数说明</p></blockquote></li></ul><p>简单WebService实例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@WebService</span> 注解声明一个WebServier对外发布，public 方法都会默认发布</span></span><br><span class="line"><span class="comment"> * 被声明的类中必须有一个公开的方法，否则发布失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebService</span>(</span><br><span class="line">        serviceName = <span class="string">"HelloWorl2"</span>, <span class="comment">//  服务名</span></span><br><span class="line">        targetNamespace = <span class="string">"http://two.hjwjw.github.io"</span>  <span class="comment">//命名空间,默认包名取反</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldTwo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@WebMethod</span>(operationName = <span class="string">"sayHiWithYou"</span>) <span class="comment">//对外发布的方法名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@WebResult</span>(name = <span class="string">"toYou"</span>) <span class="function">String <span class="title">sayHi</span><span class="params">(@WebParam(name = <span class="string">"youName"</span>)</span> String name) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hi,"</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@WebMethod</span>(exclude = <span class="keyword">true</span>) <span class="comment">//表示排除这个方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello,"</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *     protected、private、final、static方法不能对外公开</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">sayLove</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"love you,"</span>+ name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">sayNo</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"No,"</span>+ name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sayStatic</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Static,"</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">sayFinal</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"final,"</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面定义一个面向接口的WebServic。</p><h3 id="服务接口"><a href="#服务接口" class="headerlink" title="服务接口"></a>服务接口</h3><p>  IHelloWorldThree.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.hjwjw.three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jws.WebMethod;</span><br><span class="line"><span class="keyword">import</span> javax.jws.WebParam;</span><br><span class="line"><span class="keyword">import</span> javax.jws.WebResult;</span><br><span class="line"><span class="keyword">import</span> javax.jws.WebService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The IHelloWorldThree class.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hjwjw</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebService</span>(</span><br><span class="line">    serviceName = <span class="string">"HelloWorldThree"</span>,  <span class="comment">//服务名</span></span><br><span class="line">    targetNamespace = <span class="string">"http://three.hjwjw.github.io"</span>  <span class="comment">//命名空间,默认服务接口包名取反</span></span><br><span class="line">           )</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IHelloWorldThree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@WebMethod</span>(exclude = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function">String <span class="title">sayHi</span><span class="params">(String name)</span> </span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@WebResult</span>(name = <span class="string">"toYou"</span>) <span class="function">String <span class="title">sayHello</span><span class="params">(@WebParam(name = <span class="string">"youName"</span>)</span> String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务实现类"><a href="#服务实现类" class="headerlink" title="服务实现类"></a>服务实现类</h3><p>HelloWorldThree.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The HelloWorldThree class.</span></span><br><span class="line"><span class="comment"> * 面向接口的简单WebService发布</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebService</span>(endpointInterface = <span class="string">"io.github.hjwjw.three.IHelloWorldThree"</span>) <span class="comment">//设置服务端点接口，指定提供服务的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldThree</span> <span class="keyword">implements</span> <span class="title">IHelloWorldThree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hi,"</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello,"</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发布WebService"><a href="#发布WebService" class="headerlink" title="发布WebService"></a>发布WebService</h3><p>app.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IHelloWorldThree helloWorldThree = <span class="keyword">new</span> HelloWorldThree();</span><br><span class="line">        <span class="comment">//自定义一个服务地址</span></span><br><span class="line">        String address = <span class="string">"http://127.0.0.1:7856/ws/three/hello"</span>;    </span><br><span class="line">        <span class="comment">//使用端点服务，将对象绑定到一个地址和端口，同时必须在端口后给服务取一个名称</span></span><br><span class="line">        Endpoint.publish(address,helloWorldThree);</span><br><span class="line">        <span class="comment">//WebService服务说明文档wsdl地址</span></span><br><span class="line">        System.out.println(<span class="string">"Wsdl地址："</span> + address + <span class="string">"?wsdl"</span>);      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="在-Spring-Boot-中发布-WebService-服务"><a href="#在-Spring-Boot-中发布-WebService-服务" class="headerlink" title="在 Spring Boot 中发布 WebService 服务"></a>在 Spring Boot 中发布 WebService 服务</h3><h2 id="WSDL"><a href="#WSDL" class="headerlink" title="WSDL"></a>WSDL</h2><p>WSDL是WebService的说明文档，可以在文档中知道服务提供了哪些方法，哪些参数，参数是什么类型等信息。打开上面发布的wsdl地址如下：</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/resource/img/20190628233025.png" alt="WSDL"></p><h3 id="分解"><a href="#分解" class="headerlink" title="分解"></a>分解</h3><blockquote><p>一个WSDL文档由四部分组成：</p><p>1、types</p><p>　　指定了WebService用到的所有数据类型<br>2、message</p><p>　　指明一个操作所用到的数据类型。</p><p>　　sayHi是指sayHi方法的输入操作用到的数据类型，sayHiResponse是指sayHi的输出操作用到的数据类型。二者的element元素指出了与types中对应到的具体类型。</p><p>3、portType</p><p>　　指出了这个WebService所有支持的操作，就是说有哪些方法可供调用。</p><p>　　这里支持一个sayHi调用，它的输入和输出对应到sayHi和sayHiResponse这个两个数据类型。</p><p>4、binding</p><p>　　soap12:binding元素的transport指明传输协议，这里是http协议。</p><p>　　operation 指明要暴露给外界调用的操作。</p><p>　　use属性指定输入输出的编码方式，这里没有指定编码。</p><p>5、services</p><p>　　指定服务的一些信息，主要是指定服务的访问路径。</p></blockquote><p>与下方的客户端调用联系,可以看出我们在使用客户端调用时应按如下步骤：</p><ul><li><p>创建服务实例</p></li><li><p>使用服务实例调用port 再调用到具体方法</p></li></ul><p><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nqb5cpj30hq0aon0s.jpg" alt="这里写图片描述"></p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>使用Java自带的命令生成客户端代码。</p><h2 id="wsimport"><a href="#wsimport" class="headerlink" title="wsimport"></a>wsimport</h2><p>cmd 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsimport -s . http://127.0.0.1:7856/ws/three/hello?wsdl</span><br></pre></td></tr></table></figure><blockquote><p>wsimport命令用法<br>wsimport [options] WSDL_URI<br>比较常用的[options]有： </p><ol><li>-d <directory><br>在指定的目录生成class文件 </directory></li><li>-clientjar <jarfile><br>在当前目录生成jar文件，结合-d <directory>可以在指定的目录生成jar文件 </directory></jarfile></li><li>-s <directory><br>在指定的目录生成java源文件 , 使用一个 <code>.</code> 表示当前目录</directory></li><li>-p <pkg><br>指定生成文件的包结构 </pkg></li><li>-keep<br>在生成class文件，或者jar包时，同时保留java源文件</li></ol></blockquote><p>生成后如下图:</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/resource/img/20190628234549.png" alt="wsimport生成客户端代码"></p><p>我们可以直接使用class文件，也可以把java文件放入项目里。</p><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过wsimport 解析WSDL生成客户端代码调用WebService服务 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HelloWorldThreeService helloWorldThreeService = <span class="keyword">new</span> HelloWorldThreeService();</span><br><span class="line">        String toyou = helloWorldThreeService.getHelloWorldThreePort().sayHello(<span class="string">"HJW"</span>);</span><br><span class="line">        System.out.println(toyou);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回如下:</p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/resource/img/20190628235123.png" alt="客户端调用返回"></p>]]></content>
      
      
      <categories>
          
          <category> Webservice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webservice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebService原理</title>
      <link href="/posts/9fd8791d/"/>
      <url>/posts/9fd8791d/</url>
      
        <content type="html"><![CDATA[<p>WebService原理介绍</p><a id="more"></a><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><pre><code>WebService就是应用程序之间的远程调用调用是跨语言的调用</code></pre><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><pre><code>扩展性标记语言。用于传输格式化的数据，是WEB服务的基础</code></pre><h3 id="WSDL"><a href="#WSDL" class="headerlink" title="WSDL"></a>WSDL</h3><pre><code>WEB服务描述语言。（WebService的使用说明书）通过XML的形式说明服务在什么地方--地址通过XML形式说明服务提供什么样的方法 -- 如何调用</code></pre><h3 id="SOAP"><a href="#SOAP" class="headerlink" title="SOAP"></a>SOAP</h3><pre><code>SOAP作为一个基于XML语言的协议用于网上传输数据SOAP =  在HTTP的基础上 + XML数据SOAP 是基于HTTP的。SOAP的组成 ：Envelope 必须的部分 。以XML的根元素出现;Headers -- 可选的;Body -- 必须的。在body部分包含要执行服务器的方法。和发送到服务器的数据。</code></pre><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/resource/img/20190628203150.png" alt="SOAP"></p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/resource/img/20190628203212.png" alt="请求"></p><p><img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/resource/img/20190628203243.png" alt></p><p><strong>目前WebService的协议主要有SOAP1.1和1.2。</strong></p><ul><li>两者的命名空间不同。<ul><li>Soap1.1的命名空间：<ul><li>xmlns:soap=“<a href="http://schemas.xmlsoap.org/soap/envelope/" target="_blank" rel="noopener">http://schemas.xmlsoap.org/so…</a> “</li></ul></li><li>Soap1.2 命名空间：<ul><li>xmlns:soap=”<a href="http://www.w3.org/2003/05/soap-envelope“" target="_blank" rel="noopener">http://www.w3.org/2003/05/soap-envelope“</a></li></ul></li></ul></li><li>SOAP1.1版本与SOAP1.2版本在头信息上存在差异。<ul><li>SOAP1.1存在SOAPAction的请求头。</li><li>SOAP1.2没有SOAPAction的请求头。</li></ul></li><li>基于SOAP1.1生成的WSDL和基于SOAP1.2生成的WSDL也不一样。</li></ul><p>主要看命名空间。</p><ul><li><p>在CXF中两种协议请求的方式也不一样。</p><ul><li><p>1.1为content-Type:text/xm;charset=UTF-8</p></li><li><p>1.2为content-Type:application/soap+xml;charset=UTF-8</p></li></ul></li></ul><pre><code>![SOAP1.1](https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/resource/img/20190628203312.png)![SOAP1.2](https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/resource/img/20190628203354.png)</code></pre><p>  <img src="https://raw.githubusercontent.com/hjwjw/hjwjw.github.io/resource/img/20190628203424.png" alt="调用关系"></p>]]></content>
      
      
      <categories>
          
          <category> Webservice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebService </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-loaded实现热部署-开发环境</title>
      <link href="/posts/66217f64/"/>
      <url>/posts/66217f64/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Oracle提供的JDK其实已经自带一定程度的热加载功能，但是如果你修改了类名，方法名，或者添加了新类，新方法的话。Tomcat都需要重新启动来使得刚才的更改生效。而JRebel和spring-loaded都能有效地解决这个问题。其中springloaded是开源软件，可以免费使用。其主页：<a href="https://github.com/spring-projects/spring-loaded" target="_blank" rel="noopener">https://github.com/spring-projects/spring-loaded</a></p></blockquote><a id="more"></a><h2 id="获取jar包"><a href="#获取jar包" class="headerlink" title="获取jar包"></a>获取jar包</h2><blockquote><p>首先我们需要得到spring-loaded的jar包，上面的github链接中可以下载到。这里我用的是最新的springloaded-1.2.7.RELEASE.jar</p><p>存放位置：D:\springloaded-1.2.7.RELEASE.jar</p></blockquote><h2 id="IDE中部署"><a href="#IDE中部署" class="headerlink" title="IDE中部署"></a>IDE中部署</h2><blockquote><p>打开项目，在启动之前按以下进行配置</p></blockquote><h3 id="idea中"><a href="#idea中" class="headerlink" title="idea中"></a>idea中</h3><p>在启动Tomcat之前配置VM option。填写以下参数：<br>​<br>​    -javaagent:D:/springloaded-1.2.7.RELEASE.jar -noverify</p><p>其中参数中Springloaded的路径按实际填写</p><p><img src="http://i1.bvimg.com/608383/957314366cb70661s.png" alt="Markdown"></p><p>配置完成后可以启动项目了</p><hr><h3 id="eclipse中"><a href="#eclipse中" class="headerlink" title="eclipse中"></a>eclipse中</h3><p>右击项目-&gt;Run as-&gt;Run configurations… 在tomcat启动项添加VM参数<br>​<br>​    -javaagent:D:/springloaded-1.2.7.RELEASE.jar -noverify</p><p>其中参数中Springloaded的路径按实际填写</p><p><img src="http://i4.bvimg.com/608383/3e354d4709cf930cs.png" alt="Markdown"></p><p>配置完成后可以启动项目了</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><blockquote><p>为了解Springloaded 适用于哪些更改，下面来作几个测试</p></blockquote><hr><blockquote><p>我在上述启动的SSM项目中，在一个控制器里<strong>添加</strong>了以下方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试SpringLoaded</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span>  String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello Spring Loaded!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存后通过浏览器访问失败，找不到/hello 这个路径。通过重启Tomcat后可以正常访问test方法</p><hr><blockquote><p><strong>继续添加test2()方法，不使用注解</strong>，为了在浏览器中方便测试，通过test()方法来访问test2()方法。（经过上面重启Tomcat后test方法可以访问）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试SpringLoaded</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.test2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span>  String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"Spring Loaded By Test2"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>浏览器输出</em></p><p>​    “Spring Loaded By Test2”</p><blockquote><p>说明我们添加的第二个方法test2()没有经过重启服务器就可以访问了，热部署生效</p></blockquote><hr><blockquote><p>我们继续 <strong>新建一个类</strong>，并在test()方法中去调用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**新建类</span></span><br><span class="line"><span class="comment"> * Created by JiangWei.Huang</span></span><br><span class="line"><span class="comment"> * 2017/8/22 0022.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCtrl</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"TestCtrl-test3"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**修改test方法调用新建的类TestCtr中的test3方法</span></span><br><span class="line"><span class="comment"> * 测试SpringLoaded</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">   TestCtrl testCtrl = <span class="keyword">new</span> TestCtrl();</span><br><span class="line">   <span class="keyword">return</span> testCtrl.test3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>浏览器输出</strong></p><p>​    “TestCtrl-test3”</p><blockquote><p>说明我们新建的类，在不用重启的情况下也能够被调用到了，热部署生效</p><p>但值得注意的是，我们新建的类中，在类上与方法上都写了Spring注解，但这里是也不生效的。@RestController这个注解没有生效，/hello3这个路径也是访问不了的。需要重启服务器才生效</p><p>另外在Idea中修改后自动保存但不会自动重新编译，如果在Idea中修改后热部署没有生效，按ctrl+shift+f9重新编译。也可以设置Idea自动编译，设置如下图。</p><p><img src="http://i4.bvimg.com/608383/aee36cfab3a965e7s.png" alt="Markdown"></p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过上面的测试我们可以得出一些结论。像官方所说，可以实现以下的热更新</p><blockquote><p>Spring Loaded allows you to add/modify/delete methods/fields/constructors. The annotations on types/methods/fields/constructors can also be modified and it is possible to add/remove/change values in enum types.</p><p>Spring加载允许您添加/修改/删除/字段/方法构造函数。注释类型/方法/字段/构造函数，并且还可以在枚举类型中添加/删除/更改值。</p></blockquote><p>但是对于第三方像是Spring注解这些的修改，spring-loaded就无能为力了，必须求助于更加强大的，收费的JRebel了</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Groovy 入门学习小结</title>
      <link href="/posts/250a2363/"/>
      <url>/posts/250a2363/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Groovy 是 JVM 的一个替代语言，替代 是指可以用 Groovy 在 Java 平台上进行 Java 编程，使用方式基本与使用 Java 代码的方式相同。在编写新应用程序时，Groovy 代码能够与 Java 代码很好地结合，也能用于扩展现有代码。目前的 Groovy 版本是 1.5.4，在 Java 1.4 和 Java 5 平台上都能使用，也能在 Java 6 上使用。<br>Groovy 的一个好处是，它的语法与 Java 语言的语法很相似。可以将它想像成 Java 语言的一种更加简单、表达能力更强的变体。</p></blockquote><a id="more"></a><h1 id="认识-Groovy"><a href="#认识-Groovy" class="headerlink" title="认识 Groovy"></a>认识 Groovy</h1><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><pre><code>在Eclipse中安装Groovy 的插件。安装的Url 为：http://dist.codehaus.org/groovy/distributions/update/</code></pre><hr><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><blockquote><p>在学习之前做一个简单的Hello World</p></blockquote><ul><li><p>在Eclipse 中新建项目。</p><pre><code>new &gt; other &gt;Groovy &gt; Groovy Project </code></pre><p>  ​    Eclipse 自动帮我们把Groovy需要的jar包添加上了。</p></li><li><p>在src 上建一个类</p><pre><code>New &gt; other &gt; Groovy &gt; Groovy Class</code></pre><p>  ​    勾选添加 main 方法</p></li><li><p>在main 中打印hello world, 类如下：</p></li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> groovyTest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> main(args) &#123;</span><br><span class="line">System.out.print(<span class="string">"Hello World"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>运行</p><pre><code>右击选择 run as &gt; Groovy Script 可以看到控制台打印了Hello World</code></pre></li></ul><hr><h2 id="Groovy与Java"><a href="#Groovy与Java" class="headerlink" title="Groovy与Java"></a>Groovy与Java</h2><blockquote><p>前面说到Groovy与java 很相似，有多相似可以从Hello World中看出，语法没有一点差别。但是Groovy也有它自己的特点。它可以基本兼容java的语法，也有自己的一套语法，写起来会比Java更加简洁方便。可以将上面的Hello World改成如下：</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> groovyTest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> &#123;</span></span><br><span class="line"><span class="keyword">static</span> main(args) &#123;</span><br><span class="line">println (<span class="string">"Hello World"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出语句变得更简洁了，运行起来与之前结果一样。<br>甚至还能更简洁一点：</p></blockquote><pre><code>println (&quot;Hello World&quot;)</code></pre><blockquote><p>只需要一句就可以实现一个Hello World</p></blockquote><hr><p><strong>总结：</strong></p><ul><li>Groovy 属于脚本语言。脚本语言的一个特点就是能够在运行时进行解释。</li><li>并且它支持松散的 Java 语法, 允许省略分号和修改符除非另行指定，Groovy 的所有内容都为 public。</li><li>Groovy 允许定义简单脚本，同时无需定义正规的 class 对象。</li><li>Groovy 语法还允许省略变量类型。</li><li>并且Groovy也可以在JVM中直接运行，是Java 强有力的补充。</li></ul><hr><h1 id="语法简介"><a href="#语法简介" class="headerlink" title="语法简介"></a>语法简介</h1><h2 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><pre><code>Groovy 中定义变量不需要类型，Groovy 会根据对象的值来判断它的类型，这点与JavaScript 有点类似。也可以统一用 def 来代替类型。例：def value = “Hello World”</code></pre><hr><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><pre><code>定义方法时也不需要加 public 。 在Groovy中默认的修饰符就是public 。可以看到上面的Hello World程序上 main 方法前也没有Public</code></pre><hr><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><pre><code>字符串的使用也比较简单。可以这样定义：def str = “hello”</code></pre><hr><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><pre><code>def var=&quot;hello &quot;+   &quot;world&quot;+   &quot;,groovy!&quot;   def repeat(val){        for(i = 0; i &lt; 5; i++){         println val        }   }   repeat(var)</code></pre><blockquote><p>上面这段代码是一个简单的循环。其中我们可以把For循环改得更简洁一些：<br>for(i in 0..4){}<br>效果与原先相同</p></blockquote><hr><h2 id="Groovy-集合"><a href="#Groovy-集合" class="headerlink" title="Groovy 集合"></a>Groovy 集合</h2><blockquote><p>Groovy支持很多集合， 并且都是标准的Java对象，每个集合都是java.util.Collection 或 java.util.Map 的实例。<br>如： def coll = [“Groovy”, “Java”, “Ruby”]<br>这很像java中的数组，但实际上在Groovy中它一个Collection。向这个集合中添加元素有三种方式：</p></blockquote><pre><code>coll.add(&quot;Python&quot;)coll &lt;&lt; &quot;Smalltalk&quot;coll[5] = &quot;Perl&quot;</code></pre><ul><li>*. 标记的使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">coll = coll*.toUpperCase()</span><br><span class="line">println coll</span><br><span class="line"></span><br><span class="line">//输出：[GROOVY, JAVA, RUBY, PYTHON, SMALLTALK, PERL]</span><br></pre></td></tr></table></figure><blockquote><p>使用 *.标记。会对数组中的每一个值都调用toUpperCase()。方便的实现了对数组中的字符串转成大写</p></blockquote><hr><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><blockquote><p>Groovy中的映射写起来很简单，感觉有点像json。如下：</p></blockquote><pre><code>Def  hash = [name:&quot;Andy&quot;, &quot;VPN-#&quot;:45]</code></pre><blockquote><p>Groovy 会自动处理成一个Map .上面定义中的键值不一定是String ，像上面的name 会自动转成一个String<br>Groovy 对 Map 的存取操作可以用 put 与 get<br>但更具Groovy特色的Map 使用方式时直接用 . 号，如：</p></blockquote><pre><code>Hash.name  //直接取得name 的值Hash.pwd = “123”  //直接向hash 中添加一个键对值</code></pre><hr><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><blockquote><p>闭包是用{符号括起来的代码块，它可以被单独运行或调用，也可以被命名。类似‘匿名类’或内联函数的概念。<br>闭包中最常见的应用是对集合进行迭代，下面定义了3个闭包对map进行了迭代：</p></blockquote><pre><code>map.each({key,value-&gt;    //key,value两个参数用于接受每个元素的键/值println &quot;$key:$value&quot;})map.each{println it}     //it是一个关键字，代表map集合的每个元素map.each({ println it.getKey()+&quot;--&gt;&quot;+it.getValue()})</code></pre><blockquote><p>除了用于迭代之外，闭包也可以单独定义：</p></blockquote><pre><code>def say={word-&gt;       println &quot;Hi,$word!&quot;   }</code></pre><p><em>调用：</em></p><pre><code>say(&apos;groovy&apos;)   say.call(&apos;groovy&amp;grails&apos;)</code></pre><p><em>输出：</em></p><pre><code>Hi,groovy!Hi,groovy&amp;grails!</code></pre><hr><p>##类定义</p><blockquote><p>Groovy中的类与java中的类一样。但因为Groovy 的特色我们可以少写很多代码。</p></blockquote><ul><li><p>不需要public 修饰符</p><blockquote><p>前面说到Groovy中默认的就是public </p></blockquote></li><li><p>不需要变量类型说明</p><blockquote><p>前面也说到了</p></blockquote></li><li><p>不需要getter() 与setter()方法    </p><blockquote><p>Groovy默认生成了标准的getter ，setter方法</p></blockquote></li><li><p>不需要构造函数</p><blockquote><p>不在需要程序员声明任何构造函数，因为groovy自动提供了足够你使用的构造函数</p></blockquote></li><li><p>不需要return </p><blockquote><p>在 Groovy 中可以省略 return 语句。Groovy 默认返回方法的最后一行。</p></blockquote></li><li><p>不需要括号 ()</p><blockquote><p>Groovy中方法调用可以省略()号（构造函数除外）</p></blockquote></li></ul><hr><p>感觉Groovy 和java差不多，比java写起来轻松一些，对于java开发来说，顺手学一门Groovy是很容易的事，对工作中也有很大的作用。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Groovy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> groovy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中如何用EL表达式</title>
      <link href="/posts/b9025ac1/"/>
      <url>/posts/b9025ac1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不积跬步，无以至千里。不积小流，无以成江海。</p></blockquote><p>首先，我们有2种情况：</p><a id="more"></a><ul><li>在JSP页面中写JS<br>举例一看就知道：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"$&#123;msg&#125;"</span>.length&amp;gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">alert(<span class="string">"$&#123;msg&#125;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>只需要加双引号就行</p><ul><li>外部的JS文件引用</li></ul><p>因为EL表达式在JSP里才有效。所有可以先在JSP页面中写一个JS定义一个变量按上面的那种方法来接收EL表达式的值。然后在外部的JS中直接用这个变量 就行了</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Secutity 自定义权限配置</title>
      <link href="/posts/197768c1/"/>
      <url>/posts/197768c1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Srping Security网上也有很多例子，但基本都是所资源直接配置在XML文件里，限制太大，不够灵活。我们需要的是可以在后台修改资源访问权限，实时生效，才能符合现在大多数系统的需求。</p></blockquote><a id="more"></a><h1 id="需要引入的依赖"><a href="#需要引入的依赖" class="headerlink" title="需要引入的依赖"></a>需要引入的依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Spring security --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-security-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.2.2.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-security-config&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.2.2.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--Spring Security end--&gt;</span><br></pre></td></tr></table></figure><h1 id="用户身份认证"><a href="#用户身份认证" class="headerlink" title="用户身份认证"></a>用户身份认证</h1><blockquote><p>我们自定义一个实现类MUserDetailsService 来实现UserDetailsService接口。<br>其中需要实现一个loadUserByUsername方法，用来读取用户的角色。<br>在这里需要从数据库中通过用户名来查询用户的信息和用户所属的角色<br>其中MGrantedAuthority实现了GrantedAuthority接口，用于构建用户权限。<br>MUserDeatils实现了UserDeatils接口，用于存放用户信息与权限</p></blockquote><h3 id="UserDetailsService在身份认证中的作用"><a href="#UserDetailsService在身份认证中的作用" class="headerlink" title="UserDetailsService在身份认证中的作用"></a>UserDetailsService在身份认证中的作用</h3><blockquote><p>Spring Security中进行身份验证的是AuthenticationManager接口，ProviderManager是它的一个默认实现，但它并不用来处理身份认证，而是委托给配置好的AuthenticationProvider，每个AuthenticationProvider会轮流检查身份认证。检查后或者返回Authentication对象或者抛出异常。验证身份就是加载响应的UserDetails，看看是否和用户输入的账号、密码、权限等信息匹配。此步骤由实现AuthenticationProvider的DaoAuthenticationProvider（它利用UserDetailsService验证用户名、密码和授权）处理。包含 GrantedAuthority 的 UserDetails对象在构建 Authentication对象时填入数据。</p></blockquote><p><img src="https://wx4.sinaimg.cn/mw690/005RGBbLly1fwv4nas9raj30xo0jeae0.jpg" alt="这里写图片描述"></p><hr><h3 id="MUserDetailsService-class中的loadUserByUsername方法"><a href="#MUserDetailsService-class中的loadUserByUsername方法" class="headerlink" title="MUserDetailsService.class中的loadUserByUsername方法"></a>MUserDetailsService.class中的loadUserByUsername方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户名加载用户密码与权限信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UsernameNotFoundException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询用户信息</span></span><br><span class="line">    User user = userMapper.selectByName(username);</span><br><span class="line">    List&lt;Role&gt; roleList = <span class="keyword">null</span>;</span><br><span class="line">    MUserDeatils userDeatils = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (user != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//查询用户的角色</span></span><br><span class="line">        roleList = roleMapper.queryByUser(user.getId());</span><br><span class="line">        System.out.println(<span class="string">"user"</span> + user.getUsername() + <span class="string">"----"</span> + user.getPassword());</span><br><span class="line">        <span class="comment">// 构建权限</span></span><br><span class="line">        Set&lt;MGrantedAuthority&gt; authorities = <span class="keyword">new</span> HashSet&lt;MGrantedAuthority&gt;();</span><br><span class="line">        <span class="keyword">if</span> (roleList.size() != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Role role: roleList)&#123;</span><br><span class="line">                authorities.add(<span class="keyword">new</span> MGrantedAuthority(role.getName()));</span><br><span class="line">                System.out.println(role.getName());</span><br><span class="line">            &#125;</span><br><span class="line">            userDeatils = <span class="keyword">new</span> MUserDeatils(user.getUsername(),user.getPassword(),authorities);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> userDeatils;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MGrantedAuthority-class"><a href="#MGrantedAuthority-class" class="headerlink" title="MGrantedAuthority.class"></a>MGrantedAuthority.class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MGrantedAuthority</span> <span class="keyword">implements</span> <span class="title">GrantedAuthority</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String authority;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MGrantedAuthority</span><span class="params">(String authority)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authority = authority;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthority</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> authority;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MUserDeatils-class"><a href="#MUserDeatils-class" class="headerlink" title="MUserDeatils.class"></a>MUserDeatils.class</h3><blockquote><p>实现UserDetails接口定义好变量即可</p></blockquote><h1 id="读取资源与所属角色"><a href="#读取资源与所属角色" class="headerlink" title="读取资源与所属角色"></a>读取资源与所属角色</h1><blockquote><p>需要自定义实现类实现FilterInvocationSecurityMetadataSource接口。通过loadResourceDefine方法可以实现资源与权限的对应关系。<br>要使我们自定义的MFilterInvocationSecurityMetadataSource生效，我们还需要定义一个MyFilterSecurityInterceptor类。<br>这里的数据需要从数据库中取得。另外自定义接口UrlMatcher，实现类为AntUrlPathMatcher。</p></blockquote><h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a><strong>坑</strong></h3><hr><p> 网上有教程是把loadResourceDefine方法放在了构造函数里。但我经过多次试验均出现service,mapper无法注入的问题，然后就会报一个空指针的导异常，经debug发现是service没有注入。经多次查询得知：原因是构造方法会先于注入执行，所以loadResourceDefine方法放入构造中执行时函数内的service与mapper还未执行注入，因此报 java.lang.NullPointerException的异常。解决方法是将loadResourceDefine方法放在getAttributes方法中执行。</p><hr><h3 id="MFilterInvocationSecurityMetadataSource-class"><a href="#MFilterInvocationSecurityMetadataSource-class" class="headerlink" title="MFilterInvocationSecurityMetadataSource.class"></a>MFilterInvocationSecurityMetadataSource.class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MFilterInvocationSecurityMetadataSource</span> <span class="keyword">implements</span> <span class="title">FilterInvocationSecurityMetadataSource</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> IRescAndRoleService iRescAndRoleService ;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService iUserService ;</span><br><span class="line">    <span class="keyword">private</span> UrlMatcher urlMatcher = <span class="keyword">new</span> AntUrlPathMatcher();</span><br><span class="line">    <span class="comment">// 资源权限集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Collection&lt;ConfigAttribute&gt;&gt; resourceMap = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadResourceDefine</span><span class="params">()</span></span>&#123;</span><br><span class="line">        resourceMap = <span class="keyword">new</span> HashMap&lt;String, Collection&lt;ConfigAttribute&gt;&gt;();</span><br><span class="line">        <span class="comment">//取得用户信息</span></span><br><span class="line">        List&lt;User&gt; userList = iUserService.query();</span><br><span class="line">       <span class="comment">//取得资源与角色列表</span></span><br><span class="line">        List&lt;RescAndRole&gt; resourceList = iRescAndRoleService.query();</span><br><span class="line">        System.out.println(resourceList);</span><br><span class="line">        <span class="keyword">for</span> (RescAndRole resource : resourceList) &#123;</span><br><span class="line">            Collection&lt;ConfigAttribute&gt; atts = <span class="keyword">new</span> ArrayList&lt;ConfigAttribute&gt;();</span><br><span class="line">            atts.add(<span class="keyword">new</span> SecurityConfig(resource.getRoleName() ));</span><br><span class="line">            resourceMap.put(resource.getResString(), atts);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title">getAttributes</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        loadResourceDefine();<span class="comment">//防止无法注入问题</span></span><br><span class="line">        <span class="comment">// guess object is a URL.</span></span><br><span class="line">        String url = ((FilterInvocation) o).getRequestUrl();</span><br><span class="line">        Iterator&lt;String&gt; ite = resourceMap.keySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (ite.hasNext()) &#123;</span><br><span class="line">            String resURL = ite.next();</span><br><span class="line">            <span class="keyword">if</span> (urlMatcher.pathMatchesUrl(resURL, url)) &#123;</span><br><span class="line">                <span class="keyword">return</span> resourceMap.get(resURL);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title">getAllConfigAttributes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AntUrlPathMatcher-class"><a href="#AntUrlPathMatcher-class" class="headerlink" title="AntUrlPathMatcher.class"></a>AntUrlPathMatcher.class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AntUrlPathMatcher</span> <span class="keyword">implements</span> <span class="title">UrlMatcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> requiresLowerCaseUrl;</span><br><span class="line">    <span class="keyword">private</span> PathMatcher pathMatcher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AntUrlPathMatcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AntUrlPathMatcher</span><span class="params">(<span class="keyword">boolean</span> requiresLowerCaseUrl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.requiresLowerCaseUrl = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.pathMatcher = <span class="keyword">new</span> AntPathMatcher();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.requiresLowerCaseUrl = requiresLowerCaseUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">compile</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.requiresLowerCaseUrl) &#123;</span><br><span class="line">            <span class="keyword">return</span> path.toLowerCase();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequiresLowerCaseUrl</span><span class="params">(<span class="keyword">boolean</span> requiresLowerCaseUrl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.requiresLowerCaseUrl = requiresLowerCaseUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">pathMatchesUrl</span><span class="params">(Object path, String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="string">"/**"</span>.equals(path)) || (<span class="string">"**"</span>.equals(path))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.pathMatcher.match((String) path, url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUniversalMatchPattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/**"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">requiresLowerCaseUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.requiresLowerCaseUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getClass().getName() + <span class="string">"[requiresLowerCase='"</span></span><br><span class="line">                + <span class="keyword">this</span>.requiresLowerCaseUrl + <span class="string">"']"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MyFilterSecurityInterceptor-class"><a href="#MyFilterSecurityInterceptor-class" class="headerlink" title="MyFilterSecurityInterceptor.class"></a>MyFilterSecurityInterceptor.class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilterSecurityInterceptor</span> <span class="keyword">extends</span> <span class="title">AbstractSecurityInterceptor</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> FilterInvocationSecurityMetadataSource securityMetadataSource;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                         FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        FilterInvocation fi = <span class="keyword">new</span> FilterInvocation(request, response, chain);</span><br><span class="line">        invoke(fi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterInvocationSecurityMetadataSource <span class="title">getSecurityMetadataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.securityMetadataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends Object&gt; getSecureObjectClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> FilterInvocation.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(FilterInvocation fi)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">            ServletException </span>&#123;</span><br><span class="line">        InterceptorStatusToken token = <span class="keyword">super</span>.beforeInvocation(fi);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fi.getChain().doFilter(fi.getRequest(), fi.getResponse());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.afterInvocation(token, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityMetadataSource <span class="title">obtainSecurityMetadataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.securityMetadataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecurityMetadataSource</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            FilterInvocationSecurityMetadataSource newSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.securityMetadataSource = newSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig arg0)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="决策管理器"><a href="#决策管理器" class="headerlink" title="决策管理器"></a>决策管理器</h1><blockquote><p>自定义一个决策管理器MyAccessDecisionManager实现AccessDecisionManager接口。其中的decide方法，决定某一个用户是否有权限访问某个url</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">/* (non-Javadoc)</span><br><span class="line">     * @see org.springframework.security.access.AccessDecisionManager#decide(org.springframework.security.core.Authentication, java.lang.Object, java.util.Collection)</span><br><span class="line">     * 该方法决定该权限是否有权限访问该资源，其实object就是一个资源的地址，authentication是当前用户的</span><br><span class="line">     * 对应权限，如果没登陆就为游客，登陆了就是该用户对应的权限</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void decide(Authentication authentication, Object object,</span><br><span class="line">                       Collection&lt;ConfigAttribute&gt; configAttributes)</span><br><span class="line">            throws AccessDeniedException, InsufficientAuthenticationException &#123;</span><br><span class="line">        if(configAttributes == null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(object.toString()); // object is a URL.</span><br><span class="line">        //所请求的资源拥有的权限(一个资源对多个权限)</span><br><span class="line">        Iterator&lt;ConfigAttribute&gt; iterator = configAttributes.iterator();</span><br><span class="line">        while(iterator.hasNext()) &#123;</span><br><span class="line">            ConfigAttribute configAttribute = iterator.next();</span><br><span class="line">            //访问所请求资源所需要的权限</span><br><span class="line">            String needPermission = configAttribute.getAttribute();</span><br><span class="line">            System.out.println(&quot;访问&quot;+object.toString()+&quot;需要的权限是：&quot; + needPermission);</span><br><span class="line">            //用户所拥有的权限authentication</span><br><span class="line">            Collection&lt;? extends GrantedAuthority&gt; authorities = authentication.getAuthorities();</span><br><span class="line">            for(GrantedAuthority ga : authorities) &#123;</span><br><span class="line">                if(needPermission.equals(ga.getAuthority())) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //没有权限</span><br><span class="line">        throw new AccessDeniedException(&quot; 没有权限访问！ &quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean supports(ConfigAttribute attribute) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean supports(Class&lt;?&gt; clazz) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="配置XML"><a href="#配置XML" class="headerlink" title="配置XML"></a>配置XML</h1><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><blockquote><p>添加Seucrity的过滤器，将拦截所有资源访问</p></blockquote><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h3><pre><code>只能配置成 /*</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载Security配置文件与mybatis配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">        WEB-INF/config/security.xml</span><br><span class="line">        WEB-INF/config/spring-mybatis.xml</span><br><span class="line">    <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring security 的过滤器配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="spring-security-xml"><a href="#spring-security-xml" class="headerlink" title="spring-security.xml"></a>spring-security.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b:beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/security"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:b</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--登陆页面不验证--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/userLogin.html"</span> <span class="attr">security</span>=<span class="string">"none"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--静态文件请求不验证--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/js/**"</span> <span class="attr">security</span>=<span class="string">"none"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/css/**"</span> <span class="attr">security</span>=<span class="string">"none"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--restful请求--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/login"</span> <span class="attr">security</span>=<span class="string">"none"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/getGrid"</span> <span class="attr">security</span>=<span class="string">"none"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--浏览器会自动请求网站图标：favicon.ico -不验证  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/favicon.ico"</span> <span class="attr">security</span>=<span class="string">"none"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">http</span> &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--自定义权限不足时显示的页面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">access-denied-handler</span> <span class="attr">error-page</span>=<span class="string">"/accessHint.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">access-denied-handler</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自定义登录界面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form-login</span></span></span><br><span class="line"><span class="tag">                <span class="attr">authentication-failure-url</span>=<span class="string">"/userLogin.html?error=true"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">login-page</span>=<span class="string">"/userLogin.html"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">default-target-url</span>=<span class="string">"/index.html"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">login-processing-url</span>=<span class="string">"/j_spring_security_check"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logout</span> <span class="attr">invalidate-session</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">logout-success-url</span>=<span class="string">"/userLogin.html"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">logout-url</span>=<span class="string">"/j_spring_security_logout"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过配置custom-filter来增加过滤器，before="FILTER_SECURITY_INTERCEPTOR"表示在SpringSecurity默认的过滤器之前执行。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">custom-filter</span> <span class="attr">ref</span>=<span class="string">"filterSecurityInterceptor"</span> <span class="attr">before</span>=<span class="string">"FILTER_SECURITY_INTERCEPTOR"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">csrf</span> <span class="attr">disabled</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 认证过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b:bean</span> <span class="attr">id</span>=<span class="string">"filterSecurityInterceptor"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">"com.hand.security.utils.MyFilterSecurityInterceptor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b:property</span> <span class="attr">name</span>=<span class="string">"rejectPublicInvocations"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 用户拥有的权限 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b:property</span> <span class="attr">name</span>=<span class="string">"accessDecisionManager"</span> <span class="attr">ref</span>=<span class="string">"accessDecisionManager"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 用户是否拥有所请求资源的权限 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b:property</span> <span class="attr">name</span>=<span class="string">"authenticationManager"</span> <span class="attr">ref</span>=<span class="string">"authenticationManager"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 资源与权限对应关系 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b:property</span> <span class="attr">name</span>=<span class="string">"securityMetadataSource"</span> <span class="attr">ref</span>=<span class="string">"securityMetadataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">b:bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2、更改验证信息加载方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">authentication-manager</span> <span class="attr">alias</span>=<span class="string">"authenticationManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">authentication-provider</span></span></span><br><span class="line"><span class="tag">                <span class="attr">user-service-ref</span>=<span class="string">"mUserDetailsService"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--如果用户的密码采用加密的话 &lt;password-encoder hash="md5" /&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">authentication-provider</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">authentication-manager</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1、配置自定义类MUserDetailsService --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b:bean</span> <span class="attr">id</span>=<span class="string">"mUserDetailsService"</span> <span class="attr">class</span>=<span class="string">"com.hand.security.service.impl.MUserDetailsService"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b:bean</span> <span class="attr">id</span>=<span class="string">"accessDecisionManager"</span> <span class="attr">class</span>=<span class="string">"com.hand.security.utils.MyAccessDecisionManager"</span>&gt;</span><span class="tag">&lt;/<span class="name">b:bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b:bean</span> <span class="attr">id</span>=<span class="string">"securityMetadataSource"</span> <span class="attr">class</span>=<span class="string">"com.hand.security.utils.MFilterInvocationSecurityMetadataSource"</span> &gt;</span><span class="tag">&lt;/<span class="name">b:bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">b:beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Security </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
